import { Component, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { RouterModule } from '@angular/router';
import { TranslateModule, TranslateService } from '@ngx-translate/core';
import Swal from 'sweetalert2';
import { AvanceService } from '../services/avance.service';
import { MarinService } from '../services/marin.service';
import { SelectedBoatService } from '../services/selected-boat.service';
import { AlertService } from '../services/alert.service';
import { Avance } from '../models/avance.model';
import { Marin } from '../models/marin.model';
import { Bateau } from '../models/bateau.model';
import { combineLatest } from 'rxjs';

@Component({
  selector: 'app-avances',
  standalone: true,
  imports: [CommonModule, TranslateModule, RouterModule],
  templateUrl: './avances.component.html',
  styleUrls: ['./avances.component.scss']
})
export class AvancesComponent implements OnInit {
  selectedBoat: Bateau | null = null;
  marins: Marin[] = [];
  avances: Avance[] = [];
  loading = true;

  constructor(
    private avanceService: AvanceService,
    private marinService: MarinService,
    private selectedBoatService: SelectedBoatService,
    private alertService: AlertService,
    private translate: TranslateService
  ) {}

  ngOnInit(): void {
    this.selectedBoat = this.selectedBoatService.getSelectedBoat();
    if (!this.selectedBoat) {
      this.alertService.error(this.translate.instant('BOATS.NO_BOAT_SELECTED_DETAILS'));
      this.loading = false;
      return;
    }
    this.loadData();
  }

  loadData(): void {
    if (!this.selectedBoat) return;
    this.loading = true;
    combineLatest([
      this.marinService.getMarinsByBateau(this.selectedBoat.id!),
      this.avanceService.getUnsettledAvancesByBateau(this.selectedBoat.id!)
    ]).subscribe(([marins, avances]) => {
      this.marins = marins;
      this.marins.sort((a, b) => a.nom.localeCompare(b.nom));
      this.avances = avances.sort((a, b) => {
        const dateA = a.dateAvance instanceof Date ? a.dateAvance : (a.dateAvance as any)?.toDate();
        const dateB = b.dateAvance instanceof Date ? b.dateAvance : (b.dateAvance as any)?.toDate();
        return (dateB?.getTime() || 0) - (dateA?.getTime() || 0);
      });
      this.loading = false;
    });
  }

  getMarinName(marinId: string): string {
    const marin = this.marins.find(m => m.id === marinId);
    return marin ? `${marin.prenom} ${marin.nom}` : this.translate.instant('COMMON.UNKNOWN');
  }

  getTotalAvances(): number {
    return this.avances.reduce((sum, avance) => sum + avance.montant, 0);
  }

  getAvancesByMarin(marinId: string): Avance[] {
    return this.avances.filter(a => a.marinId === marinId);
  }

  getTotalByMarin(marinId: string): number {
    return this.getAvancesByMarin(marinId).reduce((sum, avance) => sum + avance.montant, 0);
  }

  getTodayDate(): string {
    const today = new Date();
    const year = today.getFullYear();
    const month = String(today.getMonth() + 1).padStart(2, '0');
    const day = String(today.getDate()).padStart(2, '0');
    return `${year}-${month}-${day}`;
  }

  formatDate(date: any): string {
    if (date?.toDate) return date.toDate().toISOString().split('T')[0];
    if (date instanceof Date) return date.toISOString().split('T')[0];
    return '';
  }

  formatDisplayDate(date: any): string {
    let dateObj: Date;
    if (date?.toDate) {
      dateObj = date.toDate();
    } else if (date instanceof Date) {
      dateObj = date;
    } else if (typeof date === 'string') {
        dateObj = new Date(date);
    }
     else {
      return '';
    }
    if (isNaN(dateObj.getTime())) {
        return '';
    }
    const day = String(dateObj.getDate()).padStart(2, '0');
    const month = String(dateObj.getMonth() + 1).padStart(2, '0');
    const year = dateObj.getFullYear();
    return `${day}/${month}/${year}`;
  }

  async addAvance(): Promise<void> {
    if (!this.selectedBoat) return;

    const marinsOptions = this.marins.reduce((acc, marin) => {
      const fonction = this.translate.instant('SAILORS.FUNCTION_TYPE.' + marin.fonction.toUpperCase());
      acc[marin.id!] = `${marin.prenom} ${marin.nom} - ${fonction}`;
      return acc;
    }, {} as { [key: string]: string });

    const t = {
      title: this.translate.instant('AVANCES.ADD_MODAL.TITLE'),
      sailor: this.translate.instant('SAILORS.TITLE'),
      selectSailor: this.translate.instant('SAILORS.SELECT_SAILOR'),
      amount: this.translate.instant('COMMON.AMOUNT_D_T'),
      amountPlaceholder: this.translate.instant('COMMON.AMOUNT_IN_TND'),
      date: this.translate.instant('COMMON.DATE'),
      description: this.translate.instant('COMMON.DESCRIPTION'),
      descriptionPlaceholder: this.translate.instant('COMMON.DESCRIPTION_OPTIONAL'), // Clé vérifiée
      add: this.translate.instant('FORM.ADD'),
      cancel: this.translate.instant('FORM.CANCEL'),
      requiredFields: this.translate.instant('FORM.REQUIRED_FIELDS'),
      amountPositive: this.translate.instant('AVANCES.AMOUNT_POSITIVE')
    };

    // Détermine la direction pour l'alignement du texte
    const textDirection = document.body.classList.contains('rtl') ? 'rtl' : 'ltr';
    const textAlign = textDirection === 'rtl' ? 'right' : 'left';

    const { value: formValues } = await Swal.fire({
      title: `<div class="swal-custom-title">${t.title}</div>`,
      html: `
        <div class="swal-custom-form" dir="${textDirection}" style="text-align: ${textAlign};">
          <div class="swal-form-group">
            <label class="swal-form-label" for="swal-marin">${t.sailor} <span class="required-star">*</span></label>
            <select id="swal-marin" class="swal-custom-select">
              <option value="">${t.selectSailor}</option>
              ${Object.keys(marinsOptions).map(id => `<option value="${id}">${marinsOptions[id]}</option>`).join('')}
            </select>
          </div>
          <div class="swal-form-group">
            <label class="swal-form-label" for="swal-montant">${t.amount} <span class="required-star">*</span></label>
            <input id="swal-montant" type="number" class="swal-custom-input" placeholder="0.00" step="0.01" min="0" autocomplete="off" />
            <div class="swal-input-helper">${t.amountPlaceholder}</div>
          </div>
          <div class="swal-form-group">
            <label class="swal-form-label" for="swal-date">${t.date} <span class="required-star">*</span></label>
            <input id="swal-date" type="date" class="swal-custom-input" value="${this.getTodayDate()}" />
          </div>
          <div class="swal-form-group">
            <label class="swal-form-label" for="swal-description">${t.description}</label>
            <textarea id="swal-description" class="swal-custom-textarea" placeholder="${t.descriptionPlaceholder}"></textarea>
          </div>
        </div>
      `,
      focusConfirm: false,
      showCancelButton: true,
      confirmButtonText: t.add,
      cancelButtonText: t.cancel,
      confirmButtonColor: '#10b981',
      cancelButtonColor: '#6b7280',
      customClass: {
        popup: 'swal-wide-popup swal-custom-styles', // Ajout de classes pour CSS
        title: 'swal-custom-title-class', // Pour styler le titre si nécessaire
        htmlContainer: 'swal-custom-html-container', // Pour styler le container html
        confirmButton: 'swal-custom-confirm-button',
        cancelButton: 'swal-custom-cancel-button'
      },
      didOpen: () => {
         // Ajuste la direction et l'alignement après l'ouverture
        const container = Swal.getHtmlContainer();
        if (container) {
          const form = container.querySelector('.swal-custom-form') as HTMLElement;
           if(form) {
             form.dir = textDirection;
             form.style.textAlign = textAlign;
           }
        }
      },
      preConfirm: () => {
        const marinId = (document.getElementById('swal-marin') as HTMLSelectElement).value;
        const montantStr = (document.getElementById('swal-montant') as HTMLInputElement).value;
        const date = (document.getElementById('swal-date') as HTMLInputElement).value;
        const montant = parseFloat(montantStr);

        if (!marinId || !montantStr || !date) {
          Swal.showValidationMessage(t.requiredFields);
          return false;
        }
        if (isNaN(montant) || montant <= 0) {
          Swal.showValidationMessage(t.amountPositive);
          return false;
        }
        return {
          marinId,
          montant,
          date,
          description: (document.getElementById('swal-description') as HTMLTextAreaElement).value
        };
      }
    });

    if (formValues) {
      try {
        this.alertService.loading(this.translate.instant('MESSAGES.SAVING'));
        const newAvance: Omit<Avance, 'id'> = {
          marinId: formValues.marinId,
          bateauId: this.selectedBoat!.id!,
          montant: formValues.montant,
          dateAvance: new Date(formValues.date),
          createdAt: new Date(),
          calculSalaireId: undefined // Correct pour string | undefined
        };
        if (formValues.description && formValues.description.trim() !== '') {
          newAvance.description = formValues.description.trim();
        }
        await this.avanceService.addAvance(newAvance);
        this.alertService.success(this.translate.instant('AVANCES.SUCCESS_ADD'));
      } catch (error) {
        console.error("Erreur lors de l'ajout de l'avance:", error);
        this.alertService.error();
      }
    }
  }


  async editAvance(avance: Avance): Promise<void> {
    const t = {
      title: this.translate.instant('AVANCES.EDIT_MODAL.TITLE'),
      amount: this.translate.instant('COMMON.AMOUNT_D_T'),
      date: this.translate.instant('COMMON.DATE'),
      description: this.translate.instant('COMMON.DESCRIPTION'),
      descriptionPlaceholder: this.translate.instant('COMMON.DESCRIPTION_OPTIONAL'), // Clé ajoutée
      edit: this.translate.instant('FORM.EDIT'),
      cancel: this.translate.instant('FORM.CANCEL'),
      amountPositive: this.translate.instant('AVANCES.AMOUNT_POSITIVE'),
      requiredFields: this.translate.instant('FORM.REQUIRED_FIELDS')
    };

     // Détermine la direction pour l'alignement du texte
    const textDirection = document.body.classList.contains('rtl') ? 'rtl' : 'ltr';
    const textAlign = textDirection === 'rtl' ? 'right' : 'left';

    const { value: formValues } = await Swal.fire({
      title: `<div class="swal-custom-title">${t.title}</div>`,
      html: `
        <div class="swal-custom-form" dir="${textDirection}" style="text-align: ${textAlign};">
          <div class="swal-form-group">
            <label class="swal-form-label" for="swal-montant">${t.amount} <span class="required-star">*</span></label>
            <input id="swal-montant" type="number" class="swal-custom-input" value="${avance.montant}" step="0.01" min="0">
          </div>
          <div class="swal-form-group">
            <label class="swal-form-label" for="swal-date">${t.date} <span class="required-star">*</span></label>
            <input id="swal-date" type="date" class="swal-custom-input" value="${this.formatDate(avance.dateAvance)}">
          </div>
          <div class="swal-form-group">
            <label class="swal-form-label" for="swal-description">${t.description}</label>
            <textarea id="swal-description" class="swal-custom-textarea" placeholder="${t.descriptionPlaceholder}">${avance.description || ''}</textarea>
          </div>
        </div>`,
      focusConfirm: false,
      showCancelButton: true,
      confirmButtonText: t.edit,
      cancelButtonText: t.cancel,
      confirmButtonColor: '#f59e0b',
      cancelButtonColor: '#6b7280',
      customClass: {
        popup: 'swal-wide-popup swal-custom-styles',
        title: 'swal-custom-title-class',
        htmlContainer: 'swal-custom-html-container',
        confirmButton: 'swal-custom-confirm-button',
        cancelButton: 'swal-custom-cancel-button'
      },
       didOpen: () => {
         // Ajuste la direction et l'alignement après l'ouverture
        const container = Swal.getHtmlContainer();
        if (container) {
          const form = container.querySelector('.swal-custom-form') as HTMLElement;
           if(form) {
             form.dir = textDirection;
             form.style.textAlign = textAlign;
           }
        }
      },
      preConfirm: () => {
        const montantStr = (document.getElementById('swal-montant') as HTMLInputElement).value;
        const date = (document.getElementById('swal-date') as HTMLInputElement).value;
        const montant = parseFloat(montantStr);

        if (!montantStr || !date) {
            Swal.showValidationMessage(t.requiredFields);
            return false;
        }
        if (isNaN(montant) || montant <= 0) {
            Swal.showValidationMessage(t.amountPositive);
            return false;
        }
        return {
            montant,
            date,
            description: (document.getElementById('swal-description') as HTMLTextAreaElement).value
        };
      }
    });

    if (formValues) {
      try {
        this.alertService.loading(this.translate.instant('MESSAGES.UPDATING'));
        const updateData: Partial<Avance> = {
          montant: formValues.montant,
          dateAvance: new Date(formValues.date)
        };
        updateData.description = (formValues.description && formValues.description.trim() !== '') ? formValues.description.trim() : '';

        await this.avanceService.updateAvance(avance.id!, updateData);
        this.alertService.success(this.translate.instant('AVANCES.SUCCESS_UPDATE'));
      } catch (error) {
        console.error('Erreur lors de la modification:', error);
        this.alertService.error();
      }
    }
  }

  async deleteAvance(avance: Avance): Promise<void> {
    const marinName = this.getMarinName(avance.marinId);
    const itemName = this.translate.instant('AVANCES.DELETE_CONFIRM_ITEM', { amount: avance.montant, name: marinName });
    const confirmed = await this.alertService.confirmDelete(itemName);
    if (confirmed) {
      try {
        this.alertService.loading(this.translate.instant('MESSAGES.DELETING'));
        await this.avanceService.deleteAvance(avance.id!);
        this.alertService.toast(this.translate.instant('AVANCES.SUCCESS_DELETE'));
      } catch (error) {
        console.error('Erreur lors de la suppression:', error);
        this.alertService.error();
      }
    }
  }
}
