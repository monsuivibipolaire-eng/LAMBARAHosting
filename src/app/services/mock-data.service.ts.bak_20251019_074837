// src/app/services/mock-data.service.ts

import { Injectable } from '@angular/core';
import { 
  Firestore, 
  collection, 
  addDoc, 
  getDocs, 
  deleteDoc,
  doc 
} from '@angular/fire/firestore';
import { BateauService } from './bateau.service';
import { MarinService } from './marin.service';
import { SortieService } from './sortie.service';
import { FactureService } from './facture.service';
import { DepenseService } from './depense.service';
import { Bateau } from '../models/bateau.model';
import { Marin } from '../models/marin.model';
import { Sortie } from '../models/sortie.model';
import { Facture, DetailPoisson } from '../models/facture.model';
import { Depense } from '../models/depense.model';

@Injectable({
  providedIn: 'root'
})
export class MockDataService {

  // Types de poissons tunisiens avec prix moyens
  private typesPoissons = [
    { nom: 'Daurade', prixMin: 25, prixMax: 35, unite: 'kg' },
    { nom: 'Loup de mer', prixMin: 30, prixMax: 45, unite: 'kg' },
    { nom: 'Rouget', prixMin: 20, prixMax: 30, unite: 'kg' },
    { nom: 'Sardine', prixMin: 8, prixMax: 15, unite: 'kg' },
    { nom: 'Thon rouge', prixMin: 50, prixMax: 80, unite: 'kg' },
    { nom: 'Mérou', prixMin: 35, prixMax: 50, unite: 'kg' },
    { nom: 'Saint-Pierre', prixMin: 28, prixMax: 40, unite: 'kg' },
    { nom: 'Sole', prixMin: 32, prixMax: 48, unite: 'kg' },
    { nom: 'Calamar', prixMin: 18, prixMax: 28, unite: 'kg' },
    { nom: 'Poulpe', prixMin: 15, prixMax: 25, unite: 'kg' },
    { nom: 'Crevettes roses', prixMin: 40, prixMax: 60, unite: 'kg' },
    { nom: 'Langoustines', prixMin: 55, prixMax: 75, unite: 'kg' }
  ];

  // Noms de clients tunisiens (restaurants, poissonneries, grossistes)
  private nomsClients = [
    'Restaurant La Goulette',
    'Poissonnerie Ben Ahmed',
    'Restaurant Le Pirate',
    'Marché Central Sfax',
    'Restaurant Dar El Jeld',
    'Grossiste Fruits de Mer Monastir',
    'Poissonnerie du Port',
    'Restaurant La Médina',
    'Hotel Hasdrubal Thalassa',
    'Supermarché Carrefour Tunis',
    'Restaurant Le Corail',
    'Poissonnerie Zitouna',
    'Hôtel Concorde',
    'Restaurant Chez Slah',
    'Marché de Poissons Mahdia'
  ];

  constructor(
    private firestore: Firestore,
    private bateauService: BateauService,
    private marinService: MarinService,
    private sortieService: SortieService,
    private factureService: FactureService,
    private depenseService: DepenseService
  ) {}

  async generateAllMockData(): Promise<void> {
    try {
      // Supprimer les anciennes données
      await this.clearAllData();

      // Générer les bateaux
      const bateauxIds = await this.generateBateaux();
      
      // Pour chaque bateau, générer marins, sorties, factures et dépenses
      for (const bateauId of bateauxIds) {
        const marinsIds = await this.generateMarins(bateauId);
        const sortiesIds = await this.generateSorties(bateauId);
        
        // Générer des factures détaillées pour chaque sortie
        for (const sortieId of sortiesIds) {
          await this.generateFacturesDetaillees(sortieId);
          await this.generateDepenses(sortieId);
        }
      }
    } catch (error) {
      console.error('Erreur génération mock data:', error);
      throw error;
    }
  }

  private async clearAllData(): Promise<void> {
    const collections = ['bateaux', 'marins', 'sorties', 'factures', 'depenses'];
    
    for (const collectionName of collections) {
      const querySnapshot = await getDocs(collection(this.firestore, collectionName));
      const deletePromises = querySnapshot.docs.map(document => 
        deleteDoc(doc(this.firestore, collectionName, document.id))
      );
      await Promise.all(deletePromises);
    }
  }

  private async generateBateaux(): Promise<string[]> {
    const bateaux: Omit<Bateau, 'id'>[] = [
      {
        nom: 'El Amel',
        immatriculation: 'SF-2024-001',
        typeMoteur: 'Diesel Volvo Penta',
        puissance: 350,
        longueur: 18,
        capaciteEquipage: 6,
        dateConstruction: new Date('2018-03-15'),
        portAttache: 'Port de Sfax',
        statut: 'actif',
        createdAt: new Date()
      },
      {
        nom: 'La Perle Bleue',
        immatriculation: 'SF-2023-045',
        typeMoteur: 'Diesel Caterpillar',
        puissance: 420,
        longueur: 22,
        capaciteEquipage: 8,
        dateConstruction: new Date('2020-06-20'),
        portAttache: 'Port de Sfax',
        statut: 'actif',
        createdAt: new Date()
      },
      {
        nom: 'Neptune',
        immatriculation: 'SF-2022-089',
        typeMoteur: 'Diesel Yanmar',
        puissance: 280,
        longueur: 15,
        capaciteEquipage: 5,
        dateConstruction: new Date('2019-09-10'),
        portAttache: 'Port de Sfax',
        statut: 'maintenance',
        createdAt: new Date()
      }
    ];

    const ids: string[] = [];
    for (const bateau of bateaux) {
      const docRef = await this.bateauService.addBateau(bateau);
      ids.push(docRef.id);
    }
    return ids;
  }

  private async generateMarins(bateauId: string): Promise<string[]> {
    const prenoms = ['Ahmed', 'Mohamed', 'Ali', 'Karim', 'Mehdi', 'Youssef'];
    const noms = ['Ben Salem', 'Trabelsi', 'Gharbi', 'Hammami', 'Jomaa', 'Ksouri'];
    const fonctions: Array<'capitaine' | 'second' | 'mecanicien' | 'matelot'> = 
      ['capitaine', 'second', 'mecanicien', 'matelot', 'matelot', 'matelot'];

    const ids: string[] = [];
    for (let i = 0; i < 6; i++) {
      const marin: Omit<Marin, 'id'> = {
        bateauId,
        nom: noms[i],
        prenom: prenoms[i],
        dateNaissance: new Date(1985 + Math.floor(Math.random() * 15), Math.floor(Math.random() * 12), Math.floor(Math.random() * 28) + 1),
        fonction: fonctions[i],
        part: fonctions[i] === 'capitaine' ? 2 : fonctions[i] === 'second' ? 1.5 : fonctions[i] === 'mecanicien' ? 1.3 : 1,
        numeroPermis: `PM-${10000 + i}`,
        telephone: `+216 ${20 + i} ${Math.floor(Math.random() * 900000 + 100000)}`,
        email: `${prenoms[i].toLowerCase()}.${noms[i].toLowerCase().replace(' ', '')}@email.com`,
        adresse: `${Math.floor(Math.random() * 100) + 1} Avenue Habib Bourguiba, Sfax`,
        dateEmbauche: new Date(2020 + Math.floor(Math.random() * 4), Math.floor(Math.random() * 12), Math.floor(Math.random() * 28) + 1),
        statut: 'actif',
        createdAt: new Date()
      };
      const docRef = await this.marinService.addMarin(marin);
      ids.push(docRef.id);
    }
    return ids;
  }

  private async generateSorties(bateauId: string): Promise<string[]> {
    const destinations = [
      'Banc de Kerkennah',
      'Zone côtière Sfax',
      'Golfe de Gabès',
      'Îles Kerkennah',
      'Zone Sud Monastir',
      'Banc de Mahdia'
    ];

    const ids: string[] = [];
    const today = new Date();
    
    // Générer 8 sorties sur les 60 derniers jours
    for (let i = 0; i < 8; i++) {
      const joursAvant = Math.floor(Math.random() * 60);
      const dateDepart = new Date(today);
      dateDepart.setDate(dateDepart.getDate() - joursAvant - 3);
      
      const dateRetour = new Date(dateDepart);
      dateRetour.setDate(dateRetour.getDate() + Math.floor(Math.random() * 3) + 1);

      const sortie: Omit<Sortie, 'id'> = {
        bateauId,
        dateDepart,
        dateRetour,
        destination: destinations[Math.floor(Math.random() * destinations.length)],
        statut: 'terminee',
        salaireCalcule: false,
        observations: '',
        createdAt: new Date()
      };
      const docRef = await this.sortieService.addSortie(sortie);
      ids.push(docRef.id);
    }
    return ids;
  }

  private async generateFacturesDetaillees(sortieId: string): Promise<void> {
    // Générer 2 à 4 factures par sortie
    const nombreFactures = Math.floor(Math.random() * 3) + 2;
    
    for (let i = 0; i < nombreFactures; i++) {
      // Générer les détails des poissons (2 à 5 types différents)
      const nombreTypesPoissons = Math.floor(Math.random() * 4) + 2;
      const detailsPoissons: DetailPoisson[] = [];
      
      // Sélectionner des types de poissons aléatoires
      const poissonsSelectionnes = this.shuffleArray([...this.typesPoissons])
        .slice(0, nombreTypesPoissons);
      
      let montantTotalFacture = 0;
      
      for (const poisson of poissonsSelectionnes) {
        const quantite = Math.floor(Math.random() * 80) + 20; // 20 à 100 kg
        const prixUnitaire = Math.floor(Math.random() * (poisson.prixMax - poisson.prixMin) + poisson.prixMin);
        const montantTotal = quantite * prixUnitaire;
        
        detailsPoissons.push({
          typePoisson: poisson.nom,
          quantite,
          prixUnitaire,
          montantTotal
        });
        
        montantTotalFacture += montantTotal;
      }

      // Créer la facture
      const numeroFacture = `FA-${new Date().getFullYear()}-${String(Math.floor(Math.random() * 9000) + 1000).padStart(4, '0')}`;
      const client = this.nomsClients[Math.floor(Math.random() * this.nomsClients.length)];
      
      const facture: Omit<Facture, 'id'> = {
        sortieId,
        numeroFacture,
        dateFacture: new Date(),
        client,
        montantTotal: montantTotalFacture,
        detailsPoissons,
        paye: Math.random() > 0.3, // 70% de chances d'être payé
        createdAt: new Date()
      };
      
      await this.factureService.addFacture(facture);
    }
  }

  private async generateDepenses(sortieId: string): Promise<void> {
    const typesDepenses: Array<'fuel' | 'ice' | 'oilchange' | 'crewcnss' | 'crewbonus' | 'food' | 'vms' | 'misc'> = 
      ['fuel', 'ice', 'food', 'crewcnss'];
    
    for (const type of typesDepenses) {
      let montant = 0;
      let description = '';
      
      switch (type) {
        case 'fuel':
          montant = Math.floor(Math.random() * 1500) + 800;
          description = 'Carburant diesel pour la sortie';
          break;
        case 'ice':
          montant = Math.floor(Math.random() * 300) + 150;
          description = 'Glace pour conservation du poisson';
          break;
        case 'food':
          montant = Math.floor(Math.random() * 400) + 200;
          description = 'Provisions pour l\'équipage';
          break;
        case 'crewcnss':
          montant = Math.floor(Math.random() * 600) + 400;
          description = 'Cotisations CNSS équipage';
          break;
      }

      const depense: Omit<Depense, 'id'> = {
        sortieId,
        type,
        montant,
        date: new Date(),
        description,
        createdAt: new Date()
      };
      
      await this.depenseService.addDepense(depense);
    }
  }

  private shuffleArray<T>(array: T[]): T[] {
    const newArray = [...array];
    for (let i = newArray.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1));
      [newArray[i], newArray[j]] = [newArray[j], newArray[i]];
    }
    return newArray;
  }
}
