====================================
  Projet Angular - Code Source
  Date: Sat Oct 18 16:19:08 CET 2025
====================================

Arborescence du projet:

./src
├── app
│   ├── app-routing-module.ts
│   ├── app-routing.module.ts
│   ├── app-routing.module.ts.fix_backup
│   ├── app.component.html
│   ├── app.component.scss
│   ├── app.component.scss.tmp
│   ├── app.component.ts
│   ├── app.config.ts
│   ├── app.html
│   ├── app.module.ts
│   ├── app.routes.ts
│   ├── app.ts
│   ├── auth
│   │   ├── auth.component.html
│   │   ├── auth.component.scss
│   │   └── auth.component.ts
│   ├── auth-guard.ts
│   ├── auth.guard.ts
│   ├── auth.service.ts
│   ├── auth.ts
│   ├── avances
│   │   ├── avances.component.html
│   │   ├── avances.component.scss
│   │   └── avances.component.ts
│   ├── bateaux
│   │   ├── bateau-form.component.html
│   │   ├── bateau-form.component.scss
│   │   ├── bateau-form.component.ts
│   │   ├── bateaux-list.component.html
│   │   ├── bateaux-list.component.scss
│   │   ├── bateaux-list.component.ts
│   │   ├── bateaux.module.ts
│   │   ├── bateaux.module.ts.backup
│   │   ├── bateaux.module.ts.backup_routes_20251018_153018
│   │   ├── bateaux.module.ts.backup_routes_final
│   │   ├── bateaux.module.ts.backup_translate
│   │   ├── bateaux.module.ts.backup_translate_final
│   │   └── bateaux.module.ts.backup_translate_final2
│   ├── components
│   │   └── language-selector
│   │       ├── language-selector.component.html
│   │       ├── language-selector.component.scss
│   │       └── language-selector.component.ts
│   ├── dashboard
│   │   ├── dashboard-home
│   │   │   ├── dashboard-home.component.html
│   │   │   ├── dashboard-home.component.scss
│   │   │   └── dashboard-home.component.ts
│   │   ├── dashboard-routing.module.ts
│   │   ├── dashboard-routing.module.ts.backup
│   │   ├── dashboard-routing.module.ts.fix_backup
│   │   ├── dashboard.component.html
│   │   ├── dashboard.component.scss
│   │   ├── dashboard.component.ts
│   │   └── dashboard.module.ts
│   ├── guards
│   │   ├── boat-selection.guard.ts
│   │   └── boat-selection.guard.ts.backup
│   ├── marins
│   │   ├── marin-form.component.html
│   │   ├── marin-form.component.scss
│   │   ├── marin-form.component.ts
│   │   ├── marin-form.component.ts.backup
│   │   ├── marin-form.component.ts.backup_correct
│   │   ├── marin-form.component.ts.backup_final
│   │   ├── marin-form.component.ts.backup_final_type
│   │   ├── marin-form.component.ts.backup_fix
│   │   ├── marin-form.component.ts.backup_routes_20251018_153018
│   │   ├── marin-form.component.ts.backup_routes_final
│   │   ├── marins-list.component.html
│   │   ├── marins-list.component.scss
│   │   ├── marins-list.component.ts
│   │   ├── marins-list.component.ts.backup_20251018_143344
│   │   ├── marins-list.component.ts.backup_bateauid
│   │   ├── marins-list.component.ts.backup_routes_20251018_153019
│   │   ├── marins-list.component.ts.backup_routes_final
│   │   ├── marins-list.component.ts.fix_final
│   │   └── marins.module.ts
│   ├── mock-data
│   │   └── mock-data.component.ts
│   ├── models
│   │   ├── avance.model.ts
│   │   ├── bateau.model.ts
│   │   ├── depense.model.ts
│   │   ├── facture-vente.model.ts
│   │   ├── facture.model.ts
│   │   ├── marin.model.ts
│   │   ├── paiement.model.ts
│   │   ├── partage.model.ts
│   │   ├── pointage.model.ts
│   │   ├── salaire.model.ts
│   │   └── sortie.model.ts
│   ├── salaires
│   │   ├── salaires-list.component.html
│   │   ├── salaires-list.component.scss
│   │   └── salaires-list.component.ts
│   ├── services
│   │   ├── alert.service.ts
│   │   ├── avance.service.ts
│   │   ├── bateau.service.ts
│   │   ├── depense.service.ts
│   │   ├── facture-vente.service.ts
│   │   ├── facture.service.ts
│   │   ├── language.service.ts
│   │   ├── marin.service.ts
│   │   ├── mock-data.service.ts
│   │   ├── paiement.service.ts
│   │   ├── partage.service.ts
│   │   ├── pointage.service.ts
│   │   ├── salaire.service.ts
│   │   ├── selected-boat.service.ts
│   │   └── sortie.service.ts
│   ├── sorties
│   │   ├── depense-form
│   │   │   ├── depense-form.component.html
│   │   │   ├── depense-form.component.scss
│   │   │   └── depense-form.component.ts
│   │   ├── details
│   │   │   ├── sorties-details.component.html
│   │   │   ├── sorties-details.component.scss
│   │   │   ├── sorties-details.component.scss.tmp
│   │   │   └── sorties-details.component.ts
│   │   ├── factures
│   │   │   ├── factures.component.html
│   │   │   ├── factures.component.scss
│   │   │   └── factures.component.ts
│   │   ├── form
│   │   │   ├── sorties-form.component.html
│   │   │   ├── sorties-form.component.scss
│   │   │   ├── sorties-form.component.scss.tmp
│   │   │   └── sorties-form.component.ts
│   │   ├── list
│   │   │   ├── sorties-list.component.html
│   │   │   ├── sorties-list.component.scss
│   │   │   ├── sorties-list.component.scss.tmp
│   │   │   └── sorties-list.component.ts
│   │   ├── pointage
│   │   │   ├── pointage.component.html
│   │   │   ├── pointage.component.scss
│   │   │   └── pointage.component.ts
│   │   ├── salaires
│   │   │   ├── salaires.component.html
│   │   │   ├── salaires.component.scss
│   │   │   └── salaires.component.ts
│   │   ├── sortie-details.component.html
│   │   ├── sortie-details.component.scss
│   │   ├── sortie-details.component.ts
│   │   ├── sortie-form.component.html
│   │   ├── sortie-form.component.scss
│   │   ├── sortie-form.component.ts
│   │   ├── sorties-list.component.html
│   │   ├── sorties-list.component.scss
│   │   ├── sorties-list.component.ts
│   │   ├── sorties-routing.module.ts
│   │   └── sorties.module.ts
│   └── ventes
│       ├── ventes-list.component.html
│       ├── ventes-list.component.scss
│       └── ventes-list.component.ts
├── assets
│   └── i18n
│       ├── ar.json
│       ├── en.json
│       └── fr.json
├── environments
│   ├── environment.development.ts
│   └── environment.ts
├── index.html
├── main.ts
├── main.ts.backup
├── marins
│   ├── marins-list.component.scss
│   └── marins-list.component.scss.tmp
├── styles
│   └── _btn-back.scss
└── styles.scss

29 directories, 149 files

====================================
  FICHIERS SOURCE
====================================


====================================
FICHIER: ./src/app/app-routing-module.ts
Lignes:       10
====================================

import { NgModule } from '@angular/core';
import { RouterModule, Routes } from '@angular/router';

const routes: Routes = [];

@NgModule({
  imports: [RouterModule.forRoot(routes)],
  exports: [RouterModule]
})
export class AppRoutingModule { }

====================================
FICHIER: ./src/app/app-routing.module.ts
Lignes:       22
====================================

import { NgModule } from '@angular/core';
import { RouterModule, Routes } from '@angular/router';
import { AuthComponent } from './auth/auth.component';
import { AuthGuard } from './auth.guard';

// EXPORTER routes pour app.config.ts
export const routes: Routes = [
  { path: '', redirectTo: 'auth', pathMatch: 'full' },
  { path: 'auth', component: AuthComponent },
  { 
    path: 'dashboard', 
    loadChildren: () => import('./dashboard/dashboard.module').then(m => m.DashboardModule),
    canActivate: [AuthGuard]
  },
  { path: '**', redirectTo: 'auth' }
];

@NgModule({
  imports: [RouterModule.forRoot(routes)],
  exports: [RouterModule]
})
export class AppRoutingModule { }

====================================
FICHIER: ./src/app/app.component.ts
Lignes:       19
====================================

import { Component, OnInit } from '@angular/core';
import { LanguageService } from './services/language.service';

@Component({
  standalone: false,
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.scss']
})
export class AppComponent implements OnInit {
  title = 'test';

  constructor(private languageService: LanguageService) {}

  ngOnInit(): void {
    // Initialiser la langue au démarrage de l'application
    this.languageService.initLanguage();
  }
}

====================================
FICHIER: ./src/app/app.config.ts
Lignes:       12
====================================

import { ApplicationConfig, provideBrowserGlobalErrorListeners, provideZoneChangeDetection } from '@angular/core';
import { provideRouter } from '@angular/router';

import { routes } from './app.routes';

export const appConfig: ApplicationConfig = {
  providers: [
    provideBrowserGlobalErrorListeners(),
    provideZoneChangeDetection({ eventCoalescing: true }),
    provideRouter(routes)
  ]
};

====================================
FICHIER: ./src/app/app.module.ts
Lignes:       61
====================================

import { NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';
import { BrowserAnimationsModule } from '@angular/platform-browser/animations';
import { RouterModule } from '@angular/router';
import { CommonModule } from '@angular/common';
import { HttpClient, provideHttpClient, withInterceptorsFromDi } from '@angular/common/http';

import { AppRoutingModule } from './app-routing.module';
import { AppComponent } from './app.component';

import { provideFirebaseApp, initializeApp } from '@angular/fire/app';
import { provideAuth, getAuth } from '@angular/fire/auth';
import { provideFirestore, getFirestore } from '@angular/fire/firestore';

import { TranslateModule, TranslateLoader } from '@ngx-translate/core';
import { TranslateHttpLoader } from '@ngx-translate/http-loader';

import { environment } from '../environments/environment';

import { AuthComponent } from './auth/auth.component';
import { AuthGuard } from './auth.guard';
import { AuthService } from './auth.service';

export function createTranslateLoader(http: HttpClient) {
  return new TranslateHttpLoader(http, './assets/i18n/', '.json');
}

@NgModule({
  declarations: [
    AppComponent
  ],
  imports: [
    RouterModule,
    AuthComponent,
    BrowserModule,
    CommonModule,
    FormsModule,
    ReactiveFormsModule,
    BrowserAnimationsModule,
    AppRoutingModule,
    TranslateModule.forRoot({
      defaultLanguage: 'ar',
      loader: {
        provide: TranslateLoader,
        useFactory: createTranslateLoader,
        deps: [HttpClient]
      }
    })
  ],
  providers: [
    AuthService,
    AuthGuard,
    provideHttpClient(withInterceptorsFromDi()),
    provideFirebaseApp(() => initializeApp(environment.firebase)),
    provideAuth(() => getAuth()),
    provideFirestore(() => getFirestore())
  ],
  bootstrap: [AppComponent]
})
export class AppModule { }

====================================
FICHIER: ./src/app/app.routes.ts
Lignes:        3
====================================

import { Routes } from '@angular/router';

export const routes: Routes = [];

====================================
FICHIER: ./src/app/app.ts
Lignes:       12
====================================

import { Component, signal } from '@angular/core';
import { RouterOutlet } from '@angular/router';

@Component({
  selector: 'app-root',
  imports: [RouterOutlet],
  templateUrl: './app.html',
  styleUrls: ['./app.component.scss']
})
export class App {
  protected readonly title = signal('LAMBARAHosting');
}

====================================
FICHIER: ./src/app/auth-guard.ts
Lignes:        5
====================================

import { CanActivateFn } from '@angular/router';

export const authGuard: CanActivateFn = (route, state) => {
  return true;
};

====================================
FICHIER: ./src/app/auth.guard.ts
Lignes:       28
====================================

import { Injectable } from '@angular/core';
import { CanActivate, Router, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';
import { AuthService } from './auth.service';
import { map, take } from 'rxjs/operators';
import { Observable } from 'rxjs';

@Injectable({
  providedIn: 'root'
})
export class AuthGuard implements CanActivate {
  constructor(private auth: AuthService, private router: Router) {}

  canActivate(
    next: ActivatedRouteSnapshot,
    state: RouterStateSnapshot
  ): Observable<boolean> | Promise<boolean> | boolean {
    return this.auth.user$.pipe(
      take(1),
      map(user => {
        if (!!user) {
          return true;
        }
        this.router.navigate(['/auth']);
        return false;
      })
    );
  }
}

====================================
FICHIER: ./src/app/auth.service.ts
Lignes:       53
====================================

import { Injectable } from '@angular/core';
import { Auth, signInWithEmailAndPassword, createUserWithEmailAndPassword, signOut, authState, User } from '@angular/fire/auth';
import { Router } from '@angular/router';
import { Observable } from 'rxjs';

@Injectable({
  providedIn: 'root'
})
export class AuthService {
  user$: Observable<User | null>;

  constructor(private auth: Auth, private router: Router) {
    this.user$ = authState(this.auth);
  }

  async login(email: string, password: string): Promise<void> {
    try {
      await signInWithEmailAndPassword(this.auth, email, password);
      this.router.navigate(['/dashboard']);
    } catch (error) {
      console.error('Login error:', error);
      throw error;
    }
  }

  async signup(email: string, password: string): Promise<void> {
    try {
      await createUserWithEmailAndPassword(this.auth, email, password);
      this.router.navigate(['/dashboard']);
    } catch (error) {
      console.error('Signup error:', error);
      throw error;
    }
  }

  async logout(): Promise<void> {
    try {
      await signOut(this.auth);
      this.router.navigate(['/auth']);
    } catch (error) {
      console.error('Logout error:', error);
      throw error;
    }
  }

  get isLoggedIn(): boolean {
    return this.auth.currentUser !== null;
  }

  get currentUser(): User | null {
    return this.auth.currentUser;
  }
}

====================================
FICHIER: ./src/app/auth.ts
Lignes:        8
====================================

import { Injectable } from '@angular/core';

@Injectable({
  providedIn: 'root'
})
export class Auth {
  
}

====================================
FICHIER: ./src/app/auth/auth.component.ts
Lignes:       97
====================================

import { Component, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormBuilder, FormGroup, Validators, ReactiveFormsModule } from '@angular/forms';
import { Router } from '@angular/router';
import { AuthService } from '../auth.service';
import { LanguageService } from '../services/language.service';
import { TranslateModule } from '@ngx-translate/core';

@Component({
  standalone: true,
  selector: 'app-auth',
  templateUrl: './auth.component.html',
  styleUrls: ['./auth.component.scss'],
  imports: [CommonModule, ReactiveFormsModule, TranslateModule]
})
export class AuthComponent implements OnInit {
  authForm!: FormGroup;
  isLoginMode = true;
  loading = false;
  error: string = '';
  languageDropdownOpen = false;

  languages = [
    { code: 'ar', name: 'العربية', flag: '🇹🇳' },
    { code: 'fr', name: 'Français', flag: '🇫🇷' },
    { code: 'en', name: 'English', flag: '🇬🇧' }
  ];

  constructor(
    private fb: FormBuilder,
    private authService: AuthService,
    private router: Router,
    public languageService: LanguageService
  ) {}

  ngOnInit(): void {
    this.initForm();
  }

  initForm(): void {
    this.authForm = this.fb.group({
      email: ['', [Validators.required, Validators.email]],
      password: ['', [Validators.required, Validators.minLength(6)]]
    });
  }

  toggleMode(): void {
    this.isLoginMode = !this.isLoginMode;
    this.error = '';
    this.authForm.reset();
  }

  async onSubmit(): Promise<void> {
    if (this.authForm.valid) {
      this.loading = true;
      this.error = '';

      const { email, password } = this.authForm.value;

      try {
        if (this.isLoginMode) {
          await this.authService.login(email, password);
        } else {
          await this.authService.signup(email, password);
        }
        this.router.navigate(['/dashboard']);
      } catch (error: any) {
        this.error = error.message || 'Une erreur est survenue';
      } finally {
        this.loading = false;
      }
    }
  }

  toggleLanguageDropdown(): void {
    this.languageDropdownOpen = !this.languageDropdownOpen;
  }

  changeLanguage(langCode: string): void {
    this.languageService.setLanguage(langCode);
    this.languageDropdownOpen = false;
  }

  getCurrentLanguageFlag(): string {
    const currentLang = this.languageService.getCurrentLanguage();
    return this.languages.find(lang => lang.code === currentLang)?.flag || '🇹🇳';
  }

  getCurrentLanguageName(): string {
    const currentLang = this.languageService.getCurrentLanguage();
    return this.languages.find(lang => lang.code === currentLang)?.name || 'العربية';
  }

  isCurrentLanguage(code: string): boolean {
    return code === this.languageService.getCurrentLanguage();
  }
}

====================================
FICHIER: ./src/app/avances/avances.component.ts
Lignes:      348
====================================

import { Component, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { RouterModule } from '@angular/router';
import { TranslateModule, TranslateService } from '@ngx-translate/core';
import Swal from 'sweetalert2';

import { AvanceService } from '../services/avance.service';
import { MarinService } from '../services/marin.service';
import { SelectedBoatService } from '../services/selected-boat.service';
import { AlertService } from '../services/alert.service';

import { Avance } from '../models/avance.model';
import { Marin } from '../models/marin.model';
import { Bateau } from '../models/bateau.model';

import { combineLatest } from 'rxjs';

@Component({
  selector: 'app-avances',
  standalone: true,
  imports: [CommonModule, TranslateModule, RouterModule],
  templateUrl: './avances.component.html',
  styleUrls: ['./avances.component.scss']
})
export class AvancesComponent implements OnInit {
  selectedBoat: Bateau | null = null;
  marins: Marin[] = [];
  avances: Avance[] = [];
  loading = true;

  constructor(
    private avanceService: AvanceService,
    private marinService: MarinService,
    private selectedBoatService: SelectedBoatService,
    private alertService: AlertService,
    private translate: TranslateService
  ) {}

  ngOnInit(): void {
    this.selectedBoat = this.selectedBoatService.getSelectedBoat();
    
    if (!this.selectedBoat) {
      this.alertService.error('Veuillez d\'abord sélectionner un bateau');
      this.loading = false;
      return;
    }

    this.loadData();
  }

  loadData(): void {
    if (!this.selectedBoat) return;

    combineLatest([
      this.marinService.getMarinsByBateau(this.selectedBoat.id!),
      this.avanceService.getAvancesByBateau(this.selectedBoat.id!)
    ]).subscribe(([marins, avances]) => {
      this.marins = marins;
      this.avances = avances;
      this.loading = false;
    });
  }

  getMarinName(marinId: string): string {
    const marin = this.marins.find(m => m.id === marinId);
    return marin ? `${marin.prenom} ${marin.nom}` : 'Inconnu';
  }

  getTotalAvances(): number {
    return this.avances.reduce((sum, avance) => sum + avance.montant, 0);
  }

  getAvancesByMarin(marinId: string): Avance[] {
    return this.avances.filter(a => a.marinId === marinId);
  }

  getTotalByMarin(marinId: string): number {
    return this.getAvancesByMarin(marinId).reduce((sum, avance) => sum + avance.montant, 0);
  }

  getTodayDate(): string {
    const today = new Date();
    const year = today.getFullYear();
    const month = String(today.getMonth() + 1).padStart(2, '0');
    const day = String(today.getDate()).padStart(2, '0');
    return `${year}-${month}-${day}`;
  }

  formatDate(date: any): string {
    if (date?.toDate) return date.toDate().toISOString().split('T')[0];
    if (date instanceof Date) return date.toISOString().split('T')[0];
    return '';
  }

  // ✅ FONCTION POUR FORMATER LA DATE D'AFFICHAGE (JJ/MM/AAAA)
  formatDisplayDate(date: any): string {
    let dateObj: Date;
    
    if (date?.toDate) {
      dateObj = date.toDate();
    } else if (date instanceof Date) {
      dateObj = date;
    } else {
      return '';
    }

    const day = String(dateObj.getDate()).padStart(2, '0');
    const month = String(dateObj.getMonth() + 1).padStart(2, '0');
    const year = dateObj.getFullYear();
    
    return `${day}/${month}/${year}`;
  }

  async addAvance(): Promise<void> {
    if (!this.selectedBoat) return;

    const marinsOptions = this.marins.reduce((acc, marin) => {
      acc[marin.id!] = `${marin.prenom} ${marin.nom} (${this.translate.instant(`SAILORS.${marin.fonction.toUpperCase()}`)})`;
      return acc;
    }, {} as any);

    const translations = {
      title: this.translate.instant('AVANCES.ADD'),
      sailor: this.translate.instant('SAILORS.TITLE'),
      selectSailor: this.translate.instant('SAILORS.SELECT_FUNCTION'),
      amount: this.translate.instant('EXPENSES.AMOUNT'),
      date: this.translate.instant('EXPENSES.DATE'),
      description: this.translate.instant('EXPENSES.DESCRIPTION'),
      add: this.translate.instant('FORM.ADD'),
      cancel: this.translate.instant('FORM.CANCEL'),
      requiredFields: this.translate.instant('FORM.REQUIRED_FIELDS'),
      amountPositive: this.translate.instant('AVANCES.AMOUNT_POSITIVE')
    };

    const todayDate = this.getTodayDate();

    const { value: formValues } = await Swal.fire({
      title: `<div style="display: flex; align-items: center; justify-content: center; gap: 1rem; color: #1f2937;">
                <svg style="width: 36px; height: 36px; color: #10b981;" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1M21 12a9 9 0 11-18 0 9 9 0 0118 0z"/>
                </svg>
                <span style="font-weight: 700; font-size: 1.5rem;">${translations.title}</span>
              </div>`,
      html: `
        <style>
          .avance-form { text-align: left; padding: 0.5rem 0.5rem 0; }
          .form-group { margin-bottom: 1.25rem; }
          .form-label { display: flex; align-items: center; gap: 0.5rem; margin-bottom: 0.625rem; font-weight: 600; color: #374151; font-size: 0.9rem; }
          .form-label svg { width: 18px; height: 18px; color: #3b82f6; }
          .required-star { color: #ef4444; font-weight: 700; }
          .custom-select, .custom-input { width: 100%; padding: 0.75rem 0.875rem; border: 2px solid #e5e7eb; border-radius: 0.5rem; font-size: 0.95rem; transition: all 0.3s; background: white; color: #1f2937; }
          .custom-select:focus, .custom-input:focus { outline: none; border-color: #3b82f6; box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1); }
          .custom-textarea { width: 100%; padding: 0.75rem 0.875rem; border: 2px solid #e5e7eb; border-radius: 0.5rem; font-size: 0.95rem; resize: vertical; min-height: 80px; transition: all 0.3s; font-family: inherit; }
          .custom-textarea:focus { outline: none; border-color: #3b82f6; box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1); }
          .input-helper { display: flex; align-items: center; gap: 0.4rem; margin-top: 0.4rem; font-size: 0.8rem; color: #6b7280; }
          .input-helper svg { width: 14px; height: 14px; color: #9ca3af; }
        </style>
        <div class="avance-form">
          <div class="form-group">
            <label class="form-label">
              <svg fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"/></svg>
              ${translations.sailor} <span class="required-star">*</span>
            </label>
            <select id="swal-marin" class="custom-select">
              <option value="">${translations.selectSailor}</option>
              ${Object.keys(marinsOptions).map(id => `<option value="${id}">${marinsOptions[id]}</option>`).join('')}
            </select>
          </div>
          <div class="form-group">
            <label class="form-label">
              <svg fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1M21 12a9 9 0 11-18 0 9 9 0 0118 0z"/></svg>
              ${translations.amount} (DT) <span class="required-star">*</span>
            </label>
            <input id="swal-montant" type="number" class="custom-input" placeholder="0.00" step="0.01" min="0">
            <div class="input-helper">
              <svg fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"/></svg>
              <span>Montant en dinars tunisiens</span>
            </div>
          </div>
          <div class="form-group">
            <label class="form-label">
              <svg fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/></svg>
              ${translations.date} <span class="required-star">*</span>
            </label>
            <input id="swal-date" type="date" class="custom-input" value="${todayDate}">
          </div>
          <div class="form-group">
            <label class="form-label">
              <svg fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 8h10M7 12h4m1 8l-4-4H5a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v8a2 2 0 01-2 2h-3l-4 4z"/></svg>
              ${translations.description}
            </label>
            <textarea id="swal-description" class="custom-textarea" placeholder="${translations.description}"></textarea>
          </div>
        </div>
      `,
      focusConfirm: false,
      showCancelButton: true,
      confirmButtonText: translations.add,
      cancelButtonText: translations.cancel,
      confirmButtonColor: '#10b981',
      cancelButtonColor: '#6b7280',
      width: '600px',
      padding: '1.5rem 2rem 2rem',
      preConfirm: () => {
        const marinId = (document.getElementById('swal-marin') as HTMLSelectElement).value;
        const montant = parseFloat((document.getElementById('swal-montant') as HTMLInputElement).value);
        const date = (document.getElementById('swal-date') as HTMLInputElement).value;
        const description = (document.getElementById('swal-description') as HTMLTextAreaElement).value;

        if (!marinId || !montant || !date) {
          Swal.showValidationMessage(translations.requiredFields);
          return false;
        }

        if (montant <= 0) {
          Swal.showValidationMessage(translations.amountPositive);
          return false;
        }

        return { marinId, montant, date, description };
      }
    });

    if (formValues) {
      try {
        this.alertService.loading(this.translate.instant('MESSAGES.SAVING'));

        const newAvance: any = {
          marinId: formValues.marinId,
          bateauId: this.selectedBoat.id!,
          montant: formValues.montant,
          dateAvance: new Date(formValues.date)
        };

        if (formValues.description && formValues.description.trim() !== '') {
          newAvance.description = formValues.description.trim();
        }

        await this.avanceService.addAvance(newAvance);
        
        this.alertService.close();
        await this.alertService.success(this.translate.instant('AVANCES.SUCCESS_ADD'));
      } catch (error) {
        console.error('Erreur:', error);
        this.alertService.close();
        this.alertService.error(this.translate.instant('MESSAGES.ERROR'));
      }
    }
  }

  async editAvance(avance: Avance): Promise<void> {
    const translations = {
      title: this.translate.instant('AVANCES.EDIT'),
      amount: this.translate.instant('EXPENSES.AMOUNT'),
      date: this.translate.instant('EXPENSES.DATE'),
      description: this.translate.instant('EXPENSES.DESCRIPTION'),
      edit: this.translate.instant('FORM.EDIT'),
      cancel: this.translate.instant('FORM.CANCEL')
    };

    const { value: formValues } = await Swal.fire({
      title: translations.title,
      html: `
        <style>
          .avance-form { text-align: left; padding: 0.5rem 0.5rem 0; }
          .form-group { margin-bottom: 1.25rem; }
          .form-label { display: flex; align-items: center; gap: 0.5rem; margin-bottom: 0.625rem; font-weight: 600; color: #374151; font-size: 0.9rem; }
          .custom-input, .custom-textarea { width: 100%; padding: 0.75rem 0.875rem; border: 2px solid #e5e7eb; border-radius: 0.5rem; font-size: 0.95rem; transition: all 0.3s; }
          .custom-input:focus, .custom-textarea:focus { outline: none; border-color: #3b82f6; box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1); }
          .custom-textarea { resize: vertical; min-height: 80px; font-family: inherit; }
        </style>
        <div class="avance-form">
          <div class="form-group">
            <label class="form-label">${translations.amount} (DT)</label>
            <input id="swal-montant" type="number" class="custom-input" value="${avance.montant}" step="0.01" min="0">
          </div>
          <div class="form-group">
            <label class="form-label">${translations.date}</label>
            <input id="swal-date" type="date" class="custom-input" value="${this.formatDate(avance.dateAvance)}">
          </div>
          <div class="form-group">
            <label class="form-label">${translations.description}</label>
            <textarea id="swal-description" class="custom-textarea">${avance.description || ''}</textarea>
          </div>
        </div>
      `,
      focusConfirm: false,
      showCancelButton: true,
      confirmButtonText: translations.edit,
      cancelButtonText: translations.cancel,
      confirmButtonColor: '#f59e0b',
      width: '600px',
      padding: '1.5rem 2rem 2rem',
      preConfirm: () => {
        const montant = parseFloat((document.getElementById('swal-montant') as HTMLInputElement).value);
        const date = (document.getElementById('swal-date') as HTMLInputElement).value;
        const description = (document.getElementById('swal-description') as HTMLTextAreaElement).value;
        return { montant, date, description };
      }
    });

    if (formValues) {
      try {
        this.alertService.loading(this.translate.instant('MESSAGES.SAVING'));
        
        const updateData: any = {
          montant: formValues.montant,
          dateAvance: new Date(formValues.date)
        };

        if (formValues.description && formValues.description.trim() !== '') {
          updateData.description = formValues.description.trim();
        } else {
          updateData.description = '';
        }

        await this.avanceService.updateAvance(avance.id!, updateData);
        
        this.alertService.close();
        await this.alertService.success(this.translate.instant('AVANCES.SUCCESS_UPDATE'));
      } catch (error) {
        console.error('Erreur:', error);
        this.alertService.close();
        this.alertService.error(this.translate.instant('MESSAGES.ERROR'));
      }
    }
  }

  async deleteAvance(avance: Avance): Promise<void> {
    const marinName = this.getMarinName(avance.marinId);
    const confirmed = await this.alertService.confirmDelete(
      `l'avance de ${avance.montant} DT pour ${marinName}`
    );

    if (confirmed) {
      try {
        this.alertService.loading(this.translate.instant('MESSAGES.LOADING'));
        await this.avanceService.deleteAvance(avance.id!);
        this.alertService.close();
        this.alertService.toast(this.translate.instant('AVANCES.SUCCESS_DELETE'), 'success');
      } catch (error) {
        console.error('Erreur:', error);
        this.alertService.close();
        this.alertService.error(this.translate.instant('MESSAGES.ERROR'));
      }
    }
  }
}

====================================
FICHIER: ./src/app/bateaux/bateau-form.component.ts
Lignes:      117
====================================

import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { ActivatedRoute, Router } from '@angular/router';
import { BateauService } from '../services/bateau.service';
import { AlertService } from '../services/alert.service';
import { Bateau } from '../models/bateau.model';

@Component({
  standalone: false,
  selector: 'app-bateau-form',
  templateUrl: './bateau-form.component.html',
  styleUrls: ['./bateau-form.component.scss']
})
export class BateauFormComponent implements OnInit {
  bateauForm!: FormGroup;
  isEditMode = false;
  bateauId: string | null = null;
  loading = false;

  constructor(
    private fb: FormBuilder,
    private bateauService: BateauService,
    private alertService: AlertService,
    private router: Router,
    private route: ActivatedRoute
  ) {}

  ngOnInit(): void {
    this.initForm();
    
    this.bateauId = this.route.snapshot.paramMap.get('id');
    if (this.bateauId) {
      this.isEditMode = true;
      this.loadBateau();
    }
  }

  initForm(): void {
    this.bateauForm = this.fb.group({
      nom: ['', [Validators.required, Validators.minLength(2)]],
      immatriculation: ['', [Validators.required]],
      typeMoteur: ['', [Validators.required]],
      puissance: [0, [Validators.required, Validators.min(1)]],
      longueur: [0, [Validators.required, Validators.min(1)]],
      capaciteEquipage: [0, [Validators.required, Validators.min(1)]],
      dateConstruction: ['', [Validators.required]],
      portAttache: ['', [Validators.required]],
      statut: ['actif', [Validators.required]]
    });
  }

  loadBateau(): void {
    if (this.bateauId) {
      this.bateauService.getBateau(this.bateauId).subscribe(bateau => {
        this.bateauForm.patchValue({
          ...bateau,
          dateConstruction: this.formatDate(bateau.dateConstruction)
        });
      });
    }
  }

  formatDate(date: any): string {
    if (date && date.toDate) {
      return date.toDate().toISOString().split('T')[0];
    }
    if (date instanceof Date) {
      return date.toISOString().split('T')[0];
    }
    return '';
  }

  async onSubmit(): Promise<void> {
    if (this.bateauForm.valid) {
      this.loading = true;
      this.alertService.loading('Enregistrement en cours...');
      
      const formValue = this.bateauForm.value;
      const bateauData: Bateau = {
        ...formValue,
        dateConstruction: new Date(formValue.dateConstruction)
      };

      try {
        if (this.isEditMode && this.bateauId) {
          await this.bateauService.updateBateau(this.bateauId, bateauData);
          this.alertService.close();
          await this.alertService.success('Le bateau a été modifié avec succès', 'Modification réussie!');
        } else {
          await this.bateauService.addBateau(bateauData);
          this.alertService.close();
          await this.alertService.success('Le bateau a été ajouté avec succès', 'Ajout réussi!');
        }
        this.router.navigate(['/dashboard/bateaux']);
      } catch (error) {
        console.error('Erreur:', error);
        this.alertService.close();
        this.alertService.error('Une erreur est survenue lors de l\'enregistrement', 'Erreur!');
      } finally {
        this.loading = false;
      }
    } else {
      this.markFormGroupTouched(this.bateauForm);
      this.alertService.warning('Veuillez remplir tous les champs requis', 'Formulaire incomplet');
    }
  }

  markFormGroupTouched(formGroup: FormGroup): void {
    Object.keys(formGroup.controls).forEach(key => {
      formGroup.get(key)?.markAsTouched();
    });
  }

  cancel(): void {
    this.router.navigate(['/dashboard/bateaux']);
  }
}

====================================
FICHIER: ./src/app/bateaux/bateaux-list.component.ts
Lignes:       96
====================================

import { Component, OnInit } from '@angular/core';
import { Router } from '@angular/router';
import { BateauService } from '../services/bateau.service';
import { AlertService } from '../services/alert.service';
import { SelectedBoatService } from '../services/selected-boat.service';
import { Bateau } from '../models/bateau.model';
import { Observable } from 'rxjs';

@Component({
  standalone: false,
  selector: 'app-bateaux-list',
  templateUrl: './bateaux-list.component.html',
  styleUrls: ['./bateaux-list.component.scss']
})
export class BateauxListComponent implements OnInit {
  bateaux!: Observable<Bateau[]>;
  searchTerm = '';
  selectedBoat: Bateau | null = null;

  constructor(
    private bateauService: BateauService,
    private alertService: AlertService,
    private router: Router,
    private selectedBoatService: SelectedBoatService
  ) {}

  ngOnInit(): void {
    this.loadBateaux();
    
    // Récupérer le bateau sélectionné
    this.selectedBoatService.selectedBoat$.subscribe(boat => {
      this.selectedBoat = boat;
    });
  }

  loadBateaux(): void {
    this.bateaux = this.bateauService.getBateaux();
  }

  selectBoat(bateau: Bateau): void {
    this.selectedBoatService.selectBoat(bateau);
    this.alertService.toast(`Bateau "${bateau.nom}" sélectionné`, 'success');
  }

  clearSelection(): void {
    this.selectedBoatService.clearSelection();
    this.alertService.toast('Sélection annulée', 'info');
  }

  isSelected(bateau: Bateau): boolean {
    return this.selectedBoat?.id === bateau.id;
  }

  addBateau(): void {
    this.router.navigate(['/dashboard/bateaux/add']);
  }

  editBateau(id: string): void {
    this.router.navigate(['/dashboard/bateaux/edit', id]);
  }

  viewMarins(id: string): void {
    this.router.navigate(['/dashboard/bateaux', id, 'marins']);
  }

  async deleteBateau(bateau: Bateau): Promise<void> {
    const confirmed = await this.alertService.confirmDelete(`le bateau "${bateau.nom}"`);
    if (confirmed) {
      try {
        this.alertService.loading('Suppression en cours...');
        await this.bateauService.deleteBateau(bateau.id!);
        
        // Si le bateau supprimé était sélectionné, désélectionner
        if (this.isSelected(bateau)) {
          this.clearSelection();
        }
        
        this.alertService.close();
        this.alertService.toast('Bateau supprimé avec succès', 'success');
      } catch (error) {
        console.error('Erreur lors de la suppression', error);
        this.alertService.close();
        this.alertService.error('Erreur lors de la suppression du bateau');
      }
    }
  }

  getStatutClass(statut: string): string {
    const classes: any = {
      'actif': 'status-active',
      'maintenance': 'status-maintenance',
      'inactif': 'status-inactive'
    };
    return classes[statut];
  }
}

====================================
FICHIER: ./src/app/bateaux/bateaux.module.ts
Lignes:       29
====================================

import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { ReactiveFormsModule, FormsModule } from '@angular/forms';
import { RouterModule, Routes } from '@angular/router';
import { TranslateModule } from '@ngx-translate/core';

import { BateauxListComponent } from './bateaux-list.component';
import { BateauFormComponent } from './bateau-form.component';

const routes: Routes = [
  { path: '', component: BateauxListComponent },
  { path: 'add', component: BateauFormComponent },
  { path: 'edit/:id', component: BateauFormComponent }
];

@NgModule({
  declarations: [
    BateauxListComponent,
    BateauFormComponent
  ],
  imports: [
    CommonModule,
    ReactiveFormsModule,
    FormsModule,
    RouterModule.forChild(routes),
    TranslateModule
  ]
})
export class BateauxModule { }

====================================
FICHIER: ./src/app/components/language-selector/language-selector.component.ts
Lignes:       38
====================================

import { Component } from '@angular/core';
import { LanguageService } from '../../services/language.service';

@Component({
  standalone: false,
  selector: 'app-language-selector',
  templateUrl: './language-selector.component.html',
  styleUrls: ['./language-selector.component.scss']
})
export class LanguageSelectorComponent {
  languages = [
    { code: 'ar', name: 'العربية', flag: '🇹🇳' },
    { code: 'fr', name: 'Français', flag: '🇫🇷' },
    { code: 'en', name: 'English', flag: '🇬🇧' }
  ];

  isOpen = false;

  constructor(public languageService: LanguageService) {}

  getCurrentLanguage() {
    const currentLang = this.languageService.getCurrentLanguage();
    return this.languages.find(lang => lang.code === currentLang) || this.languages[0];
  }

  toggleDropdown(): void {
    this.isOpen = !this.isOpen;
  }

  selectLanguage(langCode: string): void {
    this.languageService.setLanguage(langCode);
    this.isOpen = false;
  }

  isCurrentLanguage(code: string): boolean {
    return code === this.languageService.getCurrentLanguage();
  }
}

====================================
FICHIER: ./src/app/dashboard/dashboard-home/dashboard-home.component.ts
Lignes:      152
====================================

import { Component, OnInit } from '@angular/core';
import { BateauService } from '../../services/bateau.service';
import { MarinService } from '../../services/marin.service';
import { Observable, combineLatest, map } from 'rxjs';
import { Bateau } from '../../models/bateau.model';
import { Marin } from '../../models/marin.model';

interface Activity {
  type: 'boat' | 'sailor';
  action: 'added' | 'updated';
  name: string;
  date: Date;
  icon: string;
  color: string;
}

interface Stats {
  totalBoats: number;
  activeBoats: number;
  maintenanceBoats: number;
  totalSailors: number;
  activeSailors: number;
}

@Component({
  standalone: false,
  selector: 'app-dashboard-home',
  templateUrl: './dashboard-home.component.html',
  styleUrls: ['./dashboard-home.component.scss']
})
export class DashboardHomeComponent implements OnInit {
  stats$!: Observable<Stats>;
  recentActivities: Activity[] = [];
  loading = true;

  constructor(
    private bateauService: BateauService,
    private marinService: MarinService
  ) {}

  ngOnInit(): void {
    this.loadStats();
    this.loadRecentActivities();
  }

  loadStats(): void {
    this.stats$ = combineLatest([
      this.bateauService.getBateaux(),
      this.marinService.getAllMarins()
    ]).pipe(
      map(([bateaux, marins]) => {
        return {
          totalBoats: bateaux.length,
          activeBoats: bateaux.filter(b => b.statut === 'actif').length,
          maintenanceBoats: bateaux.filter(b => b.statut === 'maintenance').length,
          totalSailors: marins.length,
          activeSailors: marins.filter(m => m.statut === 'actif').length
        };
      })
    );
  }

  // Fonction helper pour convertir Timestamp Firestore en Date
  private toDate(timestamp: any): Date {
    if (!timestamp) return new Date(0);
    if (timestamp instanceof Date) return timestamp;
    if (timestamp.toDate && typeof timestamp.toDate === 'function') {
      return timestamp.toDate();
    }
    if (timestamp.seconds) {
      return new Date(timestamp.seconds * 1000);
    }
    return new Date(timestamp);
  }

  loadRecentActivities(): void {
    combineLatest([
      this.bateauService.getBateaux(),
      this.marinService.getAllMarins()
    ]).subscribe(([bateaux, marins]) => {
      const activities: Activity[] = [];

      // Ajouter les bateaux récents
      bateaux
        .sort((a, b) => {
          const dateA = this.toDate(a.updatedAt || a.createdAt);
          const dateB = this.toDate(b.updatedAt || b.createdAt);
          return dateB.getTime() - dateA.getTime();
        })
        .slice(0, 5)
        .forEach(bateau => {
          const date = this.toDate(bateau.updatedAt || bateau.createdAt);
          activities.push({
            type: 'boat',
            action: bateau.updatedAt ? 'updated' : 'added',
            name: bateau.nom,
            date: date,
            icon: '🚢',
            color: '#3b82f6'
          });
        });

      // Ajouter les marins récents
      marins
        .sort((a, b) => {
          const dateA = this.toDate(a.updatedAt || a.createdAt);
          const dateB = this.toDate(b.updatedAt || b.createdAt);
          return dateB.getTime() - dateA.getTime();
        })
        .slice(0, 5)
        .forEach(marin => {
          const date = this.toDate(marin.updatedAt || marin.createdAt);
          activities.push({
            type: 'sailor',
            action: marin.updatedAt ? 'updated' : 'added',
            name: `${marin.prenom} ${marin.nom}`,
            date: date,
            icon: '👨‍✈️',
            color: '#059669'
          });
        });

      // Trier par date et prendre les 10 plus récentes
      this.recentActivities = activities
        .sort((a, b) => b.date.getTime() - a.date.getTime())
        .slice(0, 10);

      this.loading = false;
    });
  }

  getActionText(activity: Activity): string {
    if (activity.type === 'boat') {
      return activity.action === 'added' ? 'DASHBOARD.BOAT_ADDED' : 'DASHBOARD.BOAT_UPDATED';
    } else {
      return activity.action === 'added' ? 'DASHBOARD.SAILOR_ADDED' : 'DASHBOARD.SAILOR_UPDATED';
    }
  }

  getTimeAgo(date: Date): string {
    const now = new Date();
    const diff = now.getTime() - date.getTime();
    const minutes = Math.floor(diff / 60000);
    const hours = Math.floor(diff / 3600000);
    const days = Math.floor(diff / 86400000);

    if (minutes < 1) return 'À l\'instant';
    if (minutes < 60) return `Il y a ${minutes} min`;
    if (hours < 24) return `Il y a ${hours}h`;
    return `Il y a ${days}j`;
  }
}

====================================
FICHIER: ./src/app/dashboard/dashboard-routing.module.ts
Lignes:       56
====================================

import { NgModule } from '@angular/core';
import { RouterModule, Routes } from '@angular/router';
import { CommonModule } from '@angular/common';
import { TranslateModule } from '@ngx-translate/core';

import { DashboardComponent } from './dashboard.component';
import { DashboardHomeComponent } from './dashboard-home/dashboard-home.component';
import { BoatSelectionGuard } from '../guards/boat-selection.guard';
import { MockDataComponent } from '../mock-data/mock-data.component';

const routes: Routes = [
  {
    path: '',
    component: DashboardComponent,
    children: [
      { path: '', component: DashboardHomeComponent },
      {
        path: 'bateaux',
        loadChildren: () => import('../bateaux/bateaux.module').then(m => m.BateauxModule)
      },
      {
        path: 'sorties',
        loadChildren: () => import('../sorties/sorties.module').then(m => m.SortiesModule),
        canActivate: [BoatSelectionGuard]
      },
      {
        path: 'ventes',
        loadComponent: () => import('../ventes/ventes-list.component').then(m => m.VentesListComponent),
        canActivate: [BoatSelectionGuard]
      },
      {
        path: 'avances',
        loadComponent: () => import('../avances/avances.component').then(m => m.AvancesComponent),
        canActivate: [BoatSelectionGuard]
      },
      {
        path: 'salaires',
        loadComponent: () => import('../salaires/salaires-list.component').then(m => m.SalairesListComponent),
        canActivate: [BoatSelectionGuard]
      },
      { path: 'mock-data', component: MockDataComponent },

      { path: '', redirectTo: '', pathMatch: 'full' }
    ]
  }
];

@NgModule({
  imports: [
    CommonModule,
    RouterModule.forChild(routes),
    TranslateModule
  ],
  exports: [RouterModule]
})
export class DashboardRoutingModule { }

====================================
FICHIER: ./src/app/dashboard/dashboard.component.ts
Lignes:       51
====================================

import { Component, OnInit } from '@angular/core';
import { Router } from '@angular/router';
import { AuthService } from '../auth.service';
import { SelectedBoatService } from '../services/selected-boat.service';
import { Bateau } from '../models/bateau.model';
import { User } from '@angular/fire/auth';

@Component({
  standalone: false,
  selector: 'app-dashboard',
  templateUrl: './dashboard.component.html',
  styleUrls: ['./dashboard.component.scss']
})
export class DashboardComponent implements OnInit {
  userEmail?: string;
  selectedBoat: Bateau | null = null;

  constructor(
    private authService: AuthService,
    private selectedBoatService: SelectedBoatService,
    private router: Router
  ) {}

  async ngOnInit(): Promise<void> {
    // ✅ CORRECTION: utiliser user$ au lieu de user
    this.authService.user$.subscribe((user: User | null) => {
      if (user) {
        this.userEmail = user.email || undefined;
      }
    });

    // Écouter les changements du bateau sélectionné
    this.selectedBoatService.selectedBoat$.subscribe((boat: Bateau | null) => {
      this.selectedBoat = boat;
    });
  }

  goToBoatSelection(): void {
    this.router.navigate(['/dashboard/bateaux']);
  }

  async logout(): Promise<void> {
    try {
      await this.authService.logout();
    } catch (error) {
      console.error('Erreur logout', error);
    }
  }
}



====================================
FICHIER: ./src/app/dashboard/dashboard.module.ts
Lignes:       23
====================================

import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { DashboardRoutingModule } from './dashboard-routing.module';
import { TranslateModule } from '@ngx-translate/core';
import { DashboardComponent } from './dashboard.component';
import { DashboardHomeComponent } from './dashboard-home/dashboard-home.component';
import { LanguageSelectorComponent } from '../components/language-selector/language-selector.component';
import { MockDataComponent } from '../mock-data/mock-data.component';

@NgModule({
  declarations: [
    DashboardComponent,
    DashboardHomeComponent,
    LanguageSelectorComponent,
    MockDataComponent
  ],
  imports: [
    CommonModule,
    DashboardRoutingModule,
    TranslateModule
  ]
})
export class DashboardModule { }

====================================
FICHIER: ./src/app/guards/boat-selection.guard.ts
Lignes:       23
====================================

import { Injectable } from '@angular/core';
import { CanActivate, Router, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';
import { SelectedBoatService } from '../services/selected-boat.service';

@Injectable({
  providedIn: 'root'
})
export class BoatSelectionGuard implements CanActivate {
  constructor(
    private selectedBoatService: SelectedBoatService,
    private router: Router
  ) {}

  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean {
    if (this.selectedBoatService.hasSelectedBoat()) {
      return true;
    } else {
      // Rediriger vers la liste des bateaux pour sélectionner un bateau
      this.router.navigate(['/dashboard/bateaux']);
      return false;
    }
  }
}

====================================
FICHIER: ./src/app/marins/marin-form.component.ts
Lignes:      123
====================================

import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { ActivatedRoute, Router } from '@angular/router';
import { MarinService } from '../services/marin.service';
import { AlertService } from '../services/alert.service';
import { Marin } from '../models/marin.model';

@Component({
  standalone: false,
  selector: 'app-marin-form',
  templateUrl: './marin-form.component.html',
  styleUrls: ['./marin-form.component.scss']
})
export class MarinFormComponent implements OnInit {
  marinForm!: FormGroup;
  isEditMode = false;
  marinId: string | null = null;
  bateauId!: string;
  loading = false;

  constructor(
    private fb: FormBuilder,
    private marinService: MarinService,
    private alertService: AlertService,
    private router: Router,
    private route: ActivatedRoute
  ) {}

  ngOnInit(): void {
    this.bateauId = this.route.snapshot.paramMap.get('bateauId')!;
    this.initForm();
    
    this.marinId = this.route.snapshot.paramMap.get('id');
    if (this.marinId) {
      this.isEditMode = true;
      this.loadMarin();
    }
  }

  initForm(): void {
    this.marinForm = this.fb.group({
      nom: ['', [Validators.required, Validators.minLength(2)]],
      prenom: ['', [Validators.required, Validators.minLength(2)]],
      dateNaissance: ['', [Validators.required]],
      fonction: ['matelot', [Validators.required]],
      numeroPermis: ['', [Validators.required]],
      telephone: ['', [Validators.required, Validators.pattern(/^[0-9]{8,}$/)]],
      email: ['', [Validators.required, Validators.email]],
      adresse: ['', [Validators.required]],
      dateEmbauche: ['', [Validators.required]],
      statut: ['actif', [Validators.required]]
    });
  }

  loadMarin(): void {
    if (this.marinId) {
      this.marinService.getMarin(this.marinId).subscribe(marin => {
        this.marinForm.patchValue({
          ...marin,
          dateNaissance: this.formatDate(marin.dateNaissance),
          dateEmbauche: this.formatDate(marin.dateEmbauche)
        });
      });
    }
  }

  formatDate(date: any): string {
    if (date && date.toDate) {
      return date.toDate().toISOString().split('T')[0];
    }
    if (date instanceof Date) {
      return date.toISOString().split('T')[0];
    }
    return '';
  }

  async onSubmit(): Promise<void> {
    if (this.marinForm.valid) {
      this.loading = true;
      this.alertService.loading('Enregistrement en cours...');
      
      const formValue = this.marinForm.value;
      const marinData: Marin = {
        ...formValue,
        bateauId: this.bateauId,
        dateNaissance: new Date(formValue.dateNaissance),
        dateEmbauche: new Date(formValue.dateEmbauche)
      };

      try {
        if (this.isEditMode && this.marinId) {
          await this.marinService.updateMarin(this.marinId, marinData);
          this.alertService.close();
          await this.alertService.success('Le marin a été modifié avec succès', 'Modification réussie!');
        } else {
          await this.marinService.addMarin(marinData);
          this.alertService.close();
          await this.alertService.success('Le marin a été ajouté avec succès', 'Ajout réussi!');
        }
        this.router.navigate(['/dashboard/bateaux', this.bateauId, 'marins']);
      } catch (error) {
        console.error('Erreur:', error);
        this.alertService.close();
        this.alertService.error('Une erreur est survenue lors de l\'enregistrement', 'Erreur!');
      } finally {
        this.loading = false;
      }
    } else {
      this.markFormGroupTouched(this.marinForm);
      this.alertService.warning('Veuillez remplir tous les champs requis', 'Formulaire incomplet');
    }
  }

  markFormGroupTouched(formGroup: FormGroup): void {
    Object.keys(formGroup.controls).forEach(key => {
      formGroup.get(key)?.markAsTouched();
    });
  }

  cancel(): void {
    this.router.navigate(['/dashboard/bateaux', this.bateauId, 'marins']);
  }
}

====================================
FICHIER: ./src/app/marins/marins-list.component.ts
Lignes:       97
====================================

import { Component, OnInit } from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { MarinService } from '../services/marin.service';
import { BateauService } from '../services/bateau.service';
import { AlertService } from '../services/alert.service';
import { Marin } from '../models/marin.model';
import { Bateau } from '../models/bateau.model';
import { Observable } from 'rxjs';

@Component({
  standalone: false,
  selector: 'app-marins-list',
  templateUrl: './marins-list.component.html',
  styleUrls: ['./marins-list.component.scss']
})
export class MarinsListComponent implements OnInit {
  marins$!: Observable<Marin[]>;
  bateau$!: Observable<Bateau>;
  bateauId!: string;

  constructor(
    private marinService: MarinService,
    private bateauService: BateauService,
    private alertService: AlertService,
    private route: ActivatedRoute,
    private router: Router
  ) {}

  ngOnInit(): void {
    this.bateauId = this.route.snapshot.paramMap.get('bateauId')!;
    this.loadMarins();
    this.loadBateau();
  }

  loadMarins(): void {
    this.marins$ = this.marinService.getMarinsByBateau(this.bateauId);
  }

  loadBateau(): void {
    this.bateau$ = this.bateauService.getBateau(this.bateauId);
  }

  addMarin(): void {
    this.router.navigate(['/dashboard/bateaux', this.bateauId, 'marins', 'add']);
  }

  editMarin(id: string): void {
    this.router.navigate(['/dashboard/bateaux', this.bateauId, 'marins', 'edit', id]);
  }

  async deleteMarin(marin: Marin): Promise<void> {
    const confirmed = await this.alertService.confirmDelete(`${marin.prenom} ${marin.nom}`);
    
    if (confirmed) {
      try {
        this.alertService.loading('Suppression en cours...');
        await this.marinService.deleteMarin(marin.id!);
        this.alertService.close();
        this.alertService.toast('Marin supprimé avec succès', 'success');
      } catch (error) {
        console.error('Erreur:', error);
        this.alertService.close();
        this.alertService.error('Erreur lors de la suppression');
      }
    }
  }

  goBack(): void {
    this.router.navigate(['/dashboard/bateaux']);
  }

  getStatutClass(statut: string): string {
    const classes: any = {
      'actif': 'status-active',
      'conge': 'status-leave',
      'inactif': 'status-inactive'
    };
    return classes[statut] || '';
  }

  getFonctionClass(fonction: string): string {
    const classes: any = {
      'capitaine': 'fonction-capitaine',
      'second': 'fonction-second',
      'mecanicien': 'fonction-mecanicien',
      'matelot': 'fonction-matelot'
    };
    return classes[fonction] || '';
  }

  formatDate(date: any): Date | null {
    if (date && date.toDate) {
      return date.toDate();
    }
    return date;
  }
}

====================================
FICHIER: ./src/app/marins/marins.module.ts
Lignes:       29
====================================

import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { ReactiveFormsModule, FormsModule } from '@angular/forms';
import { RouterModule, Routes } from '@angular/router';
import { TranslateModule } from '@ngx-translate/core';

import { MarinsListComponent } from './marins-list.component';
import { MarinFormComponent } from './marin-form.component';

const routes: Routes = [
  { path: '', component: MarinsListComponent },
  { path: 'add', component: MarinFormComponent },
  { path: 'edit/:id', component: MarinFormComponent }
];

@NgModule({
  declarations: [
    MarinsListComponent,
    MarinFormComponent
  ],
  imports: [
    CommonModule,
    ReactiveFormsModule,
    FormsModule,
    RouterModule.forChild(routes),
    TranslateModule
  ]
})
export class MarinsModule { }

====================================
FICHIER: ./src/app/mock-data/mock-data.component.ts
Lignes:      151
====================================

import { Component } from '@angular/core';
import { CommonModule } from '@angular/common';
import { MockDataService } from '../services/mock-data.service';
import Swal from 'sweetalert2';

@Component({
  selector: 'app-mock-data',
  standalone: false,
  template: `
    <div class="mock-container">
      <div class="mock-card">
        <h2>🎲 Générateur de Données Fictives</h2>
        <p>Créez rapidement des données de test complètes</p>
        
        <div class="data-list">
          <div class="data-item">✓ 2 bateaux de pêche</div>
          <div class="data-item">✓ 5 marins</div>
          <div class="data-item">✓ 6 sorties en mer</div>
          <div class="data-item">✓ 12 dépenses</div>
          <div class="data-item">✓ 6 factures de vente</div>
          <div class="data-item">✓ 5 avances</div>
        </div>

        <button 
          (click)="generate()" 
          [disabled]="generating"
          class="btn-generate">
          <span *ngIf="!generating">Générer les données</span>
          <span *ngIf="generating">Génération en cours...</span>
        </button>
      </div>
    </div>
  `,
  styles: [`
    .mock-container {
      min-height: 100vh;
      display: flex;
      align-items: center;
      justify-content: center;
      padding: 2rem;
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    }
    
    .mock-card {
      background: white;
      border-radius: 1rem;
      padding: 3rem;
      max-width: 500px;
      box-shadow: 0 20px 60px rgba(0,0,0,0.3);
    }
    
    h2 {
      margin: 0 0 1rem 0;
      color: #1f2937;
      font-size: 2rem;
    }
    
    p {
      color: #6b7280;
      margin: 0 0 2rem 0;
    }
    
    .data-list {
      background: #f9fafb;
      padding: 1.5rem;
      border-radius: 0.5rem;
      margin-bottom: 2rem;
    }
    
    .data-item {
      padding: 0.5rem 0;
      color: #374151;
      font-weight: 500;
    }
    
    .btn-generate {
      width: 100%;
      padding: 1rem;
      background: #667eea;
      color: white;
      border: none;
      border-radius: 0.5rem;
      font-size: 1.125rem;
      font-weight: 600;
      cursor: pointer;
      transition: all 0.3s;
    }
    
    .btn-generate:hover:not(:disabled) {
      background: #5568d3;
      transform: translateY(-2px);
      box-shadow: 0 10px 20px rgba(102, 126, 234, 0.3);
    }
    
    .btn-generate:disabled {
      opacity: 0.6;
      cursor: not-allowed;
    }
  `]
})
export class MockDataComponent {
  generating = false;

  constructor(private mockService: MockDataService) {}

  async generate(): Promise<void> {
    const result = await Swal.fire({
      title: 'Générer des données fictives ?',
      text: 'Cela va créer environ 35 enregistrements de test',
      icon: 'question',
      showCancelButton: true,
      confirmButtonText: 'Oui, générer',
      cancelButtonText: 'Annuler',
      confirmButtonColor: '#667eea'
    });

    if (result.isConfirmed) {
      try {
        this.generating = true;

        Swal.fire({
          title: 'Génération en cours...',
          text: 'Veuillez patienter',
          allowOutsideClick: false,
          didOpen: () => Swal.showLoading()
        });

        await this.mockService.generateAllMockData();

        Swal.close();

        await Swal.fire({
          title: 'Succès !',
          text: 'Les données ont été générées avec succès',
          icon: 'success',
          confirmButtonColor: '#667eea'
        });

      } catch (error) {
        console.error(error);
        Swal.fire({
          title: 'Erreur',
          text: 'Une erreur est survenue',
          icon: 'error'
        });
      } finally {
        this.generating = false;
      }
    }
  }
}

====================================
FICHIER: ./src/app/models/avance.model.ts
Lignes:        9
====================================

export interface Avance {
  id?: string;
  marinId: string;
  bateauId: string;
  montant: number;
  dateAvance: Date;
  description?: string;
  createdAt?: Date;
}

====================================
FICHIER: ./src/app/models/bateau.model.ts
Lignes:       14
====================================

export interface Bateau {
  id?: string;
  nom: string;
  immatriculation: string;
  typeMoteur: string;
  puissance: number;
  longueur: number;
  capaciteEquipage: number;
  dateConstruction: Date;
  portAttache: string;
  statut: 'actif' | 'maintenance' | 'inactif';
  createdAt?: Date;
  updatedAt?: Date;
}

====================================
FICHIER: ./src/app/models/depense.model.ts
Lignes:       10
====================================

export interface Depense {
  id?: string;
  sortieId: string;
  type: 'fuel' | 'ice' | 'oil_change' | 'crew_cnss' | 'crew_bonus' | 'food' | 'vms' | 'misc';
  montant: number;
  date: Date;
  description?: string;
  createdAt?: Date;
  updatedAt?: Date;
}

====================================
FICHIER: ./src/app/models/facture-vente.model.ts
Lignes:       10
====================================

export interface FactureVente {
  id?: string;
  sortieId: string;
  numeroFacture: string;
  client: string;
  dateVente: Date;
  montantTotal: number;
  details?: string; // Description des poissons vendus
  createdAt?: Date;
}

====================================
FICHIER: ./src/app/models/facture.model.ts
Lignes:       19
====================================

export interface Facture {
  id?: string;
  sortieId: string;
  numeroFacture: string;
  dateFacture: Date;
  client: string;
  montantTotal: number;
  detailsPoissons: DetailPoisson[];
  paye: boolean;
  createdAt?: Date;
  updatedAt?: Date;
}

export interface DetailPoisson {
  typePoisson: string;
  quantite: number;
  prixUnitaire: number;
  montantTotal: number;
}

====================================
FICHIER: ./src/app/models/marin.model.ts
Lignes:       16
====================================

export interface Marin {
  id?: string;
  bateauId: string;
  nom: string;
  prenom: string;
  dateNaissance: Date;
  fonction: 'capitaine' | 'second' | 'mecanicien' | 'matelot';
  numeroPermis: string;
  telephone: string;
  email: string;
  adresse: string;
  dateEmbauche: Date;
  statut: 'actif' | 'conge' | 'inactif';
  createdAt?: Date;
  updatedAt?: Date;
}

====================================
FICHIER: ./src/app/models/paiement.model.ts
Lignes:        9
====================================

export interface Paiement {
  id?: string;
  marinId: string;
  montant: number;
  datePaiement: Date;
  sortiesIds: string[]; // Liste des sorties concernées
  description?: string;
  createdAt?: Date;
}

====================================
FICHIER: ./src/app/models/partage.model.ts
Lignes:       22
====================================

export interface Partage {
  id?: string;
  sortieId: string;
  beneficesTotal: number;
  partProprietaires: number;
  partEquipage: number;
  repartitionEquipage: RepartitionMarin[];
  dateCalcul: Date;
  createdAt?: Date;
  updatedAt?: Date;
}

export interface RepartitionMarin {
  marinId: string;
  nomMarin: string;
  prenomMarin: string;
  fonction: string;
  pourcentage: number;
  montant: number;
  avances: number;
  montantNet: number;
}

====================================
FICHIER: ./src/app/models/pointage.model.ts
Lignes:       10
====================================

export interface Pointage {
  id?: string;
  sortieId: string;
  marinId: string;
  present: boolean;
  datePointage: Date;
  observations?: string;
  createdAt?: Date;
  updatedAt?: Date;
}

====================================
FICHIER: ./src/app/models/salaire.model.ts
Lignes:       40
====================================

export interface CoeffSalaire {
  marinId: string;
  coefficient: number; // Pourcentage du partage équipage (ex: 20 pour 20%)
}

export interface CalculSalaire {
  sortieId: string;
  dateCalcul: Date;
  
  // Revenus
  revenuTotal: number;
  
  // Dépenses
  totalDepenses: number;
  
  // Part propriétaire et équipage
  partProprietaire: number; // 50%
  partEquipage: number; // 50%
  
  // Déduction nuits (5 DT par nuit par marin)
  nbNuits: number;
  nbMarins: number;
  deductionNuits: number;
  
  // Montant à partager entre équipage
  montantAPartager: number;
  
  // Détails par marin
  detailsMarins: DetailSalaireMarin[];
}

export interface DetailSalaireMarin {
  marinId: string;
  marinNom: string;
  coefficient: number;
  salaireBase: number; // Part selon coefficient
  primenuits: number; // 5 DT × nombre de nuits
  avances: number;
  salaireNet: number; // salaireBase + primeNuits - avances
}

====================================
FICHIER: ./src/app/models/sortie.model.ts
Lignes:       11
====================================

export interface Sortie {
  id?: string;
  bateauId: string;
  dateDepart: Date;
  dateRetour: Date;
  destination: string;
  statut: 'en-cours' | 'terminee' | 'annulee';
  observations?: string;
  createdAt?: Date;
  updatedAt?: Date;
}

====================================
FICHIER: ./src/app/salaires/salaires-list.component.ts
Lignes:      310
====================================

import { Component, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { TranslateModule } from '@ngx-translate/core';
import Swal from 'sweetalert2';
import { take } from 'rxjs/operators';

import { SortieService } from '../services/sortie.service';
import { MarinService } from '../services/marin.service';
import { DepenseService } from '../services/depense.service';
import { AvanceService } from '../services/avance.service';
import { PaiementService } from '../services/paiement.service';
import { FactureVenteService } from '../services/facture-vente.service';
import { SelectedBoatService } from '../services/selected-boat.service';
import { AlertService } from '../services/alert.service';
import { Sortie } from '../models/sortie.model';
import { Marin } from '../models/marin.model';
import { Bateau } from '../models/bateau.model';

interface SalaireDetail {
  marinId: string;
  marinNom: string;
  coefficient: number;
  salaireBrut: number;
  primeNuits: number;
  totalAvances: number;
  totalPaiements: number;
  resteAPayer: number;
}

@Component({
  selector: 'app-salaires-list',
  standalone: true,
  imports: [CommonModule, FormsModule, TranslateModule],
  templateUrl: './salaires-list.component.html',
  styleUrls: ['./salaires-list.component.scss']
})
export class SalairesListComponent implements OnInit {
  selectedBoat: Bateau | null = null;
  sorties: Sortie[] = [];
  marins: Marin[] = [];
  selectedSortiesIds: string[] = [];
  coefficients: { [marinId: string]: number } = {};
  
  revenuTotal = 0;
  totalDepenses = 0;
  beneficeNet = 0;
  partProprietaire = 0;
  partEquipage = 0;
  totalNuits = 0;
  deductionNuits = 0;
  montantAPartager = 0;
  salairesDetails: SalaireDetail[] = [];
  calculated = false;
  loading = true;

  constructor(
    private sortieService: SortieService,
    private marinService: MarinService,
    private depenseService: DepenseService,
    private avanceService: AvanceService,
    private paiementService: PaiementService,
    private factureService: FactureVenteService,
    private selectedBoatService: SelectedBoatService,
    private alertService: AlertService
  ) {}

  ngOnInit(): void {
    this.selectedBoat = this.selectedBoatService.getSelectedBoat();
    console.log('🚢 Bateau sélectionné:', this.selectedBoat);
    
    if (this.selectedBoat) {
      this.loadData();
    } else {
      this.loading = false;
      console.warn('⚠️ Aucun bateau sélectionné');
    }
  }

  loadData(): void {
    if (!this.selectedBoat?.id) {
      console.error('❌ ID du bateau manquant');
      return;
    }

    console.log('📡 Chargement des sorties pour le bateau:', this.selectedBoat.id);

    this.sortieService.getSortiesByBateau(this.selectedBoat.id).subscribe((sorties: Sortie[]) => {
      console.log('📦 Toutes les sorties reçues:', sorties.length);
      console.log('📊 Détails des sorties:', sorties);
      
      // Afficher TOUTES les sorties (pas seulement terminées)
      this.sorties = sorties;
      
      console.log(`✅ ${this.sorties.length} sorties chargées (tous statuts)`);
      
      if (this.sorties.length === 0) {
        console.warn('⚠️ AUCUNE SORTIE TROUVÉE pour ce bateau!');
        console.warn('💡 Vérifiez que les données mock ont bien des sorties liées à ce bateau');
      }
    }, error => {
      console.error('❌ Erreur lors du chargement des sorties:', error);
    });

    this.marinService.getMarinsByBateau(this.selectedBoat.id).subscribe((marins: Marin[]) => {
      this.marins = marins;
      console.log('👥 Marins chargés:', marins.length);
      
      marins.forEach(marin => {
        this.coefficients[marin.id!] = 0;
      });
      
      this.loading = false;
    });
  }

  toggleSortie(sortieId: string): void {
    const index = this.selectedSortiesIds.indexOf(sortieId);
    if (index > -1) {
      this.selectedSortiesIds.splice(index, 1);
    } else {
      this.selectedSortiesIds.push(sortieId);
    }
  }

  isSortieSelected(sortieId: string): boolean {
    return this.selectedSortiesIds.includes(sortieId);
  }

  async configureCoefficients(): Promise<void> {
    if (this.marins.length === 0) {
      this.alertService.error('Aucun marin disponible');
      return;
    }

    let html = '<div style="text-align: left; padding: 1rem;">';
    this.marins.forEach(marin => {
      html += `
        <div style="margin-bottom: 1rem;">
          <label style="display: block; margin-bottom: 0.5rem; font-weight: 600;">
            ${marin.prenom} ${marin.nom} (${marin.fonction})
          </label>
          <input 
            id="coeff-${marin.id}" 
            type="number" 
            value="${this.coefficients[marin.id!] || 0}" 
            min="0" 
            max="100"
            style="width: 100%; padding: 0.5rem; border: 1px solid #ddd; border-radius: 0.25rem;"
          />
        </div>
      `;
    });
    html += '</div>';

    const result = await Swal.fire({
      title: 'Configuration des coefficients',
      html,
      showCancelButton: true,
      confirmButtonText: 'Enregistrer',
      cancelButtonText: 'Annuler',
      confirmButtonColor: '#10b981',
      width: '600px'
    });

    if (result.isConfirmed) {
      this.marins.forEach(marin => {
        const input = document.getElementById(`coeff-${marin.id}`) as HTMLInputElement;
        if (input) {
          this.coefficients[marin.id!] = parseFloat(input.value) || 0;
        }
      });
      this.alertService.success('Coefficients enregistrés!');
    }
  }

  async calculerSalaires(): Promise<void> {
    if (this.selectedSortiesIds.length === 0) {
      this.alertService.error('Veuillez sélectionner au moins une sortie');
      return;
    }

    try {
      this.alertService.loading('Calcul en cours...');

      const facturesPromises = this.selectedSortiesIds.map(sortieId =>
        this.factureService.getFacturesBySortie(sortieId).pipe(take(1)).toPromise()
      );
      const allFactures = await Promise.all(facturesPromises);
      this.revenuTotal = allFactures.flat().reduce((sum, f) => sum + (f?.montantTotal || 0), 0);

      const depensesPromises = this.selectedSortiesIds.map(sortieId =>
        this.depenseService.getDepensesBySortie(sortieId).pipe(take(1)).toPromise()
      );
      const allDepenses = await Promise.all(depensesPromises);
      this.totalDepenses = allDepenses.flat().reduce((sum: number, d: any) => sum + (d?.montant || 0), 0);

      this.beneficeNet = this.revenuTotal - this.totalDepenses;
      this.partProprietaire = this.beneficeNet * 0.5;
      this.partEquipage = this.beneficeNet * 0.5;

      this.totalNuits = this.selectedSortiesIds.reduce((total, sortieId) => {
        const sortie = this.sorties.find(s => s.id === sortieId);
        return total + this.calculerNombreNuits(sortie!);
      }, 0);
      this.deductionNuits = this.totalNuits * this.marins.length * 5;
      this.montantAPartager = this.partEquipage - this.deductionNuits;

      this.salairesDetails = [];
      for (const marin of this.marins) {
        const coefficient = this.coefficients[marin.id!] || 0;
        const salaireBrut = (this.montantAPartager * coefficient) / 100;
        const primeNuits = this.totalNuits * 5;

        const avances = await this.avanceService.getAvancesByMarin(marin.id!).pipe(take(1)).toPromise();
        const totalAvances = avances?.reduce((sum, a) => sum + a.montant, 0) || 0;

        const paiements = await this.paiementService.getPaiementsByMarin(marin.id!).pipe(take(1)).toPromise();
        const totalPaiements = paiements?.reduce((sum, p) => sum + p.montant, 0) || 0;

        const resteAPayer = salaireBrut + primeNuits - totalAvances - totalPaiements;

        this.salairesDetails.push({
          marinId: marin.id!,
          marinNom: `${marin.prenom} ${marin.nom}`,
          coefficient,
          salaireBrut,
          primeNuits,
          totalAvances,
          totalPaiements,
          resteAPayer
        });
      }

      this.calculated = true;
      this.alertService.close();

      await Swal.fire({
        title: 'Calcul terminé !',
        html: `
          <div style="text-align: left; padding: 1rem;">
            <p><strong>Revenu total:</strong> ${this.revenuTotal.toFixed(2)} DT</p>
            <p><strong>Total dépenses:</strong> ${this.totalDepenses.toFixed(2)} DT</p>
            <p><strong>Bénéfice net:</strong> ${this.beneficeNet.toFixed(2)} DT</p>
            <p><strong>Part propriétaire (50%):</strong> ${this.partProprietaire.toFixed(2)} DT</p>
            <p><strong>Part équipage (50%):</strong> ${this.partEquipage.toFixed(2)} DT</p>
          </div>
        `,
        icon: 'success',
        confirmButtonColor: '#10b981'
      });
    } catch (error) {
      console.error('Erreur:', error);
      this.alertService.close();
      this.alertService.error('Erreur lors du calcul');
    }
  }

  async enregistrerPaiement(detail: SalaireDetail): Promise<void> {
    const { value: montant } = await Swal.fire({
      title: `Paiement pour ${detail.marinNom}`,
      input: 'number',
      inputLabel: `Montant à payer (Reste: ${detail.resteAPayer.toFixed(2)} DT)`,
      inputValue: detail.resteAPayer,
      showCancelButton: true,
      confirmButtonText: 'Enregistrer',
      cancelButtonText: 'Annuler',
      confirmButtonColor: '#10b981',
      inputValidator: (value) => {
        const amount = parseFloat(value);
        if (!value || amount <= 0) return 'Veuillez entrer un montant valide';
        if (amount > detail.resteAPayer) return 'Le montant ne peut pas dépasser le reste à payer';
        return null;
      }
    });

    if (montant) {
      try {
        this.alertService.loading('Enregistrement du paiement...');
        await this.paiementService.addPaiement({
          marinId: detail.marinId,
          montant: parseFloat(montant),
          datePaiement: new Date(),
          sortiesIds: this.selectedSortiesIds
        });
        this.alertService.close();
        this.alertService.success('Paiement enregistré!');
        await this.calculerSalaires();
      } catch (error) {
        console.error('Erreur:', error);
        this.alertService.close();
        this.alertService.error('Erreur lors de l\'enregistrement');
      }
    }
  }

  private calculerNombreNuits(sortie: Sortie): number {
    if (!sortie?.dateDepart || !sortie?.dateRetour) return 0;
    const depart = sortie.dateDepart instanceof Date ? sortie.dateDepart : (sortie.dateDepart as any).toDate();
    const retour = sortie.dateRetour instanceof Date ? sortie.dateRetour : (sortie.dateRetour as any).toDate();
    const diffTime = Math.abs(retour.getTime() - depart.getTime());
    return Math.ceil(diffTime / (1000 * 60 * 60 * 24));
  }

  formatDate(date: any): string {
    if (date?.toDate) return date.toDate().toLocaleDateString('fr-FR');
    if (date instanceof Date) return date.toLocaleDateString('fr-FR');
    return '';
  }
}

====================================
FICHIER: ./src/app/services/alert.service.ts
Lignes:       82
====================================

import { Injectable } from '@angular/core';
import Swal from 'sweetalert2';
import { TranslateService } from '@ngx-translate/core';

@Injectable({
  providedIn: 'root'
})
export class AlertService {

  constructor(private translate: TranslateService) {}

  async success(message: string, title?: string): Promise<void> {
    await Swal.fire({
      title: title || this.translate.instant('MESSAGES.SUCCESS'),
      text: message,
      icon: 'success',
      confirmButtonColor: '#3b82f6',
      confirmButtonText: 'OK'
    });
  }

  async error(message: string, title?: string): Promise<void> {
    await Swal.fire({
      title: title || this.translate.instant('MESSAGES.ERROR'),
      text: message,
      icon: 'error',
      confirmButtonColor: '#ef4444',
      confirmButtonText: 'OK'
    });
  }

  async warning(message: string, title?: string): Promise<void> {
    await Swal.fire({
      title: title || this.translate.instant('MESSAGES.ERROR'),
      text: message,
      icon: 'warning',
      confirmButtonColor: '#f59e0b',
      confirmButtonText: 'OK'
    });
  }

  async confirmDelete(itemName: string): Promise<boolean> {
    const result = await Swal.fire({
      title: this.translate.instant('MESSAGES.AREYOUSURE'),
      text: `${this.translate.instant('MESSAGES.CONFIRMDELETEMESSAGE')} ${itemName}? ${this.translate.instant('MESSAGES.IRREVERSIBLE')}`,
      icon: 'warning',
      showCancelButton: true,
      confirmButtonColor: '#ef4444',
      cancelButtonColor: '#6b7280',
      confirmButtonText: this.translate.instant('BOATS.DELETE'),
      cancelButtonText: this.translate.instant('FORM.CANCEL')
    });
    return result.isConfirmed;
  }

  loading(message?: string): void {
    Swal.fire({
      title: message || this.translate.instant('MESSAGES.LOADING'),
      allowOutsideClick: false,
      allowEscapeKey: false,
      didOpen: () => {
        Swal.showLoading();
      }
    });
  }

  close(): void {
    Swal.close();
  }

  toast(message: string, type: 'success' | 'error' | 'warning' | 'info' = 'success'): void {
    Swal.fire({
      toast: true,
      position: 'top-end',
      icon: type,
      title: message,
      showConfirmButton: false,
      timer: 3000,
      timerProgressBar: true
    });
  }
}

====================================
FICHIER: ./src/app/services/avance.service.ts
Lignes:       76
====================================

import { Injectable } from '@angular/core';
import { Firestore, collection, addDoc, updateDoc, deleteDoc, doc, collectionData, query, where } from '@angular/fire/firestore';
import { Observable } from 'rxjs';
import { Avance } from '../models/avance.model';

@Injectable({
  providedIn: 'root'
})
export class AvanceService {
  private collectionName = 'avances';

  constructor(private firestore: Firestore) {}

  getAvancesByMarin(marinId: string): Observable<Avance[]> {
    const avancesCollection = collection(this.firestore, this.collectionName);
    const q = query(avancesCollection, where('marinId', '==', marinId));
    return collectionData(q, { idField: 'id' }) as Observable<Avance[]>;
  }

  getAvancesByBateau(bateauId: string): Observable<Avance[]> {
    const avancesCollection = collection(this.firestore, this.collectionName);
    const q = query(avancesCollection, where('bateauId', '==', bateauId));
    return collectionData(q, { idField: 'id' }) as Observable<Avance[]>;
  }

  async addAvance(avance: Omit<Avance, 'id'>): Promise<any> {
    const avancesCollection = collection(this.firestore, this.collectionName);
    
    // ✅ FILTRER LES VALEURS UNDEFINED
    const dataToSave: any = {
      marinId: avance.marinId,
      bateauId: avance.bateauId,
      montant: avance.montant,
      dateAvance: avance.dateAvance,
      createdAt: new Date()
    };

    // Ajouter description seulement si elle existe
    if (avance.description && avance.description.trim() !== '') {
      dataToSave.description = avance.description;
    }

    return await addDoc(avancesCollection, dataToSave);
  }

  async updateAvance(id: string, avance: Partial<Avance>): Promise<void> {
    const avanceDoc = doc(this.firestore, `${this.collectionName}/${id}`);
    
    // ✅ FILTRER LES VALEURS UNDEFINED
    const dataToUpdate: any = {};
    
    if (avance.montant !== undefined) {
      dataToUpdate.montant = avance.montant;
    }
    
    if (avance.dateAvance !== undefined) {
      dataToUpdate.dateAvance = avance.dateAvance;
    }
    
    if (avance.description !== undefined) {
      if (avance.description && avance.description.trim() !== '') {
        dataToUpdate.description = avance.description;
      } else {
        // Si description est vide, la supprimer du document
        dataToUpdate.description = '';
      }
    }

    return await updateDoc(avanceDoc, dataToUpdate);
  }

  async deleteAvance(id: string): Promise<void> {
    const avanceDoc = doc(this.firestore, `${this.collectionName}/${id}`);
    return await deleteDoc(avanceDoc);
  }
}

====================================
FICHIER: ./src/app/services/bateau.service.ts
Lignes:       62
====================================

import { Injectable } from '@angular/core';
import {
  Firestore,
  collection,
  collectionData,
  doc,
  docData,
  addDoc,
  updateDoc,
  deleteDoc,
  query,
  orderBy,
  CollectionReference
} from '@angular/fire/firestore';
import { Observable } from 'rxjs';
import { Bateau } from '../models/bateau.model';

@Injectable({
  providedIn: 'root'
})
export class BateauService {
  private bateauxCollection: CollectionReference;

  constructor(private firestore: Firestore) {
    this.bateauxCollection = collection(this.firestore, 'bateaux');
  }

  getBateaux(): Observable<Bateau[]> {
    const bateauxQuery = query(this.bateauxCollection, orderBy('nom', 'asc'));
    return collectionData(bateauxQuery, { idField: 'id' }) as Observable<Bateau[]>;
  }

  getBateau(id: string): Observable<Bateau> {
    const bateauDoc = doc(this.firestore, `bateaux/${id}`);
    return docData(bateauDoc, { idField: 'id' }) as Observable<Bateau>;
  }

  async addBateau(bateau: Bateau): Promise<string> {
    const newBateau = {
      ...bateau,
      createdAt: new Date(),
      updatedAt: new Date()
    };
    const docRef = await addDoc(this.bateauxCollection, newBateau);
    // Retourner uniquement l'ID, pas le chemin complet
    return docRef.id;
  }

  async updateBateau(id: string, bateau: Partial<Bateau>): Promise<void> {
    const bateauDoc = doc(this.firestore, `bateaux/${id}`);
    const updateData = {
      ...bateau,
      updatedAt: new Date()
    };
    return await updateDoc(bateauDoc, updateData);
  }

  async deleteBateau(id: string): Promise<void> {
    const bateauDoc = doc(this.firestore, `bateaux/${id}`);
    return await deleteDoc(bateauDoc);
  }
}

====================================
FICHIER: ./src/app/services/depense.service.ts
Lignes:       58
====================================

import { Injectable } from '@angular/core';
import {
  Firestore,
  collection,
  collectionData,
  doc,
  docData,
  addDoc,
  updateDoc,
  deleteDoc,
  query,
  where,
  orderBy,
  CollectionReference,
} from '@angular/fire/firestore';
import { Observable } from 'rxjs';
import { Depense } from '../models/depense.model';

@Injectable({
  providedIn: 'root',
})
export class DepenseService {
  private depensesCollection: CollectionReference;

  constructor(private firestore: Firestore) {
    this.depensesCollection = collection(this.firestore, 'depenses');
  }

  getDepensesBySortie(sortieId: string): Observable<Depense[]> {
    const q = query(
      this.depensesCollection,
      where('sortieId', '==', sortieId),
      orderBy('date', 'desc')
    );
    return collectionData(q, { idField: 'id' }) as Observable<Depense[]>;
  }

  getDepense(id: string): Observable<Depense | undefined> {
    const depenseDoc = doc(this.firestore, `depenses/${id}`);
    return docData(depenseDoc, { idField: 'id' }) as Observable<Depense | undefined>;
  }

  async addDepense(depense: Depense): Promise<any> {
    const newDepense = { ...depense, createdAt: new Date(), updatedAt: new Date() };
    return await addDoc(this.depensesCollection, newDepense);
  }

  async updateDepense(id: string, depense: Partial<Depense>): Promise<void> {
    const depenseDoc = doc(this.firestore, `depenses/${id}`);
    const updateData = { ...depense, updatedAt: new Date() };
    return await updateDoc(depenseDoc, updateData);
  }

  async deleteDepense(id: string): Promise<void> {
    const depenseDoc = doc(this.firestore, `depenses/${id}`);
    return await deleteDoc(depenseDoc);
  }
}

====================================
FICHIER: ./src/app/services/facture-vente.service.ts
Lignes:       37
====================================

import { Injectable } from '@angular/core';
import { Firestore, collection, addDoc, updateDoc, deleteDoc, doc, collectionData, query, where } from '@angular/fire/firestore';
import { Observable } from 'rxjs';
import { FactureVente } from '../models/facture-vente.model';

@Injectable({
  providedIn: 'root'
})
export class FactureVenteService {
  private collectionName = 'factures_vente';

  constructor(private firestore: Firestore) {}

  getFacturesBySortie(sortieId: string): Observable<FactureVente[]> {
    const facturesCollection = collection(this.firestore, this.collectionName);
    const q = query(facturesCollection, where('sortieId', '==', sortieId));
    return collectionData(q, { idField: 'id' }) as Observable<FactureVente[]>;
  }

  async addFacture(facture: Omit<FactureVente, 'id'>): Promise<any> {
    const facturesCollection = collection(this.firestore, this.collectionName);
    return await addDoc(facturesCollection, {
      ...facture,
      createdAt: new Date()
    });
  }

  async updateFacture(id: string, facture: Partial<FactureVente>): Promise<void> {
    const factureDoc = doc(this.firestore, `${this.collectionName}/${id}`);
    return await updateDoc(factureDoc, facture);
  }

  async deleteFacture(id: string): Promise<void> {
    const factureDoc = doc(this.firestore, `${this.collectionName}/${id}`);
    return await deleteDoc(factureDoc);
  }
}

====================================
FICHIER: ./src/app/services/facture.service.ts
Lignes:       30
====================================

import { Injectable } from '@angular/core';
import { Firestore, collection, collectionData, doc, addDoc, updateDoc, deleteDoc, query, where, orderBy } from '@angular/fire/firestore';
import { Observable } from 'rxjs';
import { Facture } from '../models/facture.model';

@Injectable({ providedIn: 'root' })
export class FactureService {
  constructor(private firestore: Firestore) {}

  getFacturesBySortie(sortieId: string): Observable<Facture[]> {
    const facturesCollection = collection(this.firestore, 'factures');
    const facturesQuery = query(facturesCollection, where('sortieId', '==', sortieId), orderBy('dateFacture', 'desc'));
    return collectionData(facturesQuery, { idField: 'id' }) as Observable<Facture[]>;
  }

  async addFacture(facture: Facture): Promise<any> {
    const facturesCollection = collection(this.firestore, 'factures');
    return await addDoc(facturesCollection, { ...facture, createdAt: new Date(), updatedAt: new Date() });
  }

  async updateFacture(id: string, facture: Partial<Facture>): Promise<void> {
    const factureDoc = doc(this.firestore, 'factures/' + id);
    await updateDoc(factureDoc, { ...facture, updatedAt: new Date() });
  }

  async deleteFacture(id: string): Promise<void> {
    const factureDoc = doc(this.firestore, 'factures/' + id);
    await deleteDoc(factureDoc);
  }
}

====================================
FICHIER: ./src/app/services/language.service.ts
Lignes:       40
====================================

import { Injectable } from '@angular/core';
import { TranslateService } from '@ngx-translate/core';

@Injectable({
  providedIn: 'root'
})
export class LanguageService {
  private readonly STORAGE_KEY = 'app_language';
  private readonly DEFAULT_LANGUAGE = 'ar';

  constructor(private translate: TranslateService) {}

  initLanguage(): void {
    const savedLang = localStorage.getItem(this.STORAGE_KEY) || this.DEFAULT_LANGUAGE;
    this.setLanguage(savedLang);
  }

  setLanguage(langCode: string): void {
    this.translate.use(langCode);
    localStorage.setItem(this.STORAGE_KEY, langCode);
    
    // Appliquer direction RTL/LTR sur le body
    const isRTL = langCode === 'ar';
    document.body.classList.toggle('rtl', isRTL);
    document.body.classList.toggle('ltr', !isRTL);
    document.body.setAttribute('dir', isRTL ? 'rtl' : 'ltr');
    
    // Appliquer sur html aussi pour compatibilité totale
    document.documentElement.setAttribute('dir', isRTL ? 'rtl' : 'ltr');
    document.documentElement.setAttribute('lang', langCode);
  }

  getCurrentLanguage(): string {
    return this.translate.currentLang || localStorage.getItem(this.STORAGE_KEY) || this.DEFAULT_LANGUAGE;
  }

  isRTL(): boolean {
    return this.getCurrentLanguage() === 'ar';
  }
}

====================================
FICHIER: ./src/app/services/marin.service.ts
Lignes:       57
====================================

import { Injectable } from '@angular/core';
import { Firestore, collection, collectionData, doc, docData, addDoc, updateDoc, deleteDoc, query, where, orderBy, CollectionReference } from '@angular/fire/firestore';
import { Observable } from 'rxjs';
import { Marin } from '../models/marin.model';

@Injectable({
  providedIn: 'root'
})
export class MarinService {
  private marinsCollection: CollectionReference;

  constructor(private firestore: Firestore) {
    this.marinsCollection = collection(this.firestore, 'marins');
  }

  getMarinsByBateau(bateauId: string): Observable<Marin[]> {
    const marinsQuery = query(
      this.marinsCollection,
      where('bateauId', '==', bateauId),
      orderBy('nom', 'asc')
    );
    return collectionData(marinsQuery, { idField: 'id' }) as Observable<Marin[]>;
  }

  getAllMarins(): Observable<Marin[]> {
    const marinsQuery = query(this.marinsCollection, orderBy('nom', 'asc'));
    return collectionData(marinsQuery, { idField: 'id' }) as Observable<Marin[]>;
  }

  getMarin(id: string): Observable<Marin> {
    const marinDoc = doc(this.firestore, `marins/${id}`);
    return docData(marinDoc, { idField: 'id' }) as Observable<Marin>;
  }

  async addMarin(marin: Marin): Promise<any> {
    const newMarin = {
      ...marin,
      createdAt: new Date(),
      updatedAt: new Date()
    };
    return await addDoc(this.marinsCollection, newMarin);
  }

  async updateMarin(id: string, marin: Partial<Marin>): Promise<void> {
    const marinDoc = doc(this.firestore, `marins/${id}`);
    const updateData = {
      ...marin,
      updatedAt: new Date()
    };
    return await updateDoc(marinDoc, updateData);
  }

  async deleteMarin(id: string): Promise<void> {
    const marinDoc = doc(this.firestore, `marins/${id}`);
    return await deleteDoc(marinDoc);
  }
}

====================================
FICHIER: ./src/app/services/mock-data.service.ts
Lignes:      260
====================================

import { Injectable } from '@angular/core';
import { Firestore, collection, getDocs, deleteDoc, doc } from '@angular/fire/firestore';
import { BateauService } from './bateau.service';
import { MarinService } from './marin.service';
import { SortieService } from './sortie.service';
import { DepenseService } from './depense.service';
import { FactureVenteService } from './facture-vente.service';
import { AvanceService } from './avance.service';
import { PaiementService } from './paiement.service';

@Injectable({
  providedIn: 'root'
})
export class MockDataService {
  
  constructor(
    private firestore: Firestore,
    private bateauService: BateauService,
    private marinService: MarinService,
    private sortieService: SortieService,
    private depenseService: DepenseService,
    private factureService: FactureVenteService,
    private avanceService: AvanceService,
    private paiementService: PaiementService
  ) {}

  async clearAllData(): Promise<void> {
    console.log('🗑️ Suppression de toutes les données...');
    const collections = ['paiements', 'avances', 'factures', 'depenses', 'sorties', 'marins', 'bateaux'];
    
    for (const collectionName of collections) {
      const collectionRef = collection(this.firestore, collectionName);
      const snapshot = await getDocs(collectionRef);
      const deletePromises = snapshot.docs.map(document => 
        deleteDoc(doc(this.firestore, collectionName, document.id))
      );
      await Promise.all(deletePromises);
      console.log(`✅ ${collectionName}: ${snapshot.size} supprimés`);
    }
  }

  async generateAllMockData(): Promise<void> {
    await this.clearAllData();
    console.log('🎲 Génération des données fictives...');

    const bateauIds = await this.generateBateaux();
    const marinsData = await this.generateMarins(bateauIds);
    const sortieIds = await this.generateSorties(bateauIds);
    await this.generateDepenses(sortieIds);
    await this.generateFactures(sortieIds);
    await this.generateAvances(marinsData);
    await this.generatePaiements(marinsData);

    console.log('✅ Données générées avec succès!');
  }

  private async generateBateaux(): Promise<string[]> {
    const bateaux = [
      {
        nom: 'Le Poséidon',
        immatriculation: 'TN-SF-001',
        puissance: 350,
        typeMoteur: 'Diesel Volvo Penta',
        longueur: 18.5,
        capaciteEquipage: 12,
        dateConstruction: new Date('2015-06-15'),
        portAttache: 'Port de Sfax',
        statut: 'actif' as const
      },
      {
        nom: 'Neptune III',
        immatriculation: 'TN-SF-002',
        puissance: 420,
        typeMoteur: 'Diesel Caterpillar',
        longueur: 22.0,
        capaciteEquipage: 15,
        dateConstruction: new Date('2018-03-20'),
        portAttache: 'Port de Sfax',
        statut: 'actif' as const
      }
    ];

    const ids: string[] = [];
    for (const bateau of bateaux) {
      const id = await this.bateauService.addBateau(bateau);
      ids.push(id);
      console.log(`✅ Bateau: ${bateau.nom} (ID: ${id})`);
    }
    return ids;
  }

  private async generateMarins(bateauIds: string[]): Promise<{ bateauId: string, marinIds: string[] }[]> {
    const marinsParBateau = [
      [ // équipage du Poséidon
        { prenom: 'Mohamed', nom: 'Ben Ali', fonction: 'capitaine' as const },
        { prenom: 'Ahmed', nom: 'Trabelsi', fonction: 'mecanicien' as const },
        { prenom: 'Karim', nom: 'Hamdi', fonction: 'matelot' as const }
      ],
      [ // équipage du Neptune III
        { prenom: 'Hichem', nom: 'Jebali', fonction: 'capitaine' as const },
        { prenom: 'Nabil', nom: 'Bouazizi', fonction: 'mecanicien' as const },
        { prenom: 'Riadh', nom: 'Mansour', fonction: 'matelot' as const }
      ]
    ];

    const result: { bateauId: string, marinIds: string[] }[] = [];

    for (let i = 0; i < bateauIds.length; i++) {
      const bateauId = bateauIds[i];
      const marins = marinsParBateau[i];
      const marinIds: string[] = [];

      for (const marin of marins) {
        const id = await this.marinService.addMarin({
          prenom: marin.prenom,
          nom: marin.nom,
          fonction: marin.fonction,
          bateauId: bateauId,
          telephone: `+216 98 ${Math.floor(Math.random() * 1000000).toString().padStart(6, '0')}`,
          email: `${marin.prenom.toLowerCase()}.${marin.nom.toLowerCase()}@example.com`,
          adresse: 'Avenue Habib Bourguiba, Sfax',
          dateNaissance: new Date(1980, 5, 15),
          dateEmbauche: new Date(2018, 0, 1),
          numeroPermis: `PM-${Math.random().toString(36).substr(2, 9).toUpperCase()}`,
          statut: 'actif' as const
        });
        marinIds.push(id);
        console.log(`✅ Marin: ${marin.prenom} ${marin.nom} (${marin.fonction}) pour bateau ${bateauId}`);
      }
      
      result.push({ bateauId, marinIds });
    }

    return result;
  }

  private async generateSorties(bateauIds: string[]): Promise<string[]> {
    const sortieIds: string[] = [];
    const destinations = ['Lampedusa', 'Kerkennah', 'Djerba', 'Gabès', 'Zarzis'];
    const now = new Date();

    for (const bateauId of bateauIds) {
      // 5 sorties par bateau
      for (let i = 0; i < 5; i++) {
        const daysAgo = (i + 1) * 7;
        const dateDepart = new Date(now.getTime() - (daysAgo * 24 * 60 * 60 * 1000));
        const dureeJours = 4;
        const dateRetour = new Date(dateDepart.getTime() + (dureeJours * 24 * 60 * 60 * 1000));
        
        let statut: 'en-cours' | 'terminee' | 'annulee';
        if (i === 0) {
          statut = 'en-cours';
        } else {
          statut = 'terminee';
        }

        const id = await this.sortieService.addSortie({
          bateauId: bateauId,
          destination: destinations[i],
          dateDepart,
          dateRetour,
          statut
        });

        sortieIds.push(id);
        console.log(`✅ Sortie: ${destinations[i]} pour bateau ${bateauId} (ID: ${id})`);
      }
    }

    return sortieIds;
  }

  private async generateDepenses(sortieIds: string[]): Promise<void> {
    // Types valides selon le modèle Depense
    const types: Array<'fuel' | 'ice' | 'food' | 'oil_change' | 'crew_cnss' | 'crew_bonus' | 'vms' | 'misc'> = [
      'fuel',
      'ice', 
      'food',
      'oil_change',
      'crew_cnss'
    ];
    
    for (const sortieId of sortieIds) {
      // 2 dépenses par sortie
      for (let i = 0; i < 2; i++) {
        const type = types[Math.floor(Math.random() * types.length)];
        const montant = 100 + Math.random() * 400;
        const daysAgo = Math.floor(Math.random() * 10);
        const date = new Date(Date.now() - (daysAgo * 24 * 60 * 60 * 1000));

        await this.depenseService.addDepense({
          sortieId: sortieId,
          type,
          montant: Math.round(montant * 100) / 100,
          date,
          description: `Dépense de ${type.replace('_', ' ')}`
        });
      }
    }
    console.log('✅ Dépenses créées');
  }

  private async generateFactures(sortieIds: string[]): Promise<void> {
    for (const sortieId of sortieIds) {
      const montant = 2000 + Math.random() * 3000;
      const daysAgo = Math.floor(Math.random() * 10);
      const date = new Date(Date.now() - (daysAgo * 24 * 60 * 60 * 1000));

      await this.factureService.addFacture({
        sortieId: sortieId,
        numeroFacture: `F-${Date.now()}-${Math.random().toString(36).substr(2, 6).toUpperCase()}`,
        client: 'Marché Central',
        dateVente: date,
        montantTotal: Math.round(montant * 100) / 100,
        details: 'Vente de poissons'
      });
    }
    console.log('✅ Factures créées');
  }

  private async generateAvances(marinsData: { bateauId: string, marinIds: string[] }[]): Promise<void> {
    for (const { bateauId, marinIds } of marinsData) {
      for (const marinId of marinIds) {
        // 2 avances par marin
        for (let i = 0; i < 2; i++) {
          const montant = 200 + i * 100;
          const daysAgo = (i + 1) * 15;
          const date = new Date(Date.now() - (daysAgo * 24 * 60 * 1000));

          await this.avanceService.addAvance({
            bateauId: bateauId,
            marinId: marinId,
            montant,
            dateAvance: date,
            description: `Avance ${i + 1}`
          });
        }
      }
    }
    console.log('✅ Avances créées');
  }

  private async generatePaiements(marinsData: { bateauId: string, marinIds: string[] }[]): Promise<void> {
    for (const { marinIds } of marinsData) {
      for (const marinId of marinIds) {
        // 1 paiement par marin
        const montant = 500;
        const date = new Date(Date.now() - (30 * 24 * 60 * 60 * 1000));

        await this.paiementService.addPaiement({
          marinId,
          montant,
          datePaiement: date,
          sortiesIds: []
        });
      }
    }
    console.log('✅ Paiements créés');
  }
}

====================================
FICHIER: ./src/app/services/paiement.service.ts
Lignes:       27
====================================

import { Injectable } from '@angular/core';
import { Firestore, collection, addDoc, collectionData, query, where } from '@angular/fire/firestore';
import { Observable } from 'rxjs';
import { Paiement } from '../models/paiement.model';

@Injectable({
  providedIn: 'root'
})
export class PaiementService {
  private collectionName = 'paiements';

  constructor(private firestore: Firestore) {}

  getPaiementsByMarin(marinId: string): Observable<Paiement[]> {
    const paymentsCollection = collection(this.firestore, this.collectionName);
    const q = query(paymentsCollection, where('marinId', '==', marinId));
    return collectionData(q, { idField: 'id' }) as Observable<Paiement[]>;
  }

  async addPaiement(paiement: Omit<Paiement, 'id'>): Promise<any> {
    const paymentsCollection = collection(this.firestore, this.collectionName);
    return await addDoc(paymentsCollection, {
      ...paiement,
      createdAt: new Date()
    });
  }
}

====================================
FICHIER: ./src/app/services/partage.service.ts
Lignes:       25
====================================

import { Injectable } from '@angular/core';
import { Firestore, collection, collectionData, doc, addDoc, updateDoc, query, where } from '@angular/fire/firestore';
import { Observable } from 'rxjs';
import { Partage } from '../models/partage.model';

@Injectable({ providedIn: 'root' })
export class PartageService {
  constructor(private firestore: Firestore) {}

  getPartageBySortie(sortieId: string): Observable<Partage[]> {
    const partagesCollection = collection(this.firestore, 'partages');
    const partageQuery = query(partagesCollection, where('sortieId', '==', sortieId));
    return collectionData(partageQuery, { idField: 'id' }) as Observable<Partage[]>;
  }

  async addPartage(partage: Partage): Promise<any> {
    const partagesCollection = collection(this.firestore, 'partages');
    return await addDoc(partagesCollection, { ...partage, createdAt: new Date(), updatedAt: new Date() });
  }

  async updatePartage(id: string, partage: Partial<Partage>): Promise<void> {
    const partageDoc = doc(this.firestore, 'partages/' + id);
    await updateDoc(partageDoc, { ...partage, updatedAt: new Date() });
  }
}

====================================
FICHIER: ./src/app/services/pointage.service.ts
Lignes:       46
====================================

import { Injectable } from '@angular/core';
import { 
  Firestore, 
  collection, 
  collectionData, 
  doc, 
  addDoc, 
  updateDoc, 
  query, 
  where, 
  CollectionReference 
} from '@angular/fire/firestore';
import { Observable } from 'rxjs';
import { Pointage } from '../models/pointage.model';

@Injectable({
  providedIn: 'root',
})
export class PointageService {
  private pointagesCollection: CollectionReference;

  constructor(private firestore: Firestore) {
    this.pointagesCollection = collection(this.firestore, 'pointages');
  }

  getPointagesBySortie(sortieId: string): Observable<Pointage[]> {
    const q = query(this.pointagesCollection, where('sortieId', '==', sortieId));
    return collectionData(q, { idField: 'id' }) as Observable<Pointage[]>;
  }

  async addPointage(pointage: Omit<Pointage, 'id'>): Promise<any> {
    return await addDoc(this.pointagesCollection, {
      ...pointage,
      createdAt: new Date(),
      updatedAt: new Date()
    });
  }

  async updatePointage(id: string, pointage: Partial<Pointage>): Promise<void> {
    const pointageDoc = doc(this.firestore, `pointages/${id}`);
    return await updateDoc(pointageDoc, {
      ...pointage,
      updatedAt: new Date()
    });
  }
}

====================================
FICHIER: ./src/app/services/salaire.service.ts
Lignes:       49
====================================

import { Injectable } from '@angular/core';
import { Firestore, collection, addDoc, doc, getDoc, setDoc, collectionData, query, where } from '@angular/fire/firestore';
import { Observable } from 'rxjs';
import { CoeffSalaire, CalculSalaire } from '../models/salaire.model';

@Injectable({
  providedIn: 'root'
})
export class SalaireService {
  private collectionName = 'coefficients_salaire';
  private calculsSalaireCollection = 'calculs_salaire';

  constructor(private firestore: Firestore) {}

  // Récupérer le coefficient d'un marin
  async getCoefficient(marinId: string): Promise<number> {
    const coeffDoc = doc(this.firestore, `${this.collectionName}/${marinId}`);
    const docSnap = await getDoc(coeffDoc);
    
    if (docSnap.exists()) {
      const data = docSnap.data() as CoeffSalaire;
      return data.coefficient;
    }
    return 0; // Par défaut
  }

  // Sauvegarder le coefficient d'un marin
  async saveCoefficient(marinId: string, coefficient: number): Promise<void> {
    const coeffDoc = doc(this.firestore, `${this.collectionName}/${marinId}`);
    const data: CoeffSalaire = {
      marinId,
      coefficient
    };
    return await setDoc(coeffDoc, data);
  }

  // Sauvegarder un calcul de salaire
  async saveCalculSalaire(calcul: CalculSalaire): Promise<any> {
    const calculsCollection = collection(this.firestore, this.calculsSalaireCollection);
    return await addDoc(calculsCollection, calcul);
  }

  // Récupérer les calculs de salaire d'une sortie
  getCalculsBySortie(sortieId: string): Observable<CalculSalaire[]> {
    const calculsCollection = collection(this.firestore, this.calculsSalaireCollection);
    const q = query(calculsCollection, where('sortieId', '==', sortieId));
    return collectionData(q, { idField: 'id' }) as Observable<CalculSalaire[]>;
  }
}

====================================
FICHIER: ./src/app/services/selected-boat.service.ts
Lignes:       41
====================================

import { Injectable } from '@angular/core';
import { BehaviorSubject, Observable } from 'rxjs';
import { Bateau } from '../models/bateau.model';

@Injectable({
  providedIn: 'root'
})
export class SelectedBoatService {
  private selectedBoatSubject = new BehaviorSubject<Bateau | null>(null);
  public selectedBoat$: Observable<Bateau | null> = this.selectedBoatSubject.asObservable();

  constructor() {
    // Charger le bateau depuis le localStorage au démarrage
    const savedBoat = localStorage.getItem('selectedBoat');
    if (savedBoat) {
      try {
        this.selectedBoatSubject.next(JSON.parse(savedBoat));
      } catch (e) {
        console.error('Erreur lors du chargement du bateau sélectionné', e);
      }
    }
  }

  selectBoat(boat: Bateau): void {
    this.selectedBoatSubject.next(boat);
    localStorage.setItem('selectedBoat', JSON.stringify(boat));
  }

  getSelectedBoat(): Bateau | null {
    return this.selectedBoatSubject.value;
  }

  clearSelection(): void {
    this.selectedBoatSubject.next(null);
    localStorage.removeItem('selectedBoat');
  }

  hasSelectedBoat(): boolean {
    return this.selectedBoatSubject.value !== null;
  }
}

====================================
FICHIER: ./src/app/services/sortie.service.ts
Lignes:       59
====================================

import { Injectable } from '@angular/core';
import { Firestore, collection, query, where, collectionData, addDoc, updateDoc, deleteDoc, doc, docData } from '@angular/fire/firestore';
import { Observable } from 'rxjs';
import { Sortie } from '../models/sortie.model';

@Injectable({
  providedIn: 'root'
})
export class SortieService {
  private sortiesCollection = collection(this.firestore, 'sorties');

  constructor(private firestore: Firestore) {}

  getSorties(): Observable<Sortie[]> {
    return collectionData(this.sortiesCollection, { idField: 'id' }) as Observable<Sortie[]>;
  }

  getSortie(id: string): Observable<Sortie> {
    const sortieDoc = doc(this.firestore, 'sorties', id);
    return docData(sortieDoc, { idField: 'id' }) as Observable<Sortie>;
  }

  getSortiesByBateau(bateauId: string): Observable<Sortie[]> {
    console.log('🔍 getSortiesByBateau appelé avec bateauId:', bateauId);
    
    const q = query(
      this.sortiesCollection,
      where('bateauId', '==', bateauId)
    );
    
    const result$ = collectionData(q, { idField: 'id' }) as Observable<Sortie[]>;
    
    result$.subscribe(sorties => {
      console.log(`📊 Sorties trouvées pour bateau ${bateauId}:`, sorties.length);
      if (sorties.length > 0) {
        console.log('📦 Première sortie:', sorties[0]);
      }
    });
    
    return result$;
  }

  async addSortie(sortie: Omit<Sortie, 'id'>): Promise<string> {
    console.log('➕ Ajout sortie:', sortie);
    const docRef = await addDoc(this.sortiesCollection, sortie);
    console.log('✅ Sortie ajoutée avec ID:', docRef.id);
    return docRef.id;
  }

  async updateSortie(id: string, sortie: Partial<Sortie>): Promise<void> {
    const sortieDoc = doc(this.firestore, 'sorties', id);
    await updateDoc(sortieDoc, sortie);
  }

  async deleteSortie(id: string): Promise<void> {
    const sortieDoc = doc(this.firestore, 'sorties', id);
    await deleteDoc(sortieDoc);
  }
}

====================================
FICHIER: ./src/app/sorties/depense-form/depense-form.component.ts
Lignes:      105
====================================

import { Component, OnInit } from '@angular/core';
import { CommonModule, Location } from '@angular/common';
import { FormBuilder, FormGroup, Validators, ReactiveFormsModule } from '@angular/forms';
import { ActivatedRoute, Router } from '@angular/router';
import { TranslateModule } from '@ngx-translate/core';
import { DepenseService } from '../../services/depense.service';
import { AlertService } from '../../services/alert.service';
import { Depense } from '../../models/depense.model';

@Component({
  selector: 'app-depense-form',
  standalone: true,
  imports: [CommonModule, ReactiveFormsModule, TranslateModule],
  templateUrl: './depense-form.component.html',
  styleUrls: ['./depense-form.component.scss'],
})
export class DepenseFormComponent implements OnInit {
  form!: FormGroup;
  isEditMode = false;
  sortieId!: string;
  depenseId?: string;
  loading = false;
  // Utilise les clés MAJUSCULES qui existent dans les fichiers JSON
  expenseKeys: string[] = ['FUEL', 'ICE', 'OIL_CHANGE', 'CREW_CNSS', 'CREW_BONUS', 'FOOD', 'VMS', 'MISC'];

  constructor(
    private fb: FormBuilder,
    private route: ActivatedRoute,
    private router: Router,
    private depenseService: DepenseService,
    private alertService: AlertService,
    private location: Location
  ) {}

  ngOnInit(): void {
    this.sortieId = this.route.snapshot.paramMap.get('id')!;
    this.depenseId = this.route.snapshot.paramMap.get('depenseId') || undefined;
    this.isEditMode = !!this.depenseId;

    this.initForm();

    if (this.isEditMode && this.depenseId) {
      this.loading = true;
      this.depenseService.getDepense(this.depenseId).subscribe((depense) => {
        if (depense) {
          this.form.patchValue({
            ...depense,
            date: this.formatDate(depense.date),
          });
        }
        this.loading = false;
      });
    }
  }

  private initForm(): void {
    this.form = this.fb.group({
      type: ['fuel', Validators.required], // Valeur par défaut en minuscule
      montant: [null, [Validators.required, Validators.min(0.01)]],
      date: [new Date().toISOString().substring(0, 10), Validators.required],
      description: [''],
    });
  }
  
  private formatDate(date: any): string {
    if (!date) return new Date().toISOString().substring(0, 10);
    const d = date.toDate ? date.toDate() : new Date(date);
    return d.toISOString().split('T')[0];
  }

  async onSubmit(): Promise<void> {
    if (this.form.invalid) {
      this.alertService.warning('Veuillez remplir tous les champs obligatoires.', 'Formulaire incomplet');
      return;
    }

    this.loading = true;
    const formValue = this.form.value;
    const depenseData: Omit<Depense, 'id'> = {
      ...formValue,
      sortieId: this.sortieId,
      date: new Date(formValue.date),
    };

    try {
      if (this.isEditMode && this.depenseId) {
        await this.depenseService.updateDepense(this.depenseId, depenseData);
        await this.alertService.toast('EXPENSES.SUCCESS_UPDATE', 'success');
      } else {
        await this.depenseService.addDepense(depenseData as Depense);
        await this.alertService.toast('EXPENSES.SUCCESS_ADD', 'success');
      }
      this.router.navigate(['/dashboard/sorties/details', this.sortieId]);
    } catch (error) {
      console.error('Erreur lors de la sauvegarde de la dépense', error);
      this.alertService.error('Une erreur est survenue.', 'Erreur');
    } finally {
      this.loading = false;
    }
  }

  cancel(): void {
    this.location.back();
  }
}

====================================
FICHIER: ./src/app/sorties/details/sorties-details.component.ts
Lignes:        1
====================================



====================================
FICHIER: ./src/app/sorties/factures/factures.component.ts
Lignes:      252
====================================

import { Component, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { ActivatedRoute, RouterModule } from '@angular/router';
import { TranslateModule, TranslateService } from '@ngx-translate/core';
import Swal from 'sweetalert2';

import { FactureVenteService } from '../../services/facture-vente.service';
import { SortieService } from '../../services/sortie.service';
import { AlertService } from '../../services/alert.service';

import { FactureVente } from '../../models/facture-vente.model';
import { Sortie } from '../../models/sortie.model';

import { take } from 'rxjs/operators';

@Component({
  selector: 'app-factures',
  standalone: true,
  imports: [CommonModule, TranslateModule, RouterModule],
  templateUrl: './factures.component.html',
  styleUrls: ['./factures.component.scss']
})
export class FacturesComponent implements OnInit {
  sortieId!: string;
  sortie?: Sortie;
  factures: FactureVente[] = [];
  loading = true;

  constructor(
    private route: ActivatedRoute,
    private factureService: FactureVenteService,
    private sortieService: SortieService,
    private alertService: AlertService,
    private translate: TranslateService
  ) {}

  ngOnInit(): void {
    this.sortieId = this.route.snapshot.paramMap.get('id')!;
    this.loadData();
  }

  loadData(): void {
    this.sortieService.getSortie(this.sortieId).pipe(take(1)).subscribe(sortie => {
      this.sortie = sortie;
      
      this.factureService.getFacturesBySortie(this.sortieId).subscribe(factures => {
        this.factures = factures;
        this.loading = false;
      });
    });
  }

  getTotalVentes(): number {
    return this.factures.reduce((sum, f) => sum + f.montantTotal, 0);
  }

  async ajouterFacture(): Promise<void> {
    const { value: formValues } = await Swal.fire({
      title: 'Ajouter une facture de vente',
      html: `
        <div style="text-align: left; padding: 1rem;">
          <div style="margin-bottom: 1rem;">
            <label style="display: block; margin-bottom: 0.5rem; font-weight: 600;">N° Facture *</label>
            <input id="swal-numero" type="text" class="swal2-input" placeholder="F-001" style="width: 90%;">
          </div>
          
          <div style="margin-bottom: 1rem;">
            <label style="display: block; margin-bottom: 0.5rem; font-weight: 600;">Client *</label>
            <input id="swal-client" type="text" class="swal2-input" placeholder="Nom du client" style="width: 90%;">
          </div>
          
          <div style="margin-bottom: 1rem;">
            <label style="display: block; margin-bottom: 0.5rem; font-weight: 600;">Date de vente *</label>
            <input id="swal-date" type="date" class="swal2-input" value="${this.getTodayDate()}" style="width: 90%;">
          </div>
          
          <div style="margin-bottom: 1rem;">
            <label style="display: block; margin-bottom: 0.5rem; font-weight: 600;">Montant total (DT) *</label>
            <input id="swal-montant" type="number" class="swal2-input" placeholder="0.00" step="0.01" min="0" style="width: 90%;">
          </div>
          
          <div style="margin-bottom: 1rem;">
            <label style="display: block; margin-bottom: 0.5rem; font-weight: 600;">Détails (poissons vendus)</label>
            <textarea id="swal-details" class="swal2-textarea" placeholder="Ex: 50 kg de dorade, 30 kg de loup..." style="width: 90%;"></textarea>
          </div>
        </div>
      `,
      focusConfirm: false,
      showCancelButton: true,
      confirmButtonText: 'Ajouter',
      cancelButtonText: 'Annuler',
      confirmButtonColor: '#10b981',
      width: '600px',
      preConfirm: () => {
        const numero = (document.getElementById('swal-numero') as HTMLInputElement).value;
        const client = (document.getElementById('swal-client') as HTMLInputElement).value;
        const date = (document.getElementById('swal-date') as HTMLInputElement).value;
        const montant = parseFloat((document.getElementById('swal-montant') as HTMLInputElement).value);
        const details = (document.getElementById('swal-details') as HTMLTextAreaElement).value;

        if (!numero || !client || !date || !montant) {
          Swal.showValidationMessage('Veuillez remplir tous les champs obligatoires');
          return false;
        }

        if (montant <= 0) {
          Swal.showValidationMessage('Le montant doit être supérieur à 0');
          return false;
        }

        return { numero, client, date, montant, details };
      }
    });

    if (formValues) {
      try {
        this.alertService.loading('Ajout de la facture...');

        const newFacture: Omit<FactureVente, 'id'> = {
          sortieId: this.sortieId,
          numeroFacture: formValues.numero,
          client: formValues.client,
          dateVente: new Date(formValues.date),
          montantTotal: formValues.montant,
          details: formValues.details || undefined
        };

        await this.factureService.addFacture(newFacture);
        
        this.alertService.close();
        this.alertService.success('Facture ajoutée avec succès!');
      } catch (error) {
        console.error('Erreur:', error);
        this.alertService.close();
        this.alertService.error('Erreur lors de l\'ajout');
      }
    }
  }

  async modifierFacture(facture: FactureVente): Promise<void> {
    const { value: formValues } = await Swal.fire({
      title: 'Modifier la facture',
      html: `
        <div style="text-align: left; padding: 1rem;">
          <div style="margin-bottom: 1rem;">
            <label style="display: block; margin-bottom: 0.5rem; font-weight: 600;">N° Facture *</label>
            <input id="swal-numero" type="text" class="swal2-input" value="${facture.numeroFacture}" style="width: 90%;">
          </div>
          
          <div style="margin-bottom: 1rem;">
            <label style="display: block; margin-bottom: 0.5rem; font-weight: 600;">Client *</label>
            <input id="swal-client" type="text" class="swal2-input" value="${facture.client}" style="width: 90%;">
          </div>
          
          <div style="margin-bottom: 1rem;">
            <label style="display: block; margin-bottom: 0.5rem; font-weight: 600;">Date de vente *</label>
            <input id="swal-date" type="date" class="swal2-input" value="${this.formatDate(facture.dateVente)}" style="width: 90%;">
          </div>
          
          <div style="margin-bottom: 1rem;">
            <label style="display: block; margin-bottom: 0.5rem; font-weight: 600;">Montant total (DT) *</label>
            <input id="swal-montant" type="number" class="swal2-input" value="${facture.montantTotal}" step="0.01" min="0" style="width: 90%;">
          </div>
          
          <div style="margin-bottom: 1rem;">
            <label style="display: block; margin-bottom: 0.5rem; font-weight: 600;">Détails</label>
            <textarea id="swal-details" class="swal2-textarea" style="width: 90%;">${facture.details || ''}</textarea>
          </div>
        </div>
      `,
      focusConfirm: false,
      showCancelButton: true,
      confirmButtonText: 'Modifier',
      cancelButtonText: 'Annuler',
      confirmButtonColor: '#f59e0b',
      width: '600px',
      preConfirm: () => {
        const numero = (document.getElementById('swal-numero') as HTMLInputElement).value;
        const client = (document.getElementById('swal-client') as HTMLInputElement).value;
        const date = (document.getElementById('swal-date') as HTMLInputElement).value;
        const montant = parseFloat((document.getElementById('swal-montant') as HTMLInputElement).value);
        const details = (document.getElementById('swal-details') as HTMLTextAreaElement).value;

        return { numero, client, date, montant, details };
      }
    });

    if (formValues) {
      try {
        this.alertService.loading('Modification...');
        
        await this.factureService.updateFacture(facture.id!, {
          numeroFacture: formValues.numero,
          client: formValues.client,
          dateVente: new Date(formValues.date),
          montantTotal: formValues.montant,
          details: formValues.details || undefined
        });
        
        this.alertService.close();
        this.alertService.success('Facture modifiée!');
      } catch (error) {
        console.error('Erreur:', error);
        this.alertService.close();
        this.alertService.error('Erreur lors de la modification');
      }
    }
  }

  async supprimerFacture(facture: FactureVente): Promise<void> {
    const confirmed = await this.alertService.confirmDelete(
      `la facture ${facture.numeroFacture} (${facture.montantTotal} DT)`
    );

    if (confirmed) {
      try {
        this.alertService.loading('Suppression...');
        await this.factureService.deleteFacture(facture.id!);
        this.alertService.close();
        this.alertService.toast('Facture supprimée', 'success');
      } catch (error) {
        console.error('Erreur:', error);
        this.alertService.close();
        this.alertService.error('Erreur lors de la suppression');
      }
    }
  }

  getTodayDate(): string {
    const today = new Date();
    const year = today.getFullYear();
    const month = String(today.getMonth() + 1).padStart(2, '0');
    const day = String(today.getDate()).padStart(2, '0');
    return `${year}-${month}-${day}`;
  }

  formatDate(date: any): string {
    if (date?.toDate) return date.toDate().toISOString().split('T')[0];
    if (date instanceof Date) return date.toISOString().split('T')[0];
    return '';
  }

  formatDisplayDate(date: any): string {
    if (date?.toDate) {
      return date.toDate().toLocaleDateString('fr-FR');
    }
    if (date instanceof Date) {
      return date.toLocaleDateString('fr-FR');
    }
    return '';
  }
}

====================================
FICHIER: ./src/app/sorties/form/sorties-form.component.ts
Lignes:        1
====================================



====================================
FICHIER: ./src/app/sorties/list/sorties-list.component.ts
Lignes:        1
====================================



====================================
FICHIER: ./src/app/sorties/pointage/pointage.component.ts
Lignes:      286
====================================

import { Component, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { ActivatedRoute, RouterModule } from '@angular/router';
import { FormsModule } from '@angular/forms';
import { TranslateModule, TranslateService } from '@ngx-translate/core';
import Swal from 'sweetalert2';

import { PointageService } from '../../services/pointage.service';
import { MarinService } from '../../services/marin.service';
import { SortieService } from '../../services/sortie.service';
import { AlertService } from '../../services/alert.service';

import { Pointage } from '../../models/pointage.model';
import { Marin } from '../../models/marin.model';
import { Sortie } from '../../models/sortie.model';

import { switchMap, take } from 'rxjs/operators';
import { of, combineLatest } from 'rxjs';

@Component({
  selector: 'app-pointage',
  standalone: true,
  imports: [CommonModule, TranslateModule, RouterModule, FormsModule],
  templateUrl: './pointage.component.html',
  styleUrls: ['./pointage.component.scss']
})
export class PointageComponent implements OnInit {
  sortieId!: string;
  sortie?: Sortie;
  marins: Marin[] = [];
  pointages: Pointage[] = [];
  loading = true;
  errorMessage = '';

  constructor(
    private route: ActivatedRoute,
    private marinService: MarinService,
    private pointageService: PointageService,
    private sortieService: SortieService,
    private alertService: AlertService,
    private translate: TranslateService // ✅ Ajout du service de traduction
  ) {}

  ngOnInit(): void {
    this.sortieId = this.route.snapshot.paramMap.get('id')!;
    this.loadData();
  }

  loadData(): void {
    this.sortieService.getSortie(this.sortieId)
      .pipe(
        take(1),
        switchMap((sortie) => {
          if (!sortie) {
            this.errorMessage = 'Sortie introuvable';
            return of([[], []] as [Marin[], Pointage[]]);
          }
          
          if (!sortie.bateauId) {
            this.errorMessage = 'Aucun bateau associé à cette sortie';
            return of([[], []] as [Marin[], Pointage[]]);
          }
          
          this.sortie = sortie;
          
          return combineLatest([
            this.marinService.getMarinsByBateau(sortie.bateauId),
            this.pointageService.getPointagesBySortie(this.sortieId)
          ]);
        })
      )
      .subscribe({
        next: ([marins, pointages]) => {
          this.marins = marins;
          this.pointages = pointages;
          
          if (marins.length === 0) {
            this.errorMessage = 'Aucun marin affecté à ce bateau';
          }
          
          this.loading = false;
        },
        error: (error) => {
          console.error('❌ Erreur chargement:', error);
          this.errorMessage = 'Erreur lors du chargement des données';
          this.alertService.error('Erreur lors du chargement des données');
          this.loading = false;
        }
      });
  }

  async addNewMarin(): Promise<void> {
    if (!this.sortie?.bateauId) {
      this.alertService.error('Aucun bateau associé à cette sortie');
      return;
    }

    // ✅ Récupération des traductions
    const translations = {
      title: this.translate.instant('SAILORS.ADD_NEW_SAILOR'),
      lastname: this.translate.instant('SAILORS.LASTNAME'),
      firstname: this.translate.instant('SAILORS.FIRSTNAME'),
      function: this.translate.instant('SAILORS.FUNCTION'),
      selectFunction: this.translate.instant('SAILORS.SELECT_FUNCTION'),
      phone: this.translate.instant('SAILORS.PHONE'),
      birthdate: this.translate.instant('SAILORS.BIRTHDATE'),
      captain: this.translate.instant('SAILORS.CAPITAINE'),
      second: this.translate.instant('SAILORS.SECOND'),
      mechanic: this.translate.instant('SAILORS.MECANICIEN'),
      sailor: this.translate.instant('SAILORS.MATELOT'),
      add: this.translate.instant('FORM.ADD'),
      cancel: this.translate.instant('FORM.CANCEL'),
      requiredFields: this.translate.instant('FORM.REQUIRED_FIELDS'),
      placeholderLastname: this.translate.instant('SAILORS.PLACEHOLDER.LASTNAME'),
      placeholderFirstname: this.translate.instant('SAILORS.PLACEHOLDER.FIRSTNAME'),
      placeholderPhone: this.translate.instant('SAILORS.PLACEHOLDER.PHONE')
    };

    const { value: formValues } = await Swal.fire({
      title: translations.title,
      html: `
        <div style="text-align: left; padding: 1rem;">
          <div style="margin-bottom: 1rem;">
            <label style="display: block; margin-bottom: 0.5rem; font-weight: 600;">${translations.lastname} *</label>
            <input id="swal-nom" class="swal2-input" placeholder="${translations.placeholderLastname}" style="width: 90%;">
          </div>
          
          <div style="margin-bottom: 1rem;">
            <label style="display: block; margin-bottom: 0.5rem; font-weight: 600;">${translations.firstname} *</label>
            <input id="swal-prenom" class="swal2-input" placeholder="${translations.placeholderFirstname}" style="width: 90%;">
          </div>
          
          <div style="margin-bottom: 1rem;">
            <label style="display: block; margin-bottom: 0.5rem; font-weight: 600;">${translations.function} *</label>
            <select id="swal-fonction" class="swal2-input" style="width: 90%;">
              <option value="">${translations.selectFunction}</option>
              <option value="capitaine">${translations.captain}</option>
              <option value="second">${translations.second}</option>
              <option value="mecanicien">${translations.mechanic}</option>
              <option value="matelot">${translations.sailor}</option>
            </select>
          </div>
          
          <div style="margin-bottom: 1rem;">
            <label style="display: block; margin-bottom: 0.5rem; font-weight: 600;">${translations.phone}</label>
            <input id="swal-phone" class="swal2-input" placeholder="${translations.placeholderPhone}" style="width: 90%;">
          </div>
          
          <div style="margin-bottom: 1rem;">
            <label style="display: block; margin-bottom: 0.5rem; font-weight: 600;">${translations.birthdate} *</label>
            <input id="swal-birthdate" type="date" class="swal2-input" style="width: 90%;">
          </div>
        </div>
      `,
      focusConfirm: false,
      showCancelButton: true,
      confirmButtonText: translations.add,
      cancelButtonText: translations.cancel,
      confirmButtonColor: '#3b82f6',
      cancelButtonColor: '#6b7280',
      width: '600px',
      preConfirm: () => {
        const nom = (document.getElementById('swal-nom') as HTMLInputElement).value;
        const prenom = (document.getElementById('swal-prenom') as HTMLInputElement).value;
        const fonction = (document.getElementById('swal-fonction') as HTMLSelectElement).value;
        const phone = (document.getElementById('swal-phone') as HTMLInputElement).value;
        const birthdate = (document.getElementById('swal-birthdate') as HTMLInputElement).value;

        if (!nom || !prenom || !fonction || !birthdate) {
          Swal.showValidationMessage(translations.requiredFields);
          return false;
        }

        return { nom, prenom, fonction, phone, birthdate };
      }
    });

    if (formValues) {
      try {
        this.alertService.loading(this.translate.instant('MESSAGES.ADDING_SAILOR'));

        const newMarin: Omit<Marin, 'id'> = {
          nom: formValues.nom,
          prenom: formValues.prenom,
          fonction: formValues.fonction as 'capitaine' | 'second' | 'mecanicien' | 'matelot',
          telephone: formValues.phone || '',
          dateNaissance: new Date(formValues.birthdate),
          bateauId: this.sortie!.bateauId,
          email: '',
          numeroPermis: '',
          dateEmbauche: new Date(),
          adresse: '',
          statut: 'actif'
        };

        await this.marinService.addMarin(newMarin);
        
        this.alertService.close();
        const successMsg = this.translate.instant('MESSAGES.SAILOR_ADDED_SUCCESS', {
          name: `${formValues.prenom} ${formValues.nom}`
        });
        await this.alertService.success(successMsg);
        
        this.loadData();
      } catch (error) {
        console.error('Erreur lors de l\'ajout du marin:', error);
        this.alertService.close();
        this.alertService.error('Erreur lors de l\'ajout du marin');
      }
    }
  }

  get nombrePresents(): number {
    return this.pointages.filter(p => p.present === true).length;
  }

  get nombreAbsents(): number {
    return this.marins.length - this.nombrePresents;
  }

  isPresent(marinId: string): boolean {
    const p = this.pointages.find(pointage => pointage.marinId === marinId);
    return p ? p.present : false;
  }

  async togglePresence(marinId: string, event: Event): Promise<void> {
    const isChecked = (event.target as HTMLInputElement).checked;
    const existingPointage = this.pointages.find(p => p.marinId === marinId);

    try {
      if (existingPointage && existingPointage.id) {
        await this.pointageService.updatePointage(existingPointage.id, {
          present: isChecked,
          datePointage: new Date()
        });
        
        existingPointage.present = isChecked;
        existingPointage.datePointage = new Date();
      } else {
        const newPointage: Omit<Pointage, 'id'> = {
          sortieId: this.sortieId,
          marinId: marinId,
          present: isChecked,
          datePointage: new Date()
        };
        
        const result = await this.pointageService.addPointage(newPointage);
        
        this.pointages.push({
          ...newPointage,
          id: result.id
        } as Pointage);
      }

      this.alertService.toast(
        isChecked ? 'Présence enregistrée' : 'Absence enregistrée',
        'success'
      );
    } catch (error) {
      console.error('❌ Erreur lors du pointage:', error);
      this.alertService.error('Erreur lors de l\'enregistrement du pointage');
    }
  }

  getObservations(marinId: string): string {
    const p = this.pointages.find(pointage => pointage.marinId === marinId);
    return p?.observations || '';
  }

  async updateObservations(marinId: string, observations: string): Promise<void> {
    const existingPointage = this.pointages.find(p => p.marinId === marinId);
    
    if (existingPointage && existingPointage.id) {
      try {
        await this.pointageService.updatePointage(existingPointage.id, {
          observations: observations
        });
        existingPointage.observations = observations;
        this.alertService.toast('Observations mises à jour', 'success');
      } catch (error) {
        console.error('Erreur mise à jour observations:', error);
        this.alertService.error('Erreur lors de la mise à jour');
      }
    }
  }
}

====================================
FICHIER: ./src/app/sorties/salaires/salaires.component.ts
Lignes:      258
====================================

import { Component, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { ActivatedRoute, RouterModule } from '@angular/router';
import { TranslateModule, TranslateService } from '@ngx-translate/core';
import Swal from 'sweetalert2';

import { SalaireService } from '../../services/salaire.service';
import { MarinService } from '../../services/marin.service';
import { SortieService } from '../../services/sortie.service';
import { AvanceService } from '../../services/avance.service';
import { DepenseService } from '../../services/depense.service'; // ✅ CORRECTION: DepenseService au lieu de ExpenseService
import { AlertService } from '../../services/alert.service';

import { CalculSalaire, DetailSalaireMarin } from '../../models/salaire.model';
import { Marin } from '../../models/marin.model';
import { Sortie } from '../../models/sortie.model';
import { Depense } from '../../models/depense.model'; // ✅ AJOUT: Import du modèle Depense

import { combineLatest } from 'rxjs';
import { take } from 'rxjs/operators';

@Component({
  selector: 'app-salaires',
  standalone: true,
  imports: [CommonModule, TranslateModule, RouterModule],
  templateUrl: './salaires.component.html',
  styleUrls: ['./salaires.component.scss']
})
export class SalairesComponent implements OnInit {
  sortieId!: string;
  sortie?: Sortie;
  marins: Marin[] = [];
  coefficients: { [marinId: string]: number } = {};
  calcul?: CalculSalaire;
  loading = true;

  constructor(
    private route: ActivatedRoute,
    private salaireService: SalaireService,
    private marinService: MarinService,
    private sortieService: SortieService,
    private avanceService: AvanceService,
    private depenseService: DepenseService, // ✅ CORRECTION: DepenseService
    private alertService: AlertService,
    private translate: TranslateService
  ) {}

  ngOnInit(): void {
    this.sortieId = this.route.snapshot.paramMap.get('id')!;
    this.loadData();
  }

  async loadData(): Promise<void> {
    this.sortieService.getSortie(this.sortieId).pipe(take(1)).subscribe(async sortie => {
      if (sortie && sortie.bateauId) {
        this.sortie = sortie;
        
        this.marinService.getMarinsByBateau(sortie.bateauId).pipe(take(1)).subscribe(async marins => {
          this.marins = marins;
          
          for (const marin of marins) {
            this.coefficients[marin.id!] = await this.salaireService.getCoefficient(marin.id!);
          }
          
          this.loading = false;
        });
      } else {
        this.loading = false;
      }
    });
  }

  async configureCoefficients(): Promise<void> {
    const marinsHtml = this.marins.map(marin => `
      <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 1rem; padding: 0.75rem; background: #f9fafb; border-radius: 0.5rem;">
        <span style="font-weight: 600;">${marin.prenom} ${marin.nom}</span>
        <input id="coeff-${marin.id}" type="number" value="${this.coefficients[marin.id!] || 0}" min="0" max="100" step="1" 
               style="width: 80px; padding: 0.5rem; border: 2px solid #e5e7eb; border-radius: 0.375rem; text-align: center;">
      </div>
    `).join('');

    const { value: confirmed } = await Swal.fire({
      title: 'Configuration des coefficients',
      html: `
        <div style="text-align: left; max-height: 400px; overflow-y: auto;">
          <p style="color: #6b7280; margin-bottom: 1rem;">Définissez le pourcentage de la part équipage pour chaque marin (total doit = 100%)</p>
          ${marinsHtml}
          <div style="margin-top: 1rem; padding: 1rem; background: #dbeafe; border-radius: 0.5rem;">
            <strong>Total: <span id="total-coeff">0</span>%</strong>
          </div>
        </div>
        <script>
          function updateTotal() {
            let total = 0;
            ${this.marins.map(m => `total += parseFloat(document.getElementById('coeff-${m.id}').value) || 0;`).join('')}
            document.getElementById('total-coeff').textContent = total.toFixed(0);
          }
          ${this.marins.map(m => `document.getElementById('coeff-${m.id}').addEventListener('input', updateTotal);`).join('')}
          updateTotal();
        </script>
      `,
      width: '600px',
      showCancelButton: true,
      confirmButtonText: 'Enregistrer',
      cancelButtonText: 'Annuler',
      confirmButtonColor: '#10b981',
      preConfirm: () => {
        const coeffs: { [key: string]: number } = {};
        let total = 0;
        
        for (const marin of this.marins) {
          const value = parseFloat((document.getElementById(`coeff-${marin.id}`) as HTMLInputElement).value) || 0;
          coeffs[marin.id!] = value;
          total += value;
        }
        
        if (Math.abs(total - 100) > 0.01) {
          Swal.showValidationMessage(`Le total doit être égal à 100% (actuellement: ${total.toFixed(0)}%)`);
          return false;
        }
        
        return coeffs;
      }
    });

    if (confirmed) {
      try {
        this.alertService.loading('Enregistrement...');
        
        for (const marinId in confirmed) {
          await this.salaireService.saveCoefficient(marinId, confirmed[marinId]);
          this.coefficients[marinId] = confirmed[marinId];
        }
        
        this.alertService.close();
        this.alertService.success('Coefficients enregistrés avec succès!');
      } catch (error) {
        console.error('Erreur:', error);
        this.alertService.error('Erreur lors de l\'enregistrement');
      }
    }
  }

  async calculerSalaires(): Promise<void> {
    if (!this.sortie) return;

    try {
      this.alertService.loading('Calcul des salaires en cours...');

      // 1. Récupérer le revenu total
      const revenuTotal = await this.getRevenuTotal();

      // 2. Récupérer les dépenses - ✅ CORRECTION: typage correct
      const depenses = await this.depenseService.getDepensesBySortie(this.sortieId).pipe(take(1)).toPromise();
      const totalDepenses = depenses?.reduce((sum: number, d: Depense) => sum + d.montant, 0) || 0;

      // 3. Calculer les parts
      const beneficeNet = revenuTotal - totalDepenses;
      const partProprietaire = beneficeNet * 0.5;
      const partEquipage = beneficeNet * 0.5;

      // 4. Calculer le nombre de nuits
      const nbNuits = this.calculerNombreNuits();
      const nbMarins = this.marins.length;
      const deductionNuits = nbNuits * nbMarins * 5;

      // 5. Montant à partager
      const montantAPartager = partEquipage - deductionNuits;

      // 6. Calculer pour chaque marin
      const detailsMarins: DetailSalaireMarin[] = [];

      for (const marin of this.marins) {
        const coefficient = this.coefficients[marin.id!] || 0;
        const salaireBase = (montantAPartager * coefficient) / 100;
        const primeNuits = nbNuits * 5;
        
        // Récupérer les avances
        const avances = await this.avanceService.getAvancesByMarin(marin.id!).pipe(take(1)).toPromise();
        const totalAvances = avances?.reduce((sum, a) => sum + a.montant, 0) || 0;
        
        const salaireNet = salaireBase + primeNuits - totalAvances;

        detailsMarins.push({
          marinId: marin.id!,
          marinNom: `${marin.prenom} ${marin.nom}`,
          coefficient,
          salaireBase,
          primenuits: primeNuits,
          avances: totalAvances,
          salaireNet
        });
      }

      // 7. Créer le calcul
      this.calcul = {
        sortieId: this.sortieId,
        dateCalcul: new Date(),
        revenuTotal,
        totalDepenses,
        partProprietaire,
        partEquipage,
        nbNuits,
        nbMarins,
        deductionNuits,
        montantAPartager,
        detailsMarins
      };

      // 8. Sauvegarder
      await this.salaireService.saveCalculSalaire(this.calcul);

      this.alertService.close();
      this.alertService.success('Salaires calculés avec succès!');

    } catch (error) {
      console.error('Erreur:', error);
      this.alertService.close();
      this.alertService.error('Erreur lors du calcul');
    }
  }

  private async getRevenuTotal(): Promise<number> {
    const { value } = await Swal.fire({
      title: 'Revenu total de la sortie',
      input: 'number',
      inputLabel: 'Montant en DT',
      inputPlaceholder: '0.00',
      showCancelButton: true,
      confirmButtonText: 'Continuer',
      cancelButtonText: 'Annuler'
    });

    return parseFloat(value) || 0;
  }

  private calculerNombreNuits(): number {
    if (!this.sortie?.dateDepart || !this.sortie?.dateRetour) return 0;

    const depart = this.sortie.dateDepart instanceof Date 
      ? this.sortie.dateDepart 
      : (this.sortie.dateDepart as any).toDate();
    
    const retour = this.sortie.dateRetour instanceof Date 
      ? this.sortie.dateRetour 
      : (this.sortie.dateRetour as any).toDate();

    const diffTime = Math.abs(retour.getTime() - depart.getTime());
    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
    
    return diffDays;
  }

  getMarinName(marinId: string): string {
    const marin = this.marins.find(m => m.id === marinId);
    return marin ? `${marin.prenom} ${marin.nom}` : '';
  }
}

====================================
FICHIER: ./src/app/sorties/sortie-details.component.ts
Lignes:       99
====================================

import { Component, OnInit } from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { Observable } from 'rxjs';
import { Location } from '@angular/common';

import { Sortie } from '../models/sortie.model';
import { SortieService } from '../services/sortie.service';
import { Facture } from '../models/facture.model';
import { FactureService } from '../services/facture.service';
import { Depense } from '../models/depense.model';
import { DepenseService } from '../services/depense.service';
import { AlertService } from '../services/alert.service';

@Component({
  selector: 'app-sortie-details',
  standalone: false,
  templateUrl: './sortie-details.component.html',
  styleUrls: ['./sortie-details.component.scss']
})
export class SortieDetailsComponent implements OnInit {
  sortie!: Observable<Sortie | undefined>;
  depenses!: Observable<Depense[]>;
  factures!: Observable<Facture[]>;
  sortieId!: string;

  constructor(
    private route: ActivatedRoute,
    private sortieService: SortieService,
    private factureService: FactureService,
    private depenseService: DepenseService,
    private alertService: AlertService,
    private router: Router,
    private location: Location
  ) {}

  ngOnInit(): void {
    this.sortieId = this.route.snapshot.paramMap.get('id')!;
    if (this.sortieId) {
      this.sortie = this.sortieService.getSortie(this.sortieId);
      this.loadFactures();
      this.loadDepenses();
    }
  }

  loadFactures(): void {
    this.factures = this.factureService.getFacturesBySortie(this.sortieId);
  }

  goBack(): void {
    this.location.back();
  }

  formatDate(date: any): string {
    if (!date) return '-';
    const d = date.toDate ? date.toDate() : new Date(date);
    return new Intl.DateTimeFormat('fr-FR').format(d);
  }

  loadDepenses(): void {
    this.depenses = this.depenseService.getDepensesBySortie(this.sortieId);
  }

  addDepense(): void {
    this.router.navigate(['/dashboard/sorties/details', this.sortieId, 'depenses', 'add']);
  }

  editDepense(depenseId: string): void {
    this.router.navigate(['/dashboard/sorties/details', this.sortieId, 'depenses', 'edit', depenseId]);
  }

  async deleteDepense(depense: Depense): Promise<void> {
    if (!depense.id) return;
    
    const confirmed = await this.alertService.confirmDelete(`la dépense de type ${depense.type}`);
    if (confirmed) {
      try {
        await this.depenseService.deleteDepense(depense.id);
        this.alertService.toast('Dépense supprimée avec succès', 'success');
      } catch (error) {
        this.alertService.error('Erreur lors de la suppression');
        console.error(error);
      }
    }
  }

  getExpenseTypeName(type: string): string {
    const types: any = {
      'fuel': 'Carburant',
      'ice': 'Glace',
      'oilchange': 'Vidange',
      'crewcnss': 'CNSS Équipage',
      'crewbonus': 'Prime Équipage',
      'food': 'Alimentation',
      'vms': 'VMS',
      'misc': 'Divers'
    };
    return types[type] || type;
  }
}

====================================
FICHIER: ./src/app/sorties/sortie-form.component.ts
Lignes:      124
====================================

import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { ActivatedRoute, Router } from '@angular/router';
import { SelectedBoatService } from '../services/selected-boat.service';
import { SortieService } from '../services/sortie.service';
import { AlertService } from '../services/alert.service';
import { Bateau } from '../models/bateau.model';

@Component({
  standalone: false,
  selector: 'app-sortie-form',
  templateUrl: './sortie-form.component.html',
  styleUrls: ['./sortie-form.component.scss']
})
export class SortieFormComponent implements OnInit {
  form!: FormGroup;
  isEditMode = false;
  id?: string;
  loading = false;
  selectedBoat: Bateau | null = null;

  constructor(
    private fb: FormBuilder,
    private sortieService: SortieService,
    private alertService: AlertService,
    private route: ActivatedRoute,
    private router: Router,
    private selectedBoatService: SelectedBoatService
  ) {}

  ngOnInit(): void {
    this.id = this.route.snapshot.paramMap.get('id') ?? undefined;
    this.isEditMode = !!this.id;
    
    // Récupérer le bateau sélectionné
    this.selectedBoat = this.selectedBoatService.getSelectedBoat();
    
    if (!this.selectedBoat && !this.isEditMode) {
      this.alertService.error('Veuillez d\'abord sélectionner un bateau');
      this.router.navigate(['/dashboard/bateaux']);
      return;
    }
    
    this.form = this.fb.group({
      bateauId: [this.selectedBoat?.id || '', Validators.required],
      destination: ['', Validators.required],
      dateDepart: ['', Validators.required],
      dateRetour: ['', Validators.required],
      statut: ['en-cours', Validators.required],
      observations: ['']
    });

    // Désactiver le champ bateau (il est automatiquement sélectionné)
    this.form.get('bateauId')?.disable();

    if (this.isEditMode) {
      this.loadSortie();
    }
  }

  loadSortie(): void {
    this.sortieService.getSortie(this.id!).subscribe(sortie => {
      this.form.patchValue({
        ...sortie,
        dateDepart: this.formatDate(sortie.dateDepart),
        dateRetour: this.formatDate(sortie.dateRetour)
      });
    });
  }

  formatDate(date: any): string {
    if (date?.toDate) {
      return date.toDate().toISOString().split('T')[0];
    }
    if (date instanceof Date) {
      return date.toISOString().split('T')[0];
    }
    return '';
  }

  async onSubmit(): Promise<void> {
    if (this.form.valid) {
      this.loading = true;
      this.alertService.loading('Enregistrement en cours...');

      const data = {
        ...this.form.getRawValue(),  // getRawValue() pour inclure les champs désactivés
        dateDepart: new Date(this.form.value.dateDepart),
        dateRetour: new Date(this.form.value.dateRetour)
      };

      try {
        if (this.isEditMode) {
          await this.sortieService.updateSortie(this.id!, data);
          this.alertService.close();
          await this.alertService.success('La sortie a été modifiée avec succès', 'Modification réussie!');
        } else {
          await this.sortieService.addSortie(data);
          this.alertService.close();
          await this.alertService.success('La sortie a été ajoutée avec succès', 'Ajout réussi!');
        }
        this.router.navigate(['/dashboard/sorties']);
      } catch (error) {
        this.alertService.close();
        this.alertService.error('Erreur lors de l\'enregistrement');
      } finally {
        this.loading = false;
      }
    } else {
      this.markFormGroupTouched(this.form);
      this.alertService.warning('Veuillez remplir tous les champs requis', 'Formulaire incomplet');
    }
  }

  markFormGroupTouched(formGroup: FormGroup): void {
    Object.keys(formGroup.controls).forEach(key => {
      formGroup.get(key)?.markAsTouched();
    });
  }

  cancel(): void {
    this.router.navigate(['/dashboard/sorties']);
  }
}

====================================
FICHIER: ./src/app/sorties/sorties-list.component.ts
Lignes:       74
====================================

import { Component, OnInit } from '@angular/core';
import { Router } from '@angular/router';
import { Observable } from 'rxjs';
import { SortieService } from '../services/sortie.service';
import { SelectedBoatService } from '../services/selected-boat.service';
import { AlertService } from '../services/alert.service';
import { Sortie } from '../models/sortie.model';
import { Bateau } from '../models/bateau.model';

@Component({
  selector: 'app-sorties-list',
  templateUrl: './sorties-list.component.html',
  styleUrls: ['./sorties-list.component.scss'],
  standalone: false
})
export class SortiesListComponent implements OnInit {
  sorties$!: Observable<Sortie[]>;  // ⬅️ Renommé avec $
  selectedBoat: Bateau | null = null;

  constructor(
    private sortieService: SortieService,
    private selectedBoatService: SelectedBoatService,
    private alertService: AlertService,
    private router: Router
  ) {}

  ngOnInit(): void {
    this.selectedBoat = this.selectedBoatService.getSelectedBoat();
    
    if (this.selectedBoat?.id) {
      this.sorties$ = this.sortieService.getSortiesByBateau(this.selectedBoat.id);
      console.log('🚢 Chargement des sorties pour:', this.selectedBoat.nom);
    } else {
      console.warn('⚠️ Aucun bateau sélectionné');
      this.alertService.warning('Veuillez d\'abord sélectionner un bateau');
      this.router.navigate(['/dashboard/bateaux']);
    }
  }

  formatDate(date: any): string {
    if (!date) return '';
    if (date.toDate) return date.toDate().toLocaleDateString('fr-FR');
    if (date instanceof Date) return date.toLocaleDateString('fr-FR');
    return String(date);
  }

  getStatutClass(statut: string): string {
    return `status-${statut}`;
  }

  addSortie(): void {
    this.router.navigate(['/dashboard/sorties/add']);
  }

  editSortie(id: string): void {
    this.router.navigate(['/dashboard/sorties/edit', id]);
  }

  async deleteSortie(sortie: Sortie): Promise<void> {
    const confirmed = await this.alertService.confirmDelete(`la sortie ${sortie.destination}`);
    if (confirmed && sortie.id) {
      try {
        await this.sortieService.deleteSortie(sortie.id);
        this.alertService.toast('Sortie supprimée avec succès', 'success');
      } catch (error) {
        this.alertService.error('Erreur lors de la suppression');
      }
    }
  }

  viewDetails(id: string): void {
    this.router.navigate(['/dashboard/sorties/details', id]);
  }
}

====================================
FICHIER: ./src/app/sorties/sorties-routing.module.ts
Lignes:       21
====================================

import { NgModule } from '@angular/core';
import { RouterModule, Routes } from '@angular/router';
import { SortiesListComponent } from './sorties-list.component';
import { SortieDetailsComponent } from './sortie-details.component';
import { PointageComponent } from './pointage/pointage.component';
import { SalairesComponent } from './salaires/salaires.component';
import { FacturesComponent } from './factures/factures.component';

const routes: Routes = [
  { path: '', component: SortiesListComponent },
  { path: 'details/:id', component: SortieDetailsComponent },
  { path: 'pointage/:id', component: PointageComponent },
  { path: 'salaires/:id', component: SalairesComponent },
  { path: 'factures/:id', component: FacturesComponent }
];

@NgModule({
  imports: [RouterModule.forChild(routes)],
  exports: [RouterModule]
})
export class SortiesRoutingModule { }

====================================
FICHIER: ./src/app/sorties/sorties.module.ts
Lignes:       42
====================================

import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { ReactiveFormsModule, FormsModule } from '@angular/forms';
import { RouterModule, Routes } from '@angular/router';
import { TranslateModule } from '@ngx-translate/core';

// Composants NON-standalone
import { SortiesListComponent } from './sorties-list.component';
import { SortieFormComponent } from './sortie-form.component';
import { SortieDetailsComponent } from './sortie-details.component';

// Composants STANDALONE
import { DepenseFormComponent } from './depense-form/depense-form.component';
import { PointageComponent } from './pointage/pointage.component';

const routes: Routes = [
  { path: '', component: SortiesListComponent },
  { path: 'add', component: SortieFormComponent },
  { path: 'edit/:id', component: SortieFormComponent },
  { path: 'details/:id', component: SortieDetailsComponent },
  { path: 'details/:id/depenses/add', component: DepenseFormComponent },
  { path: 'details/:id/depenses/edit/:depenseId', component: DepenseFormComponent },
  { path: 'details/:id/pointage', component: PointageComponent }
];

@NgModule({
  declarations: [
    SortiesListComponent,
    SortieFormComponent,
    SortieDetailsComponent
  ],
  imports: [
    CommonModule,
    ReactiveFormsModule,
    FormsModule,
    RouterModule.forChild(routes),
    TranslateModule,
    DepenseFormComponent,
    PointageComponent
  ]
})
export class SortiesModule { }

====================================
FICHIER: ./src/app/ventes/ventes-list.component.ts
Lignes:      575
====================================

import { Component, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { TranslateModule, TranslateService } from '@ngx-translate/core';
import Swal from 'sweetalert2';

import { SortieService } from '../services/sortie.service';
import { FactureVenteService } from '../services/facture-vente.service';
import { SelectedBoatService } from '../services/selected-boat.service';
import { AlertService } from '../services/alert.service';

import { Sortie } from '../models/sortie.model';
import { Bateau } from '../models/bateau.model';
import { FactureVente } from '../models/facture-vente.model';

import { combineLatest } from 'rxjs';

interface SortieWithFactures {
  sortie: Sortie;
  factures: FactureVente[];
  totalVentes: number;
}

@Component({
  selector: 'app-ventes-list',
  standalone: true,
  imports: [CommonModule, TranslateModule],
  templateUrl: './ventes-list.component.html',
  styleUrls: ['./ventes-list.component.scss']
})
export class VentesListComponent implements OnInit {
  selectedBoat: Bateau | null = null;
  sortiesWithFactures: SortieWithFactures[] = [];
  loading = true;

  constructor(
    private sortieService: SortieService,
    private factureService: FactureVenteService,
    private selectedBoatService: SelectedBoatService,
    private alertService: AlertService,
    private translate: TranslateService
  ) {}

  ngOnInit(): void {
    this.selectedBoat = this.selectedBoatService.getSelectedBoat();
    
    if (this.selectedBoat) {
      this.loadData();
    } else {
      this.loading = false;
    }
  }

  loadData(): void {
    if (!this.selectedBoat) return;

    this.sortieService.getSortiesByBateau(this.selectedBoat.id!).subscribe((sorties: Sortie[]) => {
      const facturesObservables = sorties.map(sortie =>
        this.factureService.getFacturesBySortie(sortie.id!)
      );

      combineLatest(facturesObservables).subscribe((allFactures: FactureVente[][]) => {
        this.sortiesWithFactures = sorties.map((sortie, index) => {
          const factures = allFactures[index];
          const totalVentes = factures.reduce((sum, f) => sum + f.montantTotal, 0);
          
          return {
            sortie,
            factures,
            totalVentes
          };
        });

        this.loading = false;
      });
    });
  }

  getTotalGeneral(): number {
    return this.sortiesWithFactures.reduce((sum, s) => sum + s.totalVentes, 0);
  }

  // ✅ NOUVELLE MÉTHODE: Ajouter facture avec sélection de sortie
  async ajouterFactureGlobale(): Promise<void> {
    if (this.sortiesWithFactures.length === 0) {
      this.alertService.error('Aucune sortie en mer disponible');
      return;
    }

    // Créer les options de sorties
    const sortiesOptions = this.sortiesWithFactures.reduce((acc, item) => {
      const dateDepart = this.formatDisplayDate(item.sortie.dateDepart);
      const dateRetour = this.formatDisplayDate(item.sortie.dateRetour);
      acc[item.sortie.id!] = `${item.sortie.destination} (${dateDepart} - ${dateRetour})`;
      return acc;
    }, {} as any);

    const { value: formValues } = await Swal.fire({
      title: `<div style="text-align: center;">
                <div style="font-size: 1.5rem; font-weight: 700; color: #1f2937; margin-bottom: 0.5rem;">
                  Nouvelle facture de vente
                </div>
              </div>`,
      html: `
        <style>
          .facture-form {
            text-align: left;
            padding: 1rem 0;
          }
          .form-group {
            margin-bottom: 1.25rem;
          }
          .form-label {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            margin-bottom: 0.625rem;
            font-weight: 600;
            color: #374151;
            font-size: 0.9rem;
          }
          .form-label svg {
            width: 18px;
            height: 18px;
            color: #10b981;
          }
          .required-star {
            color: #ef4444;
            font-weight: 700;
          }
          .custom-input, .custom-textarea, .custom-select {
            width: 100%;
            padding: 0.75rem 0.875rem;
            border: 2px solid #e5e7eb;
            border-radius: 0.5rem;
            font-size: 0.95rem;
            transition: all 0.3s;
            font-family: inherit;
            background: white;
          }
          .custom-input:focus, .custom-textarea:focus, .custom-select:focus {
            outline: none;
            border-color: #10b981;
            box-shadow: 0 0 0 3px rgba(16, 185, 129, 0.1);
          }
          .custom-textarea {
            resize: vertical;
            min-height: 80px;
          }
          .input-helper {
            display: flex;
            align-items: center;
            gap: 0.4rem;
            margin-top: 0.4rem;
            font-size: 0.8rem;
            color: #6b7280;
          }
        </style>
        <div class="facture-form">
          <!-- ✅ SÉLECTION DE SORTIE -->
          <div class="form-group">
            <label class="form-label">
              <svg fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2"/>
              </svg>
              Sortie en mer <span class="required-star">*</span>
            </label>
            <select id="swal-sortie" class="custom-select">
              <option value="">Sélectionner une sortie</option>
              ${Object.keys(sortiesOptions).map(id => 
                `<option value="${id}">${sortiesOptions[id]}</option>`
              ).join('')}
            </select>
          </div>

          <div class="form-group">
            <label class="form-label">
              <svg fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 20l4-16m2 16l4-16M6 9h14M4 15h14"/>
              </svg>
              N° Facture <span class="required-star">*</span>
            </label>
            <input id="swal-numero" type="text" class="custom-input" placeholder="Ex: F-001" autocomplete="off">
            <div class="input-helper">Numéro unique de la facture</div>
          </div>
          
          <div class="form-group">
            <label class="form-label">
              <svg fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"/>
              </svg>
              Client <span class="required-star">*</span>
            </label>
            <input id="swal-client" type="text" class="custom-input" placeholder="Nom du client" autocomplete="off">
          </div>
          
          <div class="form-group">
            <label class="form-label">
              <svg fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/>
              </svg>
              Date de vente <span class="required-star">*</span>
            </label>
            <input id="swal-date" type="date" class="custom-input" value="${this.getTodayDate()}">
          </div>
          
          <div class="form-group">
            <label class="form-label">
              <svg fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1M21 12a9 9 0 11-18 0 9 9 0 0118 0z"/>
              </svg>
              Montant total (DT) <span class="required-star">*</span>
            </label>
            <input id="swal-montant" type="number" class="custom-input" placeholder="0.00" step="0.01" min="0" autocomplete="off">
            <div class="input-helper">Montant en dinars tunisiens</div>
          </div>
          
          <div class="form-group">
            <label class="form-label">
              <svg fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 8h10M7 12h4m1 8l-4-4H5a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v8a2 2 0 01-2 2h-3l-4 4z"/>
              </svg>
              Détails (poissons vendus)
            </label>
            <textarea id="swal-details" class="custom-textarea" placeholder="Ex: 50 kg de dorade, 30 kg de loup, 20 kg de rouget..."></textarea>
          </div>
        </div>
      `,
      focusConfirm: false,
      showCancelButton: true,
      confirmButtonText: 'Ajouter la facture',
      cancelButtonText: 'Annuler',
      confirmButtonColor: '#10b981',
      cancelButtonColor: '#6b7280',
      width: '650px',
      preConfirm: () => {
        const sortieId = (document.getElementById('swal-sortie') as HTMLSelectElement).value;
        const numero = (document.getElementById('swal-numero') as HTMLInputElement).value.trim();
        const client = (document.getElementById('swal-client') as HTMLInputElement).value.trim();
        const date = (document.getElementById('swal-date') as HTMLInputElement).value;
        const montant = parseFloat((document.getElementById('swal-montant') as HTMLInputElement).value);
        const details = (document.getElementById('swal-details') as HTMLTextAreaElement).value.trim();

        if (!sortieId) {
          Swal.showValidationMessage('Veuillez sélectionner une sortie en mer');
          return false;
        }

        if (!numero || !client || !date || !montant) {
          Swal.showValidationMessage('Veuillez remplir tous les champs obligatoires');
          return false;
        }

        if (montant <= 0) {
          Swal.showValidationMessage('Le montant doit être supérieur à 0');
          return false;
        }

        return { sortieId, numero, client, date, montant, details };
      }
    });

    if (formValues) {
      try {
        this.alertService.loading('Ajout de la facture...');

        const newFacture: Omit<FactureVente, 'id'> = {
          sortieId: formValues.sortieId,
          numeroFacture: formValues.numero,
          client: formValues.client,
          dateVente: new Date(formValues.date),
          montantTotal: formValues.montant,
          details: formValues.details || undefined
        };

        await this.factureService.addFacture(newFacture);
        
        this.alertService.close();
        this.alertService.success('Facture ajoutée avec succès!');
      } catch (error) {
        console.error('Erreur:', error);
        this.alertService.close();
        this.alertService.error('Erreur lors de l\'ajout');
      }
    }
  }

  // Méthode existante pour ajouter avec sortie présélectionnée
  async ajouterFacture(sortie: Sortie): Promise<void> {
    const { value: formValues } = await Swal.fire({
      title: `<div style="text-align: center;">
                <div style="font-size: 1.5rem; font-weight: 700; color: #1f2937; margin-bottom: 0.5rem;">
                  Nouvelle facture de vente
                </div>
                <div style="font-size: 0.875rem; color: #6b7280;">
                  ${sortie.destination}
                </div>
              </div>`,
      html: `
        <style>
          .facture-form {
            text-align: left;
            padding: 1rem 0;
          }
          .form-group {
            margin-bottom: 1.25rem;
          }
          .form-label {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            margin-bottom: 0.625rem;
            font-weight: 600;
            color: #374151;
            font-size: 0.9rem;
          }
          .form-label svg {
            width: 18px;
            height: 18px;
            color: #10b981;
          }
          .required-star {
            color: #ef4444;
            font-weight: 700;
          }
          .custom-input, .custom-textarea {
            width: 100%;
            padding: 0.75rem 0.875rem;
            border: 2px solid #e5e7eb;
            border-radius: 0.5rem;
            font-size: 0.95rem;
            transition: all 0.3s;
            font-family: inherit;
          }
          .custom-input:focus, .custom-textarea:focus {
            outline: none;
            border-color: #10b981;
            box-shadow: 0 0 0 3px rgba(16, 185, 129, 0.1);
          }
          .custom-textarea {
            resize: vertical;
            min-height: 80px;
          }
          .input-helper {
            display: flex;
            align-items: center;
            gap: 0.4rem;
            margin-top: 0.4rem;
            font-size: 0.8rem;
            color: #6b7280;
          }
        </style>
        <div class="facture-form">
          <div class="form-group">
            <label class="form-label">
              <svg fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 20l4-16m2 16l4-16M6 9h14M4 15h14"/>
              </svg>
              N° Facture <span class="required-star">*</span>
            </label>
            <input id="swal-numero" type="text" class="custom-input" placeholder="Ex: F-001" autocomplete="off">
            <div class="input-helper">Numéro unique de la facture</div>
          </div>
          
          <div class="form-group">
            <label class="form-label">
              <svg fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"/>
              </svg>
              Client <span class="required-star">*</span>
            </label>
            <input id="swal-client" type="text" class="custom-input" placeholder="Nom du client" autocomplete="off">
          </div>
          
          <div class="form-group">
            <label class="form-label">
              <svg fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/>
              </svg>
              Date de vente <span class="required-star">*</span>
            </label>
            <input id="swal-date" type="date" class="custom-input" value="${this.getTodayDate()}">
          </div>
          
          <div class="form-group">
            <label class="form-label">
              <svg fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1M21 12a9 9 0 11-18 0 9 9 0 0118 0z"/>
              </svg>
              Montant total (DT) <span class="required-star">*</span>
            </label>
            <input id="swal-montant" type="number" class="custom-input" placeholder="0.00" step="0.01" min="0" autocomplete="off">
            <div class="input-helper">Montant en dinars tunisiens</div>
          </div>
          
          <div class="form-group">
            <label class="form-label">
              <svg fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 8h10M7 12h4m1 8l-4-4H5a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v8a2 2 0 01-2 2h-3l-4 4z"/>
              </svg>
              Détails (poissons vendus)
            </label>
            <textarea id="swal-details" class="custom-textarea" placeholder="Ex: 50 kg de dorade, 30 kg de loup, 20 kg de rouget..."></textarea>
          </div>
        </div>
      `,
      focusConfirm: false,
      showCancelButton: true,
      confirmButtonText: 'Ajouter la facture',
      cancelButtonText: 'Annuler',
      confirmButtonColor: '#10b981',
      cancelButtonColor: '#6b7280',
      width: '600px',
      preConfirm: () => {
        const numero = (document.getElementById('swal-numero') as HTMLInputElement).value.trim();
        const client = (document.getElementById('swal-client') as HTMLInputElement).value.trim();
        const date = (document.getElementById('swal-date') as HTMLInputElement).value;
        const montant = parseFloat((document.getElementById('swal-montant') as HTMLInputElement).value);
        const details = (document.getElementById('swal-details') as HTMLTextAreaElement).value.trim();

        if (!numero || !client || !date || !montant) {
          Swal.showValidationMessage('Veuillez remplir tous les champs obligatoires');
          return false;
        }

        if (montant <= 0) {
          Swal.showValidationMessage('Le montant doit être supérieur à 0');
          return false;
        }

        return { numero, client, date, montant, details };
      }
    });

    if (formValues) {
      try {
        this.alertService.loading('Ajout de la facture...');

        const newFacture: Omit<FactureVente, 'id'> = {
          sortieId: sortie.id!,
          numeroFacture: formValues.numero,
          client: formValues.client,
          dateVente: new Date(formValues.date),
          montantTotal: formValues.montant,
          details: formValues.details || undefined
        };

        await this.factureService.addFacture(newFacture);
        
        this.alertService.close();
        this.alertService.success('Facture ajoutée avec succès!');
      } catch (error) {
        console.error('Erreur:', error);
        this.alertService.close();
        this.alertService.error('Erreur lors de l\'ajout');
      }
    }
  }

  async modifierFacture(facture: FactureVente): Promise<void> {
    const { value: formValues } = await Swal.fire({
      title: 'Modifier la facture',
      html: `
        <style>
          .facture-form { text-align: left; padding: 1rem 0; }
          .form-group { margin-bottom: 1.25rem; }
          .form-label { display: block; margin-bottom: 0.625rem; font-weight: 600; color: #374151; font-size: 0.9rem; }
          .custom-input, .custom-textarea { width: 100%; padding: 0.75rem 0.875rem; border: 2px solid #e5e7eb; border-radius: 0.5rem; font-size: 0.95rem; transition: all 0.3s; font-family: inherit; }
          .custom-input:focus, .custom-textarea:focus { outline: none; border-color: #f59e0b; box-shadow: 0 0 0 3px rgba(245, 158, 11, 0.1); }
          .custom-textarea { resize: vertical; min-height: 80px; }
        </style>
        <div class="facture-form">
          <div class="form-group">
            <label class="form-label">N° Facture</label>
            <input id="swal-numero" type="text" class="custom-input" value="${facture.numeroFacture}">
          </div>
          <div class="form-group">
            <label class="form-label">Client</label>
            <input id="swal-client" type="text" class="custom-input" value="${facture.client}">
          </div>
          <div class="form-group">
            <label class="form-label">Date de vente</label>
            <input id="swal-date" type="date" class="custom-input" value="${this.formatDate(facture.dateVente)}">
          </div>
          <div class="form-group">
            <label class="form-label">Montant total (DT)</label>
            <input id="swal-montant" type="number" class="custom-input" value="${facture.montantTotal}" step="0.01" min="0">
          </div>
          <div class="form-group">
            <label class="form-label">Détails</label>
            <textarea id="swal-details" class="custom-textarea">${facture.details || ''}</textarea>
          </div>
        </div>
      `,
      focusConfirm: false,
      showCancelButton: true,
      confirmButtonText: 'Modifier',
      cancelButtonText: 'Annuler',
      confirmButtonColor: '#f59e0b',
      width: '600px',
      preConfirm: () => {
        const numero = (document.getElementById('swal-numero') as HTMLInputElement).value.trim();
        const client = (document.getElementById('swal-client') as HTMLInputElement).value.trim();
        const date = (document.getElementById('swal-date') as HTMLInputElement).value;
        const montant = parseFloat((document.getElementById('swal-montant') as HTMLInputElement).value);
        const details = (document.getElementById('swal-details') as HTMLTextAreaElement).value.trim();

        return { numero, client, date, montant, details };
      }
    });

    if (formValues) {
      try {
        this.alertService.loading('Modification...');
        
        await this.factureService.updateFacture(facture.id!, {
          numeroFacture: formValues.numero,
          client: formValues.client,
          dateVente: new Date(formValues.date),
          montantTotal: formValues.montant,
          details: formValues.details || undefined
        });
        
        this.alertService.close();
        this.alertService.success('Facture modifiée!');
      } catch (error) {
        console.error('Erreur:', error);
        this.alertService.close();
        this.alertService.error('Erreur lors de la modification');
      }
    }
  }

  async supprimerFacture(facture: FactureVente): Promise<void> {
    const confirmed = await this.alertService.confirmDelete(
      `la facture ${facture.numeroFacture} (${facture.montantTotal} DT)`
    );

    if (confirmed) {
      try {
        this.alertService.loading('Suppression...');
        await this.factureService.deleteFacture(facture.id!);
        this.alertService.close();
        this.alertService.toast('Facture supprimée', 'success');
      } catch (error) {
        console.error('Erreur:', error);
        this.alertService.close();
        this.alertService.error('Erreur lors de la suppression');
      }
    }
  }

  getTodayDate(): string {
    const today = new Date();
    const year = today.getFullYear();
    const month = String(today.getMonth() + 1).padStart(2, '0');
    const day = String(today.getDate()).padStart(2, '0');
    return `${year}-${month}-${day}`;
  }

  formatDate(date: any): string {
    if (date?.toDate) return date.toDate().toISOString().split('T')[0];
    if (date instanceof Date) return date.toISOString().split('T')[0];
    return '';
  }

  formatDisplayDate(date: any): string {
    if (date?.toDate) {
      return date.toDate().toLocaleDateString('fr-FR');
    }
    if (date instanceof Date) {
      return date.toLocaleDateString('fr-FR');
    }
    return '';
  }
}

====================================
FICHIER: ./src/environments/environment.development.ts
Lignes:       11
====================================

export const environment = {
  production: true,
  firebase: {
    apiKey: "AIzaSyD_S9ybPNCkZk8EyWnT4icanywZ06A1SoE",
    authDomain: "lambara-teboulba.firebaseapp.com",
    projectId: "lambara-teboulba",
    storageBucket: "lambara-teboulba.firebasestorage.app",
    messagingSenderId: "396856756735",
    appId: "1:396856756735:web:ccd9952250e256ab763fca"
  }
};

====================================
FICHIER: ./src/environments/environment.ts
Lignes:       11
====================================

export const environment = {
  production: false,
  firebase: {
    apiKey: "AIzaSyD_S9ybPNCkZk8EyWnT4icanywZ06A1SoE",
    authDomain: "lambara-teboulba.firebaseapp.com",
    projectId: "lambara-teboulba",
    storageBucket: "lambara-teboulba.firebasestorage.app",
    messagingSenderId: "396856756735",
    appId: "1:396856756735:web:ccd9952250e256ab763fca"
  }
};

====================================
FICHIER: ./src/main.ts
Lignes:       12
====================================

import { enableProdMode } from '@angular/core';
import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';
import { AppModule } from './app/app.module';
import { environment } from './environments/environment';
import '@angular/compiler';  // Pour JIT dev (retirez en prod/AOT)

if (environment.production) {
  enableProdMode();
}

platformBrowserDynamic().bootstrapModule(AppModule)
  .catch(err => console.error(err));

====================================
FICHIER: ./src/app/app.component.html
Lignes:        0
====================================

<router-outlet />
====================================
FICHIER: ./src/app/app.html
Lignes:      342
====================================

<!-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * -->
<!-- * * * * * * * * * * * The content below * * * * * * * * * * * -->
<!-- * * * * * * * * * * is only a placeholder * * * * * * * * * * -->
<!-- * * * * * * * * * * and can be replaced.  * * * * * * * * * * -->
<!-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * -->
<!-- * * * * * * * * * Delete the template below * * * * * * * * * -->
<!-- * * * * * * * to get started with your project! * * * * * * * -->
<!-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * -->

<style>
  :host {
    --bright-blue: oklch(51.01% 0.274 263.83);
    --electric-violet: oklch(53.18% 0.28 296.97);
    --french-violet: oklch(47.66% 0.246 305.88);
    --vivid-pink: oklch(69.02% 0.277 332.77);
    --hot-red: oklch(61.42% 0.238 15.34);
    --orange-red: oklch(63.32% 0.24 31.68);

    --gray-900: oklch(19.37% 0.006 300.98);
    --gray-700: oklch(36.98% 0.014 302.71);
    --gray-400: oklch(70.9% 0.015 304.04);

    --red-to-pink-to-purple-vertical-gradient: linear-gradient(
      180deg,
      var(--orange-red) 0%,
      var(--vivid-pink) 50%,
      var(--electric-violet) 100%
    );

    --red-to-pink-to-purple-horizontal-gradient: linear-gradient(
      90deg,
      var(--orange-red) 0%,
      var(--vivid-pink) 50%,
      var(--electric-violet) 100%
    );

    --pill-accent: var(--bright-blue);

    font-family: "Inter", -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto,
      Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji",
      "Segoe UI Symbol";
    box-sizing: border-box;
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
  }

  h1 {
    font-size: 3.125rem;
    color: var(--gray-900);
    font-weight: 500;
    line-height: 100%;
    letter-spacing: -0.125rem;
    margin: 0;
    font-family: "Inter Tight", -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto,
      Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji",
      "Segoe UI Symbol";
  }

  p {
    margin: 0;
    color: var(--gray-700);
  }

  main {
    width: 100%;
    min-height: 100%;
    display: flex;
    justify-content: center;
    align-items: center;
    padding: 1rem;
    box-sizing: inherit;
    position: relative;
  }

  .angular-logo {
    max-width: 9.2rem;
  }

  .content {
    display: flex;
    justify-content: space-around;
    width: 100%;
    max-width: 700px;
    margin-bottom: 3rem;
  }

  .content h1 {
    margin-top: 1.75rem;
  }

  .content p {
    margin-top: 1.5rem;
  }

  .divider {
    width: 1px;
    background: var(--red-to-pink-to-purple-vertical-gradient);
    margin-inline: 0.5rem;
  }

  .pill-group {
    display: flex;
    flex-direction: column;
    align-items: start;
    flex-wrap: wrap;
    gap: 1.25rem;
  }

  .pill {
    display: flex;
    align-items: center;
    --pill-accent: var(--bright-blue);
    background: color-mix(in srgb, var(--pill-accent) 5%, transparent);
    color: var(--pill-accent);
    padding-inline: 0.75rem;
    padding-block: 0.375rem;
    border-radius: 2.75rem;
    border: 0;
    transition: background 0.3s ease;
    font-family: var(--inter-font);
    font-size: 0.875rem;
    font-style: normal;
    font-weight: 500;
    line-height: 1.4rem;
    letter-spacing: -0.00875rem;
    text-decoration: none;
    white-space: nowrap;
  }

  .pill:hover {
    background: color-mix(in srgb, var(--pill-accent) 15%, transparent);
  }

  .pill-group .pill:nth-child(6n + 1) {
    --pill-accent: var(--bright-blue);
  }
  .pill-group .pill:nth-child(6n + 2) {
    --pill-accent: var(--electric-violet);
  }
  .pill-group .pill:nth-child(6n + 3) {
    --pill-accent: var(--french-violet);
  }

  .pill-group .pill:nth-child(6n + 4),
  .pill-group .pill:nth-child(6n + 5),
  .pill-group .pill:nth-child(6n + 6) {
    --pill-accent: var(--hot-red);
  }

  .pill-group svg {
    margin-inline-start: 0.25rem;
  }

  .social-links {
    display: flex;
    align-items: center;
    gap: 0.73rem;
    margin-top: 1.5rem;
  }

  .social-links path {
    transition: fill 0.3s ease;
    fill: var(--gray-400);
  }

  .social-links a:hover svg path {
    fill: var(--gray-900);
  }

  @media screen and (max-width: 650px) {
    .content {
      flex-direction: column;
      width: max-content;
    }

    .divider {
      height: 1px;
      width: 100%;
      background: var(--red-to-pink-to-purple-horizontal-gradient);
      margin-block: 1.5rem;
    }
  }
</style>

<main class="main">
  <div class="content">
    <div class="left-side">
      <svg
        xmlns="http://www.w3.org/2000/svg"
        viewBox="0 0 982 239"
        fill="none"
        class="angular-logo"
      >
        <g clip-path="url(#a)">
          <path
            fill="url(#b)"
            d="M388.676 191.625h30.849L363.31 31.828h-35.758l-56.215 159.797h30.848l13.174-39.356h60.061l13.256 39.356Zm-65.461-62.675 21.602-64.311h1.227l21.602 64.311h-44.431Zm126.831-7.527v70.202h-28.23V71.839h27.002v20.374h1.392c2.782-6.71 7.2-12.028 13.255-15.956 6.056-3.927 13.584-5.89 22.503-5.89 8.264 0 15.465 1.8 21.684 5.318 6.137 3.518 10.964 8.673 14.319 15.382 3.437 6.71 5.074 14.81 4.992 24.383v76.175h-28.23v-71.92c0-8.019-2.046-14.237-6.219-18.819-4.173-4.5-9.819-6.791-17.102-6.791-4.91 0-9.328 1.063-13.174 3.272-3.846 2.128-6.792 5.237-9.001 9.328-2.046 4.009-3.191 8.918-3.191 14.728ZM589.233 239c-10.147 0-18.82-1.391-26.103-4.091-7.282-2.7-13.092-6.382-17.511-10.964-4.418-4.582-7.528-9.655-9.164-15.219l25.448-6.136c1.145 2.372 2.782 4.663 4.991 6.954 2.209 2.291 5.155 4.255 8.837 5.81 3.683 1.554 8.428 2.291 14.074 2.291 8.019 0 14.647-1.964 19.884-5.81 5.237-3.845 7.856-10.227 7.856-19.064v-22.665h-1.391c-1.473 2.946-3.601 5.892-6.383 9.001-2.782 3.109-6.464 5.645-10.965 7.691-4.582 2.046-10.228 3.109-17.101 3.109-9.165 0-17.511-2.209-25.039-6.545-7.446-4.337-13.42-10.883-17.757-19.474-4.418-8.673-6.628-19.473-6.628-32.565 0-13.091 2.21-24.301 6.628-33.383 4.419-9.082 10.311-15.955 17.839-20.7 7.528-4.746 15.874-7.037 25.039-7.037 7.037 0 12.846 1.145 17.347 3.518 4.582 2.373 8.182 5.236 10.883 8.51 2.7 3.272 4.746 6.382 6.137 9.327h1.554v-19.8h27.821v121.749c0 10.228-2.454 18.737-7.364 25.447-4.91 6.709-11.538 11.7-20.048 15.055-8.509 3.355-18.165 4.991-28.884 4.991Zm.245-71.266c5.974 0 11.047-1.473 15.302-4.337 4.173-2.945 7.446-7.118 9.573-12.519 2.21-5.482 3.274-12.027 3.274-19.637 0-7.609-1.064-14.155-3.274-19.8-2.127-5.646-5.318-10.064-9.491-13.255-4.174-3.11-9.329-4.746-15.384-4.746s-11.537 1.636-15.792 4.91c-4.173 3.272-7.365 7.772-9.492 13.418-2.128 5.727-3.191 12.191-3.191 19.392 0 7.2 1.063 13.745 3.273 19.228 2.127 5.482 5.318 9.736 9.573 12.764 4.174 3.027 9.41 4.582 15.629 4.582Zm141.56-26.51V71.839h28.23v119.786h-27.412v-21.273h-1.227c-2.7 6.709-7.119 12.191-13.338 16.446-6.137 4.255-13.747 6.382-22.748 6.382-7.855 0-14.81-1.718-20.783-5.237-5.974-3.518-10.72-8.591-14.075-15.382-3.355-6.709-5.073-14.891-5.073-24.464V71.839h28.312v71.921c0 7.609 2.046 13.664 6.219 18.083 4.173 4.5 9.655 6.709 16.365 6.709 4.173 0 8.183-.982 12.111-3.028 3.927-2.045 7.118-5.072 9.655-9.082 2.537-4.091 3.764-9.164 3.764-15.218Zm65.707-109.395v159.796h-28.23V31.828h28.23Zm44.841 162.169c-7.61 0-14.402-1.391-20.457-4.091-6.055-2.7-10.883-6.791-14.32-12.109-3.518-5.319-5.237-11.946-5.237-19.801 0-6.791 1.228-12.355 3.765-16.773 2.536-4.419 5.891-7.937 10.228-10.637 4.337-2.618 9.164-4.664 14.647-6.055 5.4-1.391 11.046-2.373 16.856-3.027 7.037-.737 12.683-1.391 17.102-1.964 4.337-.573 7.528-1.555 9.574-2.782 1.963-1.309 3.027-3.273 3.027-5.973v-.491c0-5.891-1.718-10.391-5.237-13.664-3.518-3.191-8.51-4.828-15.056-4.828-6.955 0-12.356 1.473-16.447 4.5-4.009 3.028-6.71 6.546-8.183 10.719l-26.348-3.764c2.046-7.282 5.483-13.336 10.31-18.328 4.746-4.909 10.638-8.59 17.511-11.045 6.955-2.455 14.565-3.682 22.912-3.682 5.809 0 11.537.654 17.265 2.045s10.965 3.6 15.711 6.71c4.746 3.109 8.51 7.282 11.455 12.6 2.864 5.318 4.337 11.946 4.337 19.883v80.184h-27.166v-16.446h-.9c-1.719 3.355-4.092 6.464-7.201 9.328-3.109 2.864-6.955 5.237-11.619 6.955-4.828 1.718-10.229 2.536-16.529 2.536Zm7.364-20.701c5.646 0 10.556-1.145 14.729-3.354 4.173-2.291 7.364-5.237 9.655-9.001 2.292-3.763 3.355-7.854 3.355-12.273v-14.155c-.9.737-2.373 1.391-4.5 2.046-2.128.654-4.419 1.145-7.037 1.636-2.619.491-5.155.9-7.692 1.227-2.537.328-4.746.655-6.628.901-4.173.572-8.019 1.472-11.292 2.781-3.355 1.31-5.973 3.11-7.855 5.401-1.964 2.291-2.864 5.318-2.864 8.918 0 5.237 1.882 9.164 5.728 11.782 3.682 2.782 8.51 4.091 14.401 4.091Zm64.643 18.328V71.839h27.412v19.965h1.227c2.21-6.955 5.974-12.274 11.292-16.038 5.319-3.763 11.456-5.645 18.329-5.645 1.555 0 3.355.082 5.237.163 1.964.164 3.601.328 4.91.573v25.938c-1.227-.41-3.109-.819-5.646-1.146a58.814 58.814 0 0 0-7.446-.49c-5.155 0-9.738 1.145-13.829 3.354-4.091 2.209-7.282 5.236-9.655 9.164-2.373 3.927-3.519 8.427-3.519 13.5v70.448h-28.312ZM222.077 39.192l-8.019 125.923L137.387 0l84.69 39.192Zm-53.105 162.825-57.933 33.056-57.934-33.056 11.783-28.556h92.301l11.783 28.556ZM111.039 62.675l30.357 73.803H80.681l30.358-73.803ZM7.937 165.115 0 39.192 84.69 0 7.937 165.115Z"
          />
          <path
            fill="url(#c)"
            d="M388.676 191.625h30.849L363.31 31.828h-35.758l-56.215 159.797h30.848l13.174-39.356h60.061l13.256 39.356Zm-65.461-62.675 21.602-64.311h1.227l21.602 64.311h-44.431Zm126.831-7.527v70.202h-28.23V71.839h27.002v20.374h1.392c2.782-6.71 7.2-12.028 13.255-15.956 6.056-3.927 13.584-5.89 22.503-5.89 8.264 0 15.465 1.8 21.684 5.318 6.137 3.518 10.964 8.673 14.319 15.382 3.437 6.71 5.074 14.81 4.992 24.383v76.175h-28.23v-71.92c0-8.019-2.046-14.237-6.219-18.819-4.173-4.5-9.819-6.791-17.102-6.791-4.91 0-9.328 1.063-13.174 3.272-3.846 2.128-6.792 5.237-9.001 9.328-2.046 4.009-3.191 8.918-3.191 14.728ZM589.233 239c-10.147 0-18.82-1.391-26.103-4.091-7.282-2.7-13.092-6.382-17.511-10.964-4.418-4.582-7.528-9.655-9.164-15.219l25.448-6.136c1.145 2.372 2.782 4.663 4.991 6.954 2.209 2.291 5.155 4.255 8.837 5.81 3.683 1.554 8.428 2.291 14.074 2.291 8.019 0 14.647-1.964 19.884-5.81 5.237-3.845 7.856-10.227 7.856-19.064v-22.665h-1.391c-1.473 2.946-3.601 5.892-6.383 9.001-2.782 3.109-6.464 5.645-10.965 7.691-4.582 2.046-10.228 3.109-17.101 3.109-9.165 0-17.511-2.209-25.039-6.545-7.446-4.337-13.42-10.883-17.757-19.474-4.418-8.673-6.628-19.473-6.628-32.565 0-13.091 2.21-24.301 6.628-33.383 4.419-9.082 10.311-15.955 17.839-20.7 7.528-4.746 15.874-7.037 25.039-7.037 7.037 0 12.846 1.145 17.347 3.518 4.582 2.373 8.182 5.236 10.883 8.51 2.7 3.272 4.746 6.382 6.137 9.327h1.554v-19.8h27.821v121.749c0 10.228-2.454 18.737-7.364 25.447-4.91 6.709-11.538 11.7-20.048 15.055-8.509 3.355-18.165 4.991-28.884 4.991Zm.245-71.266c5.974 0 11.047-1.473 15.302-4.337 4.173-2.945 7.446-7.118 9.573-12.519 2.21-5.482 3.274-12.027 3.274-19.637 0-7.609-1.064-14.155-3.274-19.8-2.127-5.646-5.318-10.064-9.491-13.255-4.174-3.11-9.329-4.746-15.384-4.746s-11.537 1.636-15.792 4.91c-4.173 3.272-7.365 7.772-9.492 13.418-2.128 5.727-3.191 12.191-3.191 19.392 0 7.2 1.063 13.745 3.273 19.228 2.127 5.482 5.318 9.736 9.573 12.764 4.174 3.027 9.41 4.582 15.629 4.582Zm141.56-26.51V71.839h28.23v119.786h-27.412v-21.273h-1.227c-2.7 6.709-7.119 12.191-13.338 16.446-6.137 4.255-13.747 6.382-22.748 6.382-7.855 0-14.81-1.718-20.783-5.237-5.974-3.518-10.72-8.591-14.075-15.382-3.355-6.709-5.073-14.891-5.073-24.464V71.839h28.312v71.921c0 7.609 2.046 13.664 6.219 18.083 4.173 4.5 9.655 6.709 16.365 6.709 4.173 0 8.183-.982 12.111-3.028 3.927-2.045 7.118-5.072 9.655-9.082 2.537-4.091 3.764-9.164 3.764-15.218Zm65.707-109.395v159.796h-28.23V31.828h28.23Zm44.841 162.169c-7.61 0-14.402-1.391-20.457-4.091-6.055-2.7-10.883-6.791-14.32-12.109-3.518-5.319-5.237-11.946-5.237-19.801 0-6.791 1.228-12.355 3.765-16.773 2.536-4.419 5.891-7.937 10.228-10.637 4.337-2.618 9.164-4.664 14.647-6.055 5.4-1.391 11.046-2.373 16.856-3.027 7.037-.737 12.683-1.391 17.102-1.964 4.337-.573 7.528-1.555 9.574-2.782 1.963-1.309 3.027-3.273 3.027-5.973v-.491c0-5.891-1.718-10.391-5.237-13.664-3.518-3.191-8.51-4.828-15.056-4.828-6.955 0-12.356 1.473-16.447 4.5-4.009 3.028-6.71 6.546-8.183 10.719l-26.348-3.764c2.046-7.282 5.483-13.336 10.31-18.328 4.746-4.909 10.638-8.59 17.511-11.045 6.955-2.455 14.565-3.682 22.912-3.682 5.809 0 11.537.654 17.265 2.045s10.965 3.6 15.711 6.71c4.746 3.109 8.51 7.282 11.455 12.6 2.864 5.318 4.337 11.946 4.337 19.883v80.184h-27.166v-16.446h-.9c-1.719 3.355-4.092 6.464-7.201 9.328-3.109 2.864-6.955 5.237-11.619 6.955-4.828 1.718-10.229 2.536-16.529 2.536Zm7.364-20.701c5.646 0 10.556-1.145 14.729-3.354 4.173-2.291 7.364-5.237 9.655-9.001 2.292-3.763 3.355-7.854 3.355-12.273v-14.155c-.9.737-2.373 1.391-4.5 2.046-2.128.654-4.419 1.145-7.037 1.636-2.619.491-5.155.9-7.692 1.227-2.537.328-4.746.655-6.628.901-4.173.572-8.019 1.472-11.292 2.781-3.355 1.31-5.973 3.11-7.855 5.401-1.964 2.291-2.864 5.318-2.864 8.918 0 5.237 1.882 9.164 5.728 11.782 3.682 2.782 8.51 4.091 14.401 4.091Zm64.643 18.328V71.839h27.412v19.965h1.227c2.21-6.955 5.974-12.274 11.292-16.038 5.319-3.763 11.456-5.645 18.329-5.645 1.555 0 3.355.082 5.237.163 1.964.164 3.601.328 4.91.573v25.938c-1.227-.41-3.109-.819-5.646-1.146a58.814 58.814 0 0 0-7.446-.49c-5.155 0-9.738 1.145-13.829 3.354-4.091 2.209-7.282 5.236-9.655 9.164-2.373 3.927-3.519 8.427-3.519 13.5v70.448h-28.312ZM222.077 39.192l-8.019 125.923L137.387 0l84.69 39.192Zm-53.105 162.825-57.933 33.056-57.934-33.056 11.783-28.556h92.301l11.783 28.556ZM111.039 62.675l30.357 73.803H80.681l30.358-73.803ZM7.937 165.115 0 39.192 84.69 0 7.937 165.115Z"
          />
        </g>
        <defs>
          <radialGradient
            id="c"
            cx="0"
            cy="0"
            r="1"
            gradientTransform="rotate(118.122 171.182 60.81) scale(205.794)"
            gradientUnits="userSpaceOnUse"
          >
            <stop stop-color="#FF41F8" />
            <stop offset=".707" stop-color="#FF41F8" stop-opacity=".5" />
            <stop offset="1" stop-color="#FF41F8" stop-opacity="0" />
          </radialGradient>
          <linearGradient
            id="b"
            x1="0"
            x2="982"
            y1="192"
            y2="192"
            gradientUnits="userSpaceOnUse"
          >
            <stop stop-color="#F0060B" />
            <stop offset="0" stop-color="#F0070C" />
            <stop offset=".526" stop-color="#CC26D5" />
            <stop offset="1" stop-color="#7702FF" />
          </linearGradient>
          <clipPath id="a"><path fill="#fff" d="M0 0h982v239H0z" /></clipPath>
        </defs>
      </svg>
      <h1>Hello, {{ title() }}</h1>
      <p>Congratulations! Your app is running. 🎉</p>
    </div>
    <div class="divider" role="separator" aria-label="Divider"></div>
    <div class="right-side">
      <div class="pill-group">
        @for (item of [
          { title: 'Explore the Docs', link: 'https://angular.dev' },
          { title: 'Learn with Tutorials', link: 'https://angular.dev/tutorials' },
          { title: 'Prompt and best practices for AI', link: 'https://angular.dev/ai/develop-with-ai'},
          { title: 'CLI Docs', link: 'https://angular.dev/tools/cli' },
          { title: 'Angular Language Service', link: 'https://angular.dev/tools/language-service' },
          { title: 'Angular DevTools', link: 'https://angular.dev/tools/devtools' },
        ]; track item.title) {
          <a
            class="pill"
            [href]="item.link"
            target="_blank"
            rel="noopener"
          >
            <span>{{ item.title }}</span>
            <svg
              xmlns="http://www.w3.org/2000/svg"
              height="14"
              viewBox="0 -960 960 960"
              width="14"
              fill="currentColor"
            >
              <path
                d="M200-120q-33 0-56.5-23.5T120-200v-560q0-33 23.5-56.5T200-840h280v80H200v560h560v-280h80v280q0 33-23.5 56.5T760-120H200Zm188-212-56-56 372-372H560v-80h280v280h-80v-144L388-332Z"
              />
            </svg>
          </a>
        }
      </div>
      <div class="social-links">
        <a
          href="https://github.com/angular/angular"
          aria-label="Github"
          target="_blank"
          rel="noopener"
        >
          <svg
            width="25"
            height="24"
            viewBox="0 0 25 24"
            fill="none"
            xmlns="http://www.w3.org/2000/svg"
            alt="Github"
          >
            <path
              d="M12.3047 0C5.50634 0 0 5.50942 0 12.3047C0 17.7423 3.52529 22.3535 8.41332 23.9787C9.02856 24.0946 9.25414 23.7142 9.25414 23.3871C9.25414 23.0949 9.24389 22.3207 9.23876 21.2953C5.81601 22.0377 5.09414 19.6444 5.09414 19.6444C4.53427 18.2243 3.72524 17.8449 3.72524 17.8449C2.61064 17.082 3.81137 17.0973 3.81137 17.0973C5.04697 17.1835 5.69604 18.3647 5.69604 18.3647C6.79321 20.2463 8.57636 19.7029 9.27978 19.3881C9.39052 18.5924 9.70736 18.0499 10.0591 17.7423C7.32641 17.4347 4.45429 16.3765 4.45429 11.6618C4.45429 10.3185 4.9311 9.22133 5.72065 8.36C5.58222 8.04931 5.16694 6.79833 5.82831 5.10337C5.82831 5.10337 6.85883 4.77319 9.2121 6.36459C10.1965 6.09082 11.2424 5.95546 12.2883 5.94931C13.3342 5.95546 14.3801 6.09082 15.3644 6.36459C17.7023 4.77319 18.7328 5.10337 18.7328 5.10337C19.3942 6.79833 18.9789 8.04931 18.8559 8.36C19.6403 9.22133 20.1171 10.3185 20.1171 11.6618C20.1171 16.3888 17.2409 17.4296 14.5031 17.7321C14.9338 18.1012 15.3337 18.8559 15.3337 20.0084C15.3337 21.6552 15.3183 22.978 15.3183 23.3779C15.3183 23.7009 15.5336 24.0854 16.1642 23.9623C21.0871 22.3484 24.6094 17.7341 24.6094 12.3047C24.6094 5.50942 19.0999 0 12.3047 0Z"
            />
          </svg>
        </a>
        <a
          href="https://twitter.com/angular"
          aria-label="Twitter"
          target="_blank"
          rel="noopener"
        >
          <svg
            width="24"
            height="24"
            viewBox="0 0 24 24"
            fill="none"
            xmlns="http://www.w3.org/2000/svg"
            alt="Twitter"
          >
            <path
              d="M18.244 2.25h3.308l-7.227 8.26 8.502 11.24H16.17l-5.214-6.817L4.99 21.75H1.68l7.73-8.835L1.254 2.25H8.08l4.713 6.231zm-1.161 17.52h1.833L7.084 4.126H5.117z"
            />
          </svg>
        </a>
        <a
          href="https://www.youtube.com/channel/UCbn1OgGei-DV7aSRo_HaAiw"
          aria-label="Youtube"
          target="_blank"
          rel="noopener"
        >
          <svg
            width="29"
            height="20"
            viewBox="0 0 29 20"
            fill="none"
            xmlns="http://www.w3.org/2000/svg"
            alt="Youtube"
          >
            <path
              fill-rule="evenodd"
              clip-rule="evenodd"
              d="M27.4896 1.52422C27.9301 1.96749 28.2463 2.51866 28.4068 3.12258C29.0004 5.35161 29.0004 10 29.0004 10C29.0004 10 29.0004 14.6484 28.4068 16.8774C28.2463 17.4813 27.9301 18.0325 27.4896 18.4758C27.0492 18.9191 26.5 19.2389 25.8972 19.4032C23.6778 20 14.8068 20 14.8068 20C14.8068 20 5.93586 20 3.71651 19.4032C3.11363 19.2389 2.56449 18.9191 2.12405 18.4758C1.68361 18.0325 1.36732 17.4813 1.20683 16.8774C0.613281 14.6484 0.613281 10 0.613281 10C0.613281 10 0.613281 5.35161 1.20683 3.12258C1.36732 2.51866 1.68361 1.96749 2.12405 1.52422C2.56449 1.08095 3.11363 0.76113 3.71651 0.596774C5.93586 0 14.8068 0 14.8068 0C14.8068 0 23.6778 0 25.8972 0.596774C26.5 0.76113 27.0492 1.08095 27.4896 1.52422ZM19.3229 10L11.9036 5.77905V14.221L19.3229 10Z"
            />
          </svg>
        </a>
      </div>
    </div>
  </div>
</main>

<!-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * -->
<!-- * * * * * * * * * * * The content above * * * * * * * * * * * * -->
<!-- * * * * * * * * * * is only a placeholder * * * * * * * * * * * -->
<!-- * * * * * * * * * * and can be replaced.  * * * * * * * * * * * -->
<!-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * -->
<!-- * * * * * * * * * * End of Placeholder  * * * * * * * * * * * * -->
<!-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * -->


<router-outlet />

====================================
FICHIER: ./src/app/auth/auth.component.html
Lignes:       84
====================================

<div class="auth-container">
  <!-- Sélecteur de langue en haut à droite -->
  <div class="language-selector-top">
    <div class="language-dropdown" [class.open]="languageDropdownOpen">
      <button class="language-button" (click)="toggleLanguageDropdown()">
        <span class="flag">{{ getCurrentLanguageFlag() }}</span>
        <span class="lang-name">{{ getCurrentLanguageName() }}</span>
        <svg class="chevron" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
        </svg>
      </button>
      
      <div class="dropdown-menu" *ngIf="languageDropdownOpen">
        <button 
          *ngFor="let lang of languages"
          class="language-option"
          [class.active]="isCurrentLanguage(lang.code)"
          (click)="changeLanguage(lang.code)"
        >
          <span class="flag">{{ lang.flag }}</span>
          <span class="lang-name">{{ lang.name }}</span>
          <svg *ngIf="isCurrentLanguage(lang.code)" class="check-icon" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
          </svg>
        </button>
      </div>
    </div>
  </div>

  <div class="auth-box">
    <div class="auth-header">
      <h1 class="auth-title">{{ isLoginMode ? ('AUTH.WELCOME' | translate) : ('AUTH.CREATE_ACCOUNT' | translate) }}</h1>
      <p class="auth-subtitle">
        {{ isLoginMode ? ('AUTH.SIGN_IN' | translate) : ('AUTH.SIGNUP' | translate) }}
      </p>
    </div>

    <form [formGroup]="authForm" (ngSubmit)="onSubmit()" class="auth-form">
      <div class="form-group">
        <label class="form-label">{{ 'AUTH.EMAIL' | translate }}</label>
        <input 
          type="email" 
          formControlName="email" 
          class="form-input"
          [placeholder]="'AUTH.EMAIL' | translate"
        />
        <span class="error-message" *ngIf="authForm.get('email')?.hasError('required') && authForm.get('email')?.touched">
          {{ 'FORM.REQUIRED' | translate }}
        </span>
        <span class="error-message" *ngIf="authForm.get('email')?.hasError('email') && authForm.get('email')?.touched">
          {{ 'FORM.INVALID_EMAIL' | translate }}
        </span>
      </div>

      <div class="form-group">
        <label class="form-label">{{ 'AUTH.PASSWORD' | translate }}</label>
        <input 
          type="password" 
          formControlName="password" 
          class="form-input"
          [placeholder]="'AUTH.PASSWORD' | translate"
        />
        <span class="error-message" *ngIf="authForm.get('password')?.hasError('required') && authForm.get('password')?.touched">
          {{ 'FORM.REQUIRED' | translate }}
        </span>
      </div>

      <button type="submit" class="auth-button" [disabled]="!authForm.valid || loading">
        <span *ngIf="!loading">{{ isLoginMode ? ('AUTH.LOGIN' | translate) : ('AUTH.SIGNUP' | translate) }}</span>
        <span *ngIf="loading">{{ 'MESSAGES.LOADING' | translate }}</span>
      </button>

      <div class="auth-error" *ngIf="error">
        {{ error }}
      </div>
    </form>

    <div class="auth-footer">
      <button class="toggle-button" (click)="toggleMode()">
        {{ isLoginMode ? ('AUTH.NO_ACCOUNT' | translate) : ('AUTH.HAVE_ACCOUNT' | translate) }}
      </button>
    </div>
  </div>
</div>

====================================
FICHIER: ./src/app/avances/avances.component.html
Lignes:      102
====================================

<div class="avances-container">
  <div class="header">
    <h1 class="title">{{ 'AVANCES.TITLE' | translate }}</h1>
    <button *ngIf="!loading && marins.length > 0" class="btn btn-primary" (click)="addAvance()">
      <svg class="icon" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"/>
      </svg>
      {{ 'AVANCES.ADD' | translate }}
    </button>
  </div>

  <!-- Loading -->
  <div *ngIf="loading" class="loading-spinner">
    <div class="spinner"></div>
    <p>{{ 'MESSAGES.LOADING' | translate }}</p>
  </div>

  <!-- Pas de bateau sélectionné -->
  <div *ngIf="!loading && !selectedBoat" class="no-data">
    <svg class="no-data-icon" fill="none" viewBox="0 0 24 24" stroke="currentColor">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"/>
    </svg>
    <p>{{ 'BOATS.NO_BOAT_SELECTED' | translate }}</p>
  </div>

  <!-- Pas de marins -->
  <div *ngIf="!loading && selectedBoat && marins.length === 0" class="no-data">
    <svg class="no-data-icon" fill="none" viewBox="0 0 24 24" stroke="currentColor">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197M13 7a4 4 0 11-8 0 4 4 0 018 0z"/>
    </svg>
    <p>{{ 'POINTAGE.NOCREW' | translate }}</p>
  </div>

  <!-- Liste des avances par marin -->
  <div *ngIf="!loading && selectedBoat && marins.length > 0" class="marins-list">
    <div *ngFor="let marin of marins" class="marin-card">
      <div class="marin-header">
        <div class="marin-info">
          <h3 class="marin-name">{{ marin.prenom }} {{ marin.nom }}</h3>
          <span class="fonction-badge" [ngClass]="'fonction-' + marin.fonction">
            {{ 'SAILORS.' + marin.fonction.toUpperCase() | translate }}
          </span>
        </div>
        <div class="marin-total">
          <span class="total-label">{{ 'AVANCES.TOTAL' | translate }}</span>
          <span class="total-amount">{{ getTotalByMarin(marin.id!) | number:'1.2-2' }} DT</span>
        </div>
      </div>

      <!-- Avances du marin -->
      <div class="avances-list" *ngIf="getAvancesByMarin(marin.id!).length > 0">
        <div *ngFor="let avance of getAvancesByMarin(marin.id!)" class="avance-item">
          <div class="avance-main">
            <!-- ✅ DATE ET DESCRIPTION BIEN AFFICHÉES -->
            <div class="avance-details">
              <div class="avance-date-row">
                <svg class="date-icon" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/>
                </svg>
                <span class="avance-date">{{ formatDisplayDate(avance.dateAvance) }}</span>
              </div>
              <div class="avance-description" *ngIf="avance.description">
                <svg class="desc-icon" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 8h10M7 12h4m1 8l-4-4H5a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v8a2 2 0 01-2 2h-3l-4 4z"/>
                </svg>
                <span>{{ avance.description }}</span>
              </div>
            </div>
            
            <div class="avance-actions">
              <span class="avance-amount">{{ avance.montant | number:'1.2-2' }} DT</span>
              <button (click)="editAvance(avance)" class="btn-icon btn-warning" [title]="'BOATS.EDIT' | translate">
                <svg fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"/>
                </svg>
              </button>
              <button (click)="deleteAvance(avance)" class="btn-icon btn-danger" [title]="'BOATS.DELETE' | translate">
                <svg fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"/>
                </svg>
              </button>
            </div>
          </div>
        </div>
      </div>

      <!-- Pas d'avances -->
      <div class="no-avances" *ngIf="getAvancesByMarin(marin.id!).length === 0">
        <svg class="no-avances-icon" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 13V6a2 2 0 00-2-2H6a2 2 0 00-2 2v7m16 0v5a2 2 0 01-2 2H6a2 2 0 01-2-2v-5m16 0h-2.586a1 1 0 00-.707.293l-2.414 2.414a1 1 0 01-.707.293h-3.172a1 1 0 01-.707-.293l-2.414-2.414A1 1 0 006.586 13H4"/>
        </svg>
        <p>{{ 'AVANCES.NO_AVANCES' | translate }}</p>
      </div>
    </div>
  </div>

  <!-- Total général -->
  <div *ngIf="!loading && avances.length > 0" class="total-card">
    <span class="total-label-main">{{ 'AVANCES.TOTAL_GENERAL' | translate }}</span>
    <span class="total-amount-main">{{ getTotalAvances() | number:'1.2-2' }} DT</span>
  </div>
</div>

====================================
FICHIER: ./src/app/bateaux/bateau-form.component.html
Lignes:      107
====================================

<div class="form-container">
  <div class="form-header">
    <h1 class="form-title">{{ (isEditMode ? 'BOATS.EDIT_BOAT' : 'BOATS.ADD_BOAT') | translate }}</h1>
  </div>

  <form [formGroup]="bateauForm" (ngSubmit)="onSubmit()" class="form">
    <div class="form-grid">
      <div class="form-group">
        <label class="form-label">{{ 'BOATS.NAME' | translate }} *</label>
        <input 
          type="text" 
          formControlName="nom" 
          class="form-input"
          [class.error]="bateauForm.get('nom')?.invalid && bateauForm.get('nom')?.touched"
        />
        <span class="error-message" *ngIf="bateauForm.get('nom')?.hasError('required') && bateauForm.get('nom')?.touched">
          {{ 'FORM.REQUIRED' | translate }}
        </span>
      </div>

      <div class="form-group">
        <label class="form-label">{{ 'BOATS.REGISTRATION' | translate }} *</label>
        <input 
          type="text" 
          formControlName="immatriculation" 
          class="form-input"
        />
      </div>

      <div class="form-group">
        <label class="form-label">{{ 'BOATS.ENGINE_TYPE' | translate }} *</label>
        <input 
          type="text" 
          formControlName="typeMoteur" 
          class="form-input"
        />
      </div>

      <div class="form-group">
        <label class="form-label">{{ 'BOATS.POWER' | translate }} *</label>
        <input 
          type="number" 
          formControlName="puissance" 
          class="form-input"
          min="1"
        />
      </div>

      <div class="form-group">
        <label class="form-label">{{ 'BOATS.LENGTH' | translate }} *</label>
        <input 
          type="number" 
          formControlName="longueur" 
          class="form-input"
          step="0.1"
          min="1"
        />
      </div>

      <div class="form-group">
        <label class="form-label">{{ 'BOATS.CAPACITY' | translate }} *</label>
        <input 
          type="number" 
          formControlName="capaciteEquipage" 
          class="form-input"
          min="1"
        />
      </div>

      <div class="form-group">
        <label class="form-label">{{ 'BOATS.CONSTRUCTION_DATE' | translate }} *</label>
        <input 
          type="date" 
          formControlName="dateConstruction" 
          class="form-input"
        />
      </div>

      <div class="form-group">
        <label class="form-label">{{ 'BOATS.PORT' | translate }} *</label>
        <input 
          type="text" 
          formControlName="portAttache" 
          class="form-input"
        />
      </div>

      <div class="form-group">
        <label class="form-label">{{ 'BOATS.STATUS' | translate }} *</label>
        <select formControlName="statut" class="form-input">
          <option value="actif">{{ 'BOATS.ACTIVE' | translate }}</option>
          <option value="maintenance">{{ 'BOATS.MAINTENANCE' | translate }}</option>
          <option value="inactif">{{ 'BOATS.INACTIVE' | translate }}</option>
        </select>
      </div>
    </div>

    <div class="form-actions">
      <button type="button" (click)="cancel()" class="btn btn-secondary" [disabled]="loading">
        {{ 'FORM.CANCEL' | translate }}
      </button>
      <button type="submit" class="btn btn-primary" [disabled]="loading">
        {{ loading ? ('MESSAGES.SAVING' | translate) : ((isEditMode ? 'FORM.EDIT' : 'FORM.ADD') | translate) }}
      </button>
    </div>
  </form>
</div>

====================================
FICHIER: ./src/app/bateaux/bateaux-list.component.html
Lignes:      106
====================================

<div class="bateaux-container">
  <div class="header">
    <h1 class="title">{{ 'BOATS.TITLE' | translate }}</h1>
    <button class="btn btn-primary" (click)="addBateau()">
      <svg class="icon" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"/>
      </svg>
      {{ 'BOATS.ADDBOAT' | translate }}
    </button>
  </div>

  <!-- Message d'instruction -->
  <div class="selection-info" *ngIf="!selectedBoat">
    <svg class="info-icon" fill="none" viewBox="0 0 24 24" stroke="currentColor">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"/>
    </svg>
    <p>{{ 'BOATS.SELECT_INFO' | translate }}</p>
  </div>

  <!-- Bateau sélectionné -->
  <div class="selected-boat-card" *ngIf="selectedBoat">
    <div class="selected-header">
      <svg class="check-icon" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"/>
      </svg>
      <h3>{{ 'BOATS.SELECTED' | translate }}</h3>
    </div>
    <div class="boat-info">
      <div class="boat-name">{{ selectedBoat.nom }}</div>
      <div class="boat-details">
        <span>{{ selectedBoat.immatriculation }}</span>
        <span class="separator">•</span>
        <span>{{ selectedBoat.typeMoteur }}</span>
      </div>
    </div>
    <button class="btn-change" (click)="clearSelection()">
      {{ 'BOATS.CHANGE_SELECTION' | translate }}
    </button>
  </div>

  <div class="search-box">
    <input 
      type="text" 
      [(ngModel)]="searchTerm" 
      [placeholder]="'BOATS.SEARCH' | translate"
      class="search-input">
  </div>

  <div class="table-container">
    <table class="data-table">
      <thead>
        <tr>
          <th>{{ 'BOATS.NAME' | translate }}</th>
          <th>{{ 'BOATS.REGISTRATION' | translate }}</th>
          <th>{{ 'BOATS.ENGINETYPE' | translate }}</th>
          <th>{{ 'BOATS.POWER' | translate }}</th>
          <th>{{ 'BOATS.LENGTH' | translate }}</th>
          <th>{{ 'BOATS.PORT' | translate }}</th>
          <th>{{ 'BOATS.STATUS' | translate }}</th>
          <th>{{ 'BOATS.ACTIONS' | translate }}</th>
        </tr>
      </thead>
      <tbody>
        <tr *ngFor="let bateau of bateaux | async" 
            [class.selected-row]="isSelected(bateau)"
            (click)="selectBoat(bateau)">
          <td class="font-bold">
            <div class="boat-name-cell">
              <svg *ngIf="isSelected(bateau)" class="selected-icon" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"/>
              </svg>
              {{ bateau.nom }}
            </div>
          </td>
          <td>{{ bateau.immatriculation }}</td>
          <td>{{ bateau.typeMoteur }}</td>
          <td>{{ bateau.puissance }}</td>
          <td>{{ bateau.longueur }}</td>
          <td>{{ bateau.portAttache }}</td>
          <td>
            <span class="status-badge" [ngClass]="getStatutClass(bateau.statut)">
              {{ 'BOATS.' + bateau.statut.toUpperCase() | translate }}
            </span>
          </td>
          <td class="actions" (click)="$event.stopPropagation()">
            <button (click)="viewMarins(bateau.id!)" class="btn-icon btn-info" [title]="'BOATS.VIEWCREW' | translate">
              <svg fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197M13 7a4 4 0 11-8 0 4 4 0 018 0z"/>
              </svg>
            </button>
            <button (click)="editBateau(bateau.id!)" class="btn-icon btn-warning" [title]="'BOATS.EDIT' | translate">
              <svg fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"/>
              </svg>
            </button>
            <button (click)="deleteBateau(bateau)" class="btn-icon btn-danger" [title]="'BOATS.DELETE' | translate">
              <svg fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"/>
              </svg>
            </button>
          </td>
        </tr>
      </tbody>
    </table>
  </div>
</div>

====================================
FICHIER: ./src/app/components/language-selector/language-selector.component.html
Lignes:       24
====================================

<div class="language-selector">
  <button class="selector-button" (click)="toggleDropdown()">
    <span class="flag">{{ getCurrentLanguage().flag }}</span>
    <span class="language-name">{{ getCurrentLanguage().name }}</span>
    <svg class="chevron" fill="none" viewBox="0 0 24 24" stroke="currentColor">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
    </svg>
  </button>
  
  <div class="dropdown-menu" [class.show]="isOpen">
    <button
      *ngFor="let lang of languages"
      class="language-option"
      (click)="selectLanguage(lang.code)"
      [class.active]="isCurrentLanguage(lang.code)"
    >
      <span class="flag">{{ lang.flag }}</span>
      <span class="language-name">{{ lang.name }}</span>
      <svg *ngIf="isCurrentLanguage(lang.code)" class="check-icon" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
      </svg>
    </button>
  </div>
</div>

====================================
FICHIER: ./src/app/dashboard/dashboard-home/dashboard-home.component.html
Lignes:       93
====================================

<div class="dashboard-home">
  <h2 class="welcome-title">{{ 'DASHBOARD.WELCOME' | translate }}</h2>
  
  <!-- Cartes de statistiques -->
  <div class="stats-grid" *ngIf="stats$ | async as stats">
    <div class="stat-card blue">
      <div class="stat-icon">
        <svg fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 15a4 4 0 004 4h9a5 5 0 10-.1-9.999 5.002 5.002 0 10-9.78 2.096A4.001 4.001 0 003 15z" />
        </svg>
      </div>
      <div class="stat-content">
        <div class="stat-value">{{ stats.totalBoats }}</div>
        <div class="stat-label">{{ 'DASHBOARD.TOTAL_BOATS' | translate }}</div>
      </div>
    </div>

    <div class="stat-card green">
      <div class="stat-icon">
        <svg fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
        </svg>
      </div>
      <div class="stat-content">
        <div class="stat-value">{{ stats.activeBoats }}</div>
        <div class="stat-label">{{ 'DASHBOARD.ACTIVE_BOATS' | translate }}</div>
      </div>
    </div>

    <div class="stat-card yellow">
      <div class="stat-icon">
        <svg fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
        </svg>
      </div>
      <div class="stat-content">
        <div class="stat-value">{{ stats.maintenanceBoats }}</div>
        <div class="stat-label">{{ 'DASHBOARD.MAINTENANCE' | translate }}</div>
      </div>
    </div>

    <div class="stat-card purple">
      <div class="stat-icon">
        <svg fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197M13 7a4 4 0 11-8 0 4 4 0 018 0z" />
        </svg>
      </div>
      <div class="stat-content">
        <div class="stat-value">{{ stats.totalSailors }}</div>
        <div class="stat-label">{{ 'DASHBOARD.TOTAL_SAILORS' | translate }}</div>
      </div>
    </div>
  </div>

  <!-- Section des dernières activités -->
  <div class="activities-section">
    <div class="section-header">
      <h3 class="section-title">{{ 'DASHBOARD.RECENT_ACTIVITIES' | translate }}</h3>
      <span class="activity-count">{{ recentActivities.length }} {{ 'DASHBOARD.ACTIVITIES' | translate }}</span>
    </div>

    <div class="activities-container" *ngIf="!loading">
      <div class="activity-item" *ngFor="let activity of recentActivities">
        <div class="activity-icon" [style.background-color]="activity.color + '20'" [style.color]="activity.color">
          {{ activity.icon }}
        </div>
        <div class="activity-content">
          <div class="activity-title">
            <span class="activity-name">{{ activity.name }}</span>
          </div>
          <div class="activity-description">
            {{ getActionText(activity) | translate }}
          </div>
        </div>
        <div class="activity-time">
          {{ getTimeAgo(activity.date) }}
        </div>
      </div>

      <div class="no-activities" *ngIf="recentActivities.length === 0">
        <svg class="no-data-icon" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 13V6a2 2 0 00-2-2H6a2 2 0 00-2 2v7m16 0v5a2 2 0 01-2 2H6a2 2 0 01-2-2v-5m16 0h-2.586a1 1 0 00-.707.293l-2.414 2.414a1 1 0 01-.707.293h-3.172a1 1 0 01-.707-.293l-2.414-2.414A1 1 0 006.586 13H4" />
        </svg>
        <p>{{ 'DASHBOARD.NO_ACTIVITIES' | translate }}</p>
      </div>
    </div>

    <div class="loading-spinner" *ngIf="loading">
      <div class="spinner"></div>
      <p>{{ 'MESSAGES.LOADING' | translate }}</p>
    </div>
  </div>
</div>

====================================
FICHIER: ./src/app/dashboard/dashboard.component.html
Lignes:      149
====================================

<div class="dashboard-layout">
  <aside class="sidebar">
    <div class="logo">
      <h2>LAMBARA</h2>
    </div>
    <nav class="sidebar-nav">
      <ul>
        <li>
          <a routerLink="/dashboard" routerLinkActive="active" [routerLinkActiveOptions]="{exact: true}" class="nav-item">
            <svg class="nav-icon" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6"/>
            </svg>
            <span>{{ 'MENU.HOME' | translate }}</span>
          </a>
        </li>
        <li>
          <a routerLink="/dashboard/bateaux" routerLinkActive="active" class="nav-item">
            <svg class="nav-icon" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 15a4 4 0 004 4h9a5 5 0 10-.1-9.999 5.002 5.002 0 10-9.78 2.096A4.001 4.001 0 003 15z"/>
            </svg>
            <span>{{ 'MENU.BOATS' | translate }}</span>
          </a>
        </li>
        <li *ngIf="selectedBoat">
          <a routerLink="/dashboard/sorties" routerLinkActive="active" class="nav-item">
            <svg class="nav-icon" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2"/>
            </svg>
            <span>{{ 'MENU.SORTIES' | translate }}</span>
          </a>
        </li>
        <!-- ✅ NOUVEAU: MENU VENTES -->
        <li *ngIf="selectedBoat">
          <a routerLink="/dashboard/ventes" routerLinkActive="active" class="nav-item">
            <svg class="nav-icon" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"/>
            </svg>
            <span>{{ 'MENU.VENTES' | translate }}</span>
          </a>
        </li>
        <li *ngIf="selectedBoat">
          <a routerLink="/dashboard/avances" routerLinkActive="active" class="nav-item">
            <svg class="nav-icon" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1M21 12a9 9 0 11-18 0 9 9 0 0118 0z"/>
            </svg>
            <span>{{ 'MENU.AVANCES' | translate }}</span>
          </a>
        </li>
        <li *ngIf="selectedBoat">
          <a routerLink="/dashboard/salaires" routerLinkActive="active" class="nav-item">
            <svg class="nav-icon" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 7h6m0 10v-3m-3 3h.01M9 17h.01M9 14h.01M12 14h.01M15 11h.01M12 11h.01M9 11h.01M7 21h10a2 2 0 002-2V5a2 2 0 00-2-2H7a2 2 0 00-2 2v14a2 2 0 002 2z"/>
            </svg>
            <span>{{ 'MENU.SALAIRES' | translate }}</span>
          </a>
        </li>
        <!-- Messages pour bateau non sélectionné -->
        <li *ngIf="!selectedBoat" class="menu-disabled">
          <div class="nav-item-disabled">
            <svg class="nav-icon" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z"/>
            </svg>
            <span>{{ 'MENU.SORTIES' | translate }}</span>
          </div>
          <div class="tooltip-disabled">
            {{ 'MENU.SELECT_BOAT_FIRST' | translate }}
          </div>
        </li>
        <li *ngIf="!selectedBoat" class="menu-disabled">
          <div class="nav-item-disabled">
            <svg class="nav-icon" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"/>
            </svg>
            <span>{{ 'MENU.VENTES' | translate }}</span>
          </div>
          <div class="tooltip-disabled">
            {{ 'MENU.SELECT_BOAT_FIRST' | translate }}
          </div>
        </li>
        <li *ngIf="!selectedBoat" class="menu-disabled">
          <div class="nav-item-disabled">
            <svg class="nav-icon" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1M21 12a9 9 0 11-18 0 9 9 0 0118 0z"/>
            </svg>
            <span>{{ 'MENU.AVANCES' | translate }}</span>
          </div>
          <div class="tooltip-disabled">
            {{ 'MENU.SELECT_BOAT_FIRST' | translate }}
          </div>
        </li>
        <li *ngIf="!selectedBoat" class="menu-disabled">
          <div class="nav-item-disabled">
            <svg class="nav-icon" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 7h6m0 10v-3m-3 3h.01M9 17h.01M9 14h.01M12 14h.01M15 11h.01M12 11h.01M9 11h.01M7 21h10a2 2 0 002-2V5a2 2 0 00-2-2H7a2 2 0 00-2 2v14a2 2 0 002 2z"/>
            </svg>
            <span>{{ 'MENU.SALAIRES' | translate }}</span>
          </div>
          <div class="tooltip-disabled">
            {{ 'MENU.SELECT_BOAT_FIRST' | translate }}
          </div>
        </li>
        <li>
          <a routerLink="/dashboard/mock-data" routerLinkActive="active" class="nav-item">
            <svg class="nav-icon" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 7v10c0 2.21 3.582 4 8 4s8-1.79 8-4V7M4 7c0 2.21 3.582 4 8 4s8-1.79 8-4M4 7c0-2.21 3.582-4 8-4s8 1.79 8 4m0 5c0 2.21-3.582 4-8 4s-8-1.79-8-4"/>
            </svg>
            <span>🎲 {{ 'MENU.MOCK_DATA' | translate }}</span>
          </a>
        </li>
      </ul>
    </nav>
  </aside>

  <main class="main-content">
    <header class="header">
      <div class="boat-selector">
        <div *ngIf="selectedBoat" class="selected-boat-badge" (click)="goToBoatSelection()">
          <svg class="boat-icon" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"/>
          </svg>
          <div class="boat-info">
            <span class="boat-label">{{ 'BOATS.SELECTED_BOAT' | translate }}</span>
            <span class="boat-name">{{ selectedBoat.nom }}</span>
            <span class="boat-registration">({{ selectedBoat.immatriculation }})</span>
          </div>
          <svg class="change-icon" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7h12m0 0l-4-4m4 4l-4 4m0 6H4m0 0l4 4m-4-4l4-4"/>
          </svg>
        </div>

        <div *ngIf="!selectedBoat" class="no-boat-badge" (click)="goToBoatSelection()">
          <svg class="warning-icon" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z"/>
          </svg>
          <div class="no-boat-info">
            <span class="no-boat-label">{{ 'BOATS.NO_BOAT_SELECTED' | translate }}</span>
            <span class="no-boat-action">{{ 'BOATS.CLICK_TO_SELECT' | translate }}</span>
          </div>
        </div>
      </div>

      <app-language-selector></app-language-selector>
    </header>

    <div class="content">
      <router-outlet></router-outlet>
    </div>
  </main>
</div>

====================================
FICHIER: ./src/app/marins/marin-form.component.html
Lignes:      122
====================================

<div class="form-container">
  <div class="form-header">
    <h1 class="form-title">{{ (isEditMode ? 'SAILORS.EDIT_SAILOR' : 'SAILORS.ADD_SAILOR') | translate }}</h1>
  </div>

  <form [formGroup]="marinForm" (ngSubmit)="onSubmit()" class="form">
    <div class="form-grid">
      <div class="form-group">
        <label class="form-label">{{ 'SAILORS.LAST_NAME' | translate }} *</label>
        <input 
          type="text" 
          formControlName="nom" 
          class="form-input"
          [class.error]="marinForm.get('nom')?.invalid && marinForm.get('nom')?.touched"
        />
        <span class="error-message" *ngIf="marinForm.get('nom')?.hasError('required') && marinForm.get('nom')?.touched">
          {{ 'FORM.REQUIRED' | translate }}
        </span>
      </div>

      <div class="form-group">
        <label class="form-label">{{ 'SAILORS.FIRST_NAME' | translate }} *</label>
        <input 
          type="text" 
          formControlName="prenom" 
          class="form-input"
        />
      </div>

      <div class="form-group">
        <label class="form-label">{{ 'SAILORS.BIRTH_DATE' | translate }} *</label>
        <input 
          type="date" 
          formControlName="dateNaissance" 
          class="form-input"
        />
      </div>

      <div class="form-group">
        <label class="form-label">{{ 'SAILORS.FUNCTION' | translate }} *</label>
        <select formControlName="fonction" class="form-input">
          <option value="capitaine">{{ 'SAILORS.CAPTAIN' | translate }}</option>
          <option value="second">{{ 'SAILORS.SECOND' | translate }}</option>
          <option value="mecanicien">{{ 'SAILORS.MECHANIC' | translate }}</option>
          <option value="matelot">{{ 'SAILORS.SAILOR' | translate }}</option>
        </select>
      </div>

      <div class="form-group">
        <label class="form-label">{{ 'SAILORS.LICENSE_NUMBER' | translate }} *</label>
        <input 
          type="text" 
          formControlName="numeroPermis" 
          class="form-input"
        />
      </div>

      <div class="form-group">
        <label class="form-label">{{ 'SAILORS.PHONE' | translate }} *</label>
        <input 
          type="tel" 
          formControlName="telephone" 
          class="form-input"
          placeholder="Ex: 12345678"
          [class.error]="marinForm.get('telephone')?.invalid && marinForm.get('telephone')?.touched"
        />
        <span class="error-message" *ngIf="marinForm.get('telephone')?.hasError('pattern') && marinForm.get('telephone')?.touched">
          {{ 'FORM.INVALID_PHONE' | translate }}
        </span>
      </div>

      <div class="form-group">
        <label class="form-label">{{ 'SAILORS.EMAIL' | translate }} *</label>
        <input 
          type="email" 
          formControlName="email" 
          class="form-input"
          [class.error]="marinForm.get('email')?.invalid && marinForm.get('email')?.touched"
        />
        <span class="error-message" *ngIf="marinForm.get('email')?.hasError('email') && marinForm.get('email')?.touched">
          {{ 'FORM.INVALID_EMAIL' | translate }}
        </span>
      </div>

      <div class="form-group">
        <label class="form-label">{{ 'SAILORS.HIRE_DATE' | translate }} *</label>
        <input 
          type="date" 
          formControlName="dateEmbauche" 
          class="form-input"
        />
      </div>

      <div class="form-group full-width">
        <label class="form-label">{{ 'SAILORS.ADDRESS' | translate }} *</label>
        <input 
          type="text" 
          formControlName="adresse" 
          class="form-input"
        />
      </div>

      <div class="form-group">
        <label class="form-label">{{ 'BOATS.STATUS' | translate }} *</label>
        <select formControlName="statut" class="form-input">
          <option value="actif">{{ 'BOATS.ACTIVE' | translate }}</option>
          <option value="conge">{{ 'SAILORS.ON_LEAVE' | translate }}</option>
          <option value="inactif">{{ 'BOATS.INACTIVE' | translate }}</option>
        </select>
      </div>
    </div>

    <div class="form-actions">
      <button type="button" (click)="cancel()" class="btn btn-secondary" [disabled]="loading">
        {{ 'FORM.CANCEL' | translate }}
      </button>
      <button type="submit" class="btn btn-primary" [disabled]="loading">
        {{ loading ? ('MESSAGES.SAVING' | translate) : ((isEditMode ? 'FORM.EDIT' : 'FORM.ADD') | translate) }}
      </button>
    </div>
  </form>
</div>

====================================
FICHIER: ./src/app/marins/marins-list.component.html
Lignes:       71
====================================

<div class="marins-container">
  <div class="header">
    <div>
      <button class="btn-back" (click)="goBack()">
        <svg fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18" />
        </svg>
        {{ 'SAILORS.BACK' | translate }}
      </button>
      <h1 class="title">
        {{ 'SAILORS.CREW_OF' | translate }} - <span *ngIf="bateau$ | async as bateau">{{ bateau.nom }}</span>
      </h1>
    </div>
    <button class="btn btn-primary" (click)="addMarin()">
      <svg class="icon" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
      </svg>
      {{ 'SAILORS.ADD_SAILOR' | translate }}
    </button>
  </div>

  <div class="table-container">
    <table class="data-table">
      <thead>
        <tr>
          <th>{{ 'SAILORS.LAST_NAME' | translate }}</th>
          <th>{{ 'SAILORS.FIRST_NAME' | translate }}</th>
          <th>{{ 'SAILORS.FUNCTION' | translate }}</th>
          <th>{{ 'SAILORS.LICENSE_NUMBER' | translate }}</th>
          <th>{{ 'SAILORS.PHONE' | translate }}</th>
          <th>{{ 'SAILORS.EMAIL' | translate }}</th>
          <th>{{ 'SAILORS.HIRE_DATE' | translate }}</th>
          <th>{{ 'BOATS.STATUS' | translate }}</th>
          <th>{{ 'BOATS.ACTIONS' | translate }}</th>
        </tr>
      </thead>
      <tbody>
        <tr *ngFor="let marin of marins$ | async">
          <td class="font-bold">{{ marin.nom }}</td>
          <td>{{ marin.prenom }}</td>
          <td>
            <span class="fonction-badge" [ngClass]="getFonctionClass(marin.fonction)">
              {{ 'SAILORS.' + marin.fonction.toUpperCase() | translate }}
            </span>
          </td>
          <td>{{ marin.numeroPermis }}</td>
          <td>{{ marin.telephone }}</td>
          <td>{{ marin.email }}</td>
          <td>{{ formatDate(marin.dateEmbauche) | date:'dd/MM/yyyy' }}</td>
          <td>
            <span class="status-badge" [ngClass]="getStatutClass(marin.statut)">
              {{ marin.statut === 'conge' ? ('SAILORS.ON_LEAVE' | translate) : ('BOATS.' + marin.statut.toUpperCase() | translate) }}
            </span>
          </td>
          <td class="actions">
            <button (click)="editMarin(marin.id!)" class="btn-icon btn-warning" [title]="'BOATS.EDIT' | translate">
              <svg fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
              </svg>
            </button>
            <button (click)="deleteMarin(marin)" class="btn-icon btn-danger" [title]="'BOATS.DELETE' | translate">
              <svg fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
              </svg>
            </button>
          </td>
        </tr>
      </tbody>
    </table>
  </div>
</div>

====================================
FICHIER: ./src/app/salaires/salaires-list.component.html
Lignes:      128
====================================

<div class="salaires-container">
  <div class="header">
    <h1 class="title">{{ 'MENU.SALAIRES' | translate }}</h1>
    <button class="btn btn-primary" (click)="configureCoefficients()" *ngIf="!loading">
      <svg fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z"/>
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"/>
      </svg>
      Configurer coefficients
    </button>
  </div>

  <div *ngIf="loading" class="loading">
    <div class="spinner"></div>
    <p>{{ 'MESSAGES.LOADING' | translate }}</p>
  </div>

  <div *ngIf="!loading && !selectedBoat" class="no-data">
    <svg class="no-data-icon" fill="none" viewBox="0 0 24 24" stroke="currentColor">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"/>
    </svg>
    <p>{{ 'BOATS.NO_BOAT_SELECTED' | translate }}</p>
  </div>

  <div *ngIf="!loading && selectedBoat" class="content">
    <!-- Sélection des sorties -->
    <div class="section-card">
      <h2>1. Sélectionnez les sorties en mer</h2>
      <div class="sorties-list">
        <div *ngFor="let sortie of sorties" 
             class="sortie-item"
             [class.selected]="isSortieSelected(sortie.id!)"
             (click)="toggleSortie(sortie.id!)">
          <input type="checkbox" [checked]="isSortieSelected(sortie.id!)" (click)="$event.stopPropagation()">
          <div class="sortie-info">
            <strong>{{ sortie.destination }}</strong>
            <span>{{ formatDate(sortie.dateDepart) }} - {{ formatDate(sortie.dateRetour) }}</span>
          </div>
          <span class="status-badge" [ngClass]="'status-' + sortie.statut">
            {{ sortie.statut }}
          </span>
        </div>
      </div>
      
      <button class="btn btn-success btn-lg" 
              (click)="calculerSalaires()" 
              [disabled]="selectedSortiesIds.length === 0">
        <svg fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 7h6m0 10v-3m-3 3h.01M9 17h.01M9 14h.01M12 14h.01M15 11h.01M12 11h.01M9 11h.01M7 21h10a2 2 0 002-2V5a2 2 0 00-2-2H7a2 2 0 00-2 2v14a2 2 0 002 2z"/>
        </svg>
        Calculer les salaires
      </button>
    </div>

    <!-- Résultats du calcul -->
    <div *ngIf="calculated" class="results">
      <!-- Résumé financier -->
      <div class="summary-cards">
        <div class="summary-card revenue">
          <h3>Revenu total</h3>
          <p class="amount">{{ revenuTotal | number:'1.2-2' }} DT</p>
        </div>
        <div class="summary-card expenses">
          <h3>Dépenses</h3>
          <p class="amount">{{ totalDepenses | number:'1.2-2' }} DT</p>
        </div>
        <div class="summary-card benefit">
          <h3>Bénéfice net</h3>
          <p class="amount">{{ beneficeNet | number:'1.2-2' }} DT</p>
        </div>
      </div>

      <div class="summary-cards">
        <div class="summary-card owner">
          <h3>Part propriétaire (50%)</h3>
          <p class="amount big">{{ partProprietaire | number:'1.2-2' }} DT</p>
        </div>
        <div class="summary-card crew">
          <h3>Part équipage (50%)</h3>
          <p class="amount">{{ partEquipage | number:'1.2-2' }} DT</p>
          <p class="detail">- Déduction nuits: {{ deductionNuits | number:'1.2-2' }} DT</p>
          <p class="detail">= À partager: {{ montantAPartager | number:'1.2-2' }} DT</p>
        </div>
      </div>

      <!-- Tableau des salaires -->
      <div class="section-card">
        <h2>2. Salaires de l'équipage</h2>
        <div class="table-container">
          <table class="salaires-table">
            <thead>
              <tr>
                <th>Marin</th>
                <th>Coeff %</th>
                <th>Salaire brut</th>
                <th>Prime nuits</th>
                <th>Avances</th>
                <th>Déjà payé</th>
                <th class="reste">Reste à payer</th>
                <th>Action</th>
              </tr>
            </thead>
            <tbody>
              <tr *ngFor="let detail of salairesDetails">
                <td class="marin-name">{{ detail.marinNom }}</td>
                <td>{{ detail.coefficient }}%</td>
                <td>{{ detail.salaireBrut | number:'1.2-2' }} DT</td>
                <td>{{ detail.primeNuits | number:'1.2-2' }} DT</td>
                <td class="avances">{{ detail.totalAvances | number:'1.2-2' }} DT</td>
                <td class="paiements">{{ detail.totalPaiements | number:'1.2-2' }} DT</td>
                <td class="reste" [class.paid]="detail.resteAPayer <= 0">
                  <strong>{{ detail.resteAPayer | number:'1.2-2' }} DT</strong>
                </td>
                <td>
                  <button class="btn btn-sm btn-pay" 
                          (click)="enregistrerPaiement(detail)"
                          [disabled]="detail.resteAPayer <= 0">
                    {{ detail.resteAPayer > 0 ? 'Payer' : 'Payé' }}
                  </button>
                </td>
              </tr>
            </tbody>
          </table>
        </div>
      </div>
    </div>
  </div>
</div>

====================================
FICHIER: ./src/app/sorties/depense-form/depense-form.component.html
Lignes:       45
====================================

<div class="form-container">
  <div class="form-header">
    <h1 class="form-title">{{ (isEditMode ? 'EXPENSES.EDIT' : 'EXPENSES.ADD') | translate }}</h1>
  </div>
  <form [formGroup]="form" (ngSubmit)="onSubmit()" class="form">
    <div class="form-grid">
      
      <div class="form-group">
        <label class="form-label">{{ 'EXPENSES.TYPE' | translate }}</label>
        <select formControlName="type" class="form-input">
          <!-- Boucle sur les clés, mais stocke la valeur en minuscule -->
          <option *ngFor="let key of expenseKeys" [value]="key.toLowerCase()">
            {{ ('EXPENSES.TYPES.' + key) | translate }}
          </option>
        </select>
      </div>

      <div class="form-group">
        <label class="form-label">{{ 'EXPENSES.AMOUNT' | translate }}</label>
        <input type="number" formControlName="montant" class="form-input" placeholder="0.00">
      </div>

      <div class="form-group">
        <label class="form-label">{{ 'EXPENSES.DATE' | translate }}</label>
        <input type="date" formControlName="date" class="form-input">
      </div>

      <div class="form-group full-width">
        <label class="form-label">{{ 'EXPENSES.DESCRIPTION' | translate }}</label>
        <textarea formControlName="description" class="form-input" rows="3"></textarea>
      </div>

    </div>

    <div class="form-actions">
      <button type="button" (click)="cancel()" class="btn btn-secondary" [disabled]="loading">
        {{ 'FORM.CANCEL' | translate }}
      </button>
      <button type="submit" class="btn btn-primary" [disabled]="form.invalid || loading">
        <span *ngIf="loading">{{ 'MESSAGES.SAVING' | translate }}...</span>
        <span *ngIf="!loading">{{ (isEditMode ? 'FORM.EDIT' : 'FORM.SAVE') | translate }}</span>
      </button>
    </div>
  </form>
</div>

====================================
FICHIER: ./src/app/sorties/details/sorties-details.component.html
Lignes:        1
====================================



====================================
FICHIER: ./src/app/sorties/factures/factures.component.html
Lignes:       66
====================================

<div class="factures-container">
  <div class="header">
    <a routerLink="/dashboard/sorties/details/{{sortieId}}" class="btn-back">
      <svg fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18"/>
      </svg>
      Retour
    </a>
    <h1 class="title">Factures de vente</h1>
    <button class="btn btn-primary" (click)="ajouterFacture()" *ngIf="!loading">
      <svg fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"/>
      </svg>
      Ajouter une facture
    </button>
  </div>

  <div *ngIf="loading" class="loading">
    <div class="spinner"></div>
    <p>Chargement...</p>
  </div>

  <div *ngIf="!loading" class="content">
    <!-- Total des ventes -->
    <div class="total-card">
      <h3>Total des ventes</h3>
      <p class="total-amount">{{ getTotalVentes() | number:'1.2-2' }} DT</p>
    </div>

    <!-- Liste des factures -->
    <div *ngIf="factures.length === 0" class="no-data">
      <svg class="no-data-icon" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"/>
      </svg>
      <p>Aucune facture enregistrée</p>
    </div>

    <div class="factures-grid" *ngIf="factures.length > 0">
      <div *ngFor="let facture of factures" class="facture-card">
        <div class="facture-header">
          <h3>{{ facture.numeroFacture }}</h3>
          <span class="facture-amount">{{ facture.montantTotal | number:'1.2-2' }} DT</span>
        </div>
        <div class="facture-body">
          <p><strong>Client:</strong> {{ facture.client }}</p>
          <p><strong>Date:</strong> {{ formatDisplayDate(facture.dateVente) }}</p>
          <p *ngIf="facture.details"><strong>Détails:</strong> {{ facture.details }}</p>
        </div>
        <div class="facture-actions">
          <button class="btn btn-sm btn-warning" (click)="modifierFacture(facture)">
            <svg fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"/>
            </svg>
            Modifier
          </button>
          <button class="btn btn-sm btn-danger" (click)="supprimerFacture(facture)">
            <svg fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"/>
            </svg>
            Supprimer
          </button>
        </div>
      </div>
    </div>
  </div>
</div>

====================================
FICHIER: ./src/app/sorties/form/sorties-form.component.html
Lignes:        1
====================================



====================================
FICHIER: ./src/app/sorties/list/sorties-list.component.html
Lignes:       81
====================================

<div class="bateaux-container">
  <div class="header">
    <h1 class="title">{{ 'SORTIES.TITLE' | translate }}</h1>
    <button class="btn btn-primary" (click)="addSortie()" *ngIf="selectedBoat">
      <svg class="icon" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"/>
      </svg>
      {{ 'SORTIES.ADD' | translate }}
    </button>
  </div>

  <!-- Message si aucun bateau sélectionné -->
  <div *ngIf="!selectedBoat" class="no-data">
    <svg class="no-data-icon" fill="none" viewBox="0 0 24 24" stroke="currentColor">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"/>
    </svg>
    <p>{{ 'BOATS.NOBOATSELECTED' | translate }}</p>
  </div>

  <!-- Liste des sorties -->
  <div *ngIf="selectedBoat" class="table-container">
    <table class="data-table">
      <thead>
        <tr>
          <th>{{ 'SORTIES.DESTINATION' | translate }}</th>
          <th>{{ 'SORTIES.DATEDEPART' | translate }}</th>
          <th>{{ 'SORTIES.DATERETOUR' | translate }}</th>
          <th>{{ 'SORTIES.STATUT' | translate }}</th>
          <th class="actions-header">{{ 'BOATS.ACTIONS' | translate }}</th>
        </tr>
      </thead>
      <tbody>
        <tr *ngFor="let sortie of sorties | async">
          <td class="font-bold">{{ sortie.destination }}</td>
          <td>{{ formatDate(sortie.dateDepart) }}</td>
          <td>{{ formatDate(sortie.dateRetour) }}</td>
          <td>
            <span class="status-badge" [ngClass]="getStatutClass(sortie.statut)">
              {{ sortie.statut }}
            </span>
          </td>
          <td class="actions">
            <button 
              (click)="viewDetails(sortie.id!)" 
              class="btn-icon btn-info" 
              [title]="'SORTIES.MANAGE' | translate">
              <svg fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z"/>
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"/>
              </svg>
            </button>
            <button 
              (click)="editSortie(sortie.id!)" 
              class="btn-icon btn-warning" 
              [title]="'BOATS.EDIT' | translate">
              <svg fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"/>
              </svg>
            </button>
            <button 
              (click)="deleteSortie(sortie)" 
              class="btn-icon btn-danger" 
              [title]="'BOATS.DELETE' | translate">
              <svg fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"/>
              </svg>
            </button>
          </td>
        </tr>
      </tbody>
    </table>

    <!-- Message si aucune sortie -->
    <div *ngIf="(sorties | async)?.length === 0" class="no-data">
      <svg class="no-data-icon" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2"/>
      </svg>
      <p>{{ 'SORTIES.NOSORTIES' | translate }}</p>
    </div>
  </div>
</div>

====================================
FICHIER: ./src/app/sorties/pointage/pointage.component.html
Lignes:      121
====================================

<div class="pointage-container">
  <div class="header">
    <a [routerLink]="['/dashboard/sorties/details', sortieId]" class="btn-back">
      <svg fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18"/>
      </svg>
      {{ 'SAILORS.BACK' | translate }}
    </a>
    
    <div class="header-info">
      <div class="title-row">
        <h1 class="title">{{ 'POINTAGE.TITLE' | translate }}</h1>
        <!-- ✅ BOUTON AJOUTER MARIN -->
        <button *ngIf="!loading && sortie" class="btn-add-crew" (click)="addNewMarin()">
          <svg fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"/>
          </svg>
          {{ 'SAILORS.ADD_SAILOR' | translate }}
        </button>
      </div>
      
      <div *ngIf="sortie" class="sortie-info">
        <span class="sortie-destination">{{ sortie.destination }}</span>
        <span class="sortie-dates" *ngIf="sortie.dateDepart && sortie.dateRetour">
          {{ sortie.dateDepart | date:'dd/MM/yyyy' }} - {{ sortie.dateRetour | date:'dd/MM/yyyy' }}
        </span>
      </div>
    </div>
  </div>

  <!-- Spinner de chargement -->
  <div *ngIf="loading" class="loading-spinner">
    <div class="spinner"></div>
    <p>{{ 'MESSAGES.LOADING' | translate }}</p>
  </div>

  <!-- Message d'erreur -->
  <div *ngIf="!loading && errorMessage" class="error-box">
    <svg class="error-icon" fill="none" viewBox="0 0 24 24" stroke="currentColor">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"/>
    </svg>
    <p>{{ errorMessage }}</p>
  </div>

  <!-- Message si aucun marin -->
  <div *ngIf="!loading && !errorMessage && marins.length === 0" class="no-data">
    <svg class="no-data-icon" fill="none" viewBox="0 0 24 24" stroke="currentColor">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197M13 7a4 4 0 11-8 0 4 4 0 018 0z"/>
    </svg>
    <p>{{ 'POINTAGE.NOCREW' | translate }}</p>
    <button class="btn-add-empty" (click)="addNewMarin()">
      <svg fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"/>
      </svg>
      Ajouter le premier marin
    </button>
  </div>

  <!-- Tableau des marins -->
  <div *ngIf="!loading && !errorMessage && marins.length > 0" class="table-container">
    <table class="data-table">
      <thead>
        <tr>
          <th>{{ 'SAILORS.LASTNAME' | translate }}</th>
          <th>{{ 'SAILORS.FIRSTNAME' | translate }}</th>
          <th>{{ 'SAILORS.FUNCTION' | translate }}</th>
          <th class="text-center">{{ 'POINTAGE.PRESENT' | translate }}</th>
          <th>{{ 'POINTAGE.OBSERVATIONS' | translate }}</th>
        </tr>
      </thead>
      <tbody>
        <tr *ngFor="let marin of marins">
          <td class="font-bold">{{ marin.nom }}</td>
          <td>{{ marin.prenom }}</td>
          <td>
            <span class="fonction-badge" [ngClass]="'fonction-' + marin.fonction">
              {{ 'SAILORS.' + marin.fonction.toUpperCase() | translate }}
            </span>
          </td>
          <td class="text-center">
            <label class="switch">
              <input 
                type="checkbox" 
                [checked]="isPresent(marin.id!)"
                (change)="togglePresence(marin.id!, $event)"
              />
              <span class="slider round"></span>
            </label>
          </td>
          <td>
            <input 
              type="text" 
              class="obs-input"
              [value]="getObservations(marin.id!)"
              (blur)="updateObservations(marin.id!, $any($event.target).value)"
              placeholder="{{ 'POINTAGE.ADDOBS' | translate }}"
            />
          </td>
        </tr>
      </tbody>
    </table>
  </div>

  <!-- Résumé statistiques -->
  <div *ngIf="!loading && !errorMessage && marins.length > 0" class="summary">
    <div class="summary-card">
      <div class="summary-item">
        <span class="summary-label">{{ 'POINTAGE.TOTAL' | translate }}</span>
        <span class="summary-value">{{ marins.length }}</span>
      </div>
      <div class="summary-item present">
        <span class="summary-label">{{ 'POINTAGE.PRESENT' | translate }}</span>
        <span class="summary-value">{{ nombrePresents }}</span>
      </div>
      <div class="summary-item absent">
        <span class="summary-label">{{ 'POINTAGE.ABSENT' | translate }}</span>
        <span class="summary-value">{{ nombreAbsents }}</span>
      </div>
    </div>
  </div>
</div>

====================================
FICHIER: ./src/app/sorties/salaires/salaires.component.html
Lignes:      132
====================================

<div class="salaires-container">
  <div class="header">
    <a routerLink="/dashboard/sorties/details/{{sortieId}}" class="btn-back">
      <svg fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18"/>
      </svg>
      {{ 'SAILORS.BACK' | translate }}
    </a>
    <h1 class="title">{{ 'SALAIRES.TITLE' | translate }}</h1>
  </div>

  <div *ngIf="loading" class="loading">
    <div class="spinner"></div>
    <p>{{ 'MESSAGES.LOADING' | translate }}</p>
  </div>

  <div *ngIf="!loading && sortie" class="content">
    <!-- Configuration -->
    <div class="config-section">
      <button class="btn btn-primary" (click)="configureCoefficients()">
        <svg fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z"/>
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"/>
        </svg>
        {{ 'SALAIRES.CONFIG_COEFF' | translate }}
      </button>

      <button class="btn btn-success" (click)="calculerSalaires()" [disabled]="marins.length === 0">
        <svg fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 7h6m0 10v-3m-3 3h.01M9 17h.01M9 14h.01M12 14h.01M15 11h.01M12 11h.01M9 11h.01M7 21h10a2 2 0 002-2V5a2 2 0 00-2-2H7a2 2 0 00-2 2v14a2 2 0 002 2z"/>
        </svg>
        {{ 'SALAIRES.CALCULER' | translate }}
      </button>
    </div>

    <!-- Résultat du calcul -->
    <div *ngIf="calcul" class="calcul-result">
      <!-- Résumé général -->
      <div class="summary-cards">
        <div class="summary-card revenue">
          <div class="card-icon">
            <svg fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1M21 12a9 9 0 11-18 0 9 9 0 0118 0z"/>
            </svg>
          </div>
          <div class="card-content">
            <p class="card-label">{{ 'SALAIRES.REVENU_TOTAL' | translate }}</p>
            <p class="card-value">{{ calcul.revenuTotal | number:'1.2-2' }} DT</p>
          </div>
        </div>

        <div class="summary-card expenses">
          <div class="card-icon">
            <svg fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 12H4"/>
            </svg>
          </div>
          <div class="card-content">
            <p class="card-label">{{ 'SALAIRES.TOTAL_DEPENSES' | translate }}</p>
            <p class="card-value">{{ calcul.totalDepenses | number:'1.2-2' }} DT</p>
          </div>
        </div>

        <div class="summary-card owner">
          <div class="card-icon">
            <svg fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6"/>
            </svg>
          </div>
          <div class="card-content">
            <p class="card-label">{{ 'SALAIRES.PART_PROPRIETAIRE' | translate }}</p>
            <p class="card-value">{{ calcul.partProprietaire | number:'1.2-2' }} DT</p>
          </div>
        </div>

        <div class="summary-card crew">
          <div class="card-icon">
            <svg fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z"/>
            </svg>
          </div>
          <div class="card-content">
            <p class="card-label">{{ 'SALAIRES.PART_EQUIPAGE' | translate }}</p>
            <p class="card-value">{{ calcul.partEquipage | number:'1.2-2' }} DT</p>
          </div>
        </div>
      </div>

      <!-- Détails déductions -->
      <div class="deductions-card">
        <h3>{{ 'SALAIRES.DEDUCTIONS' | translate }}</h3>
        <div class="deduction-item">
          <span>{{ calcul.nbNuits }} {{ 'SALAIRES.NUITS' | translate }} × {{ calcul.nbMarins }} {{ 'SALAIRES.MARINS' | translate }} × 5 DT</span>
          <strong>{{ calcul.deductionNuits | number:'1.2-2' }} DT</strong>
        </div>
        <div class="montant-partager">
          <span>{{ 'SALAIRES.MONTANT_A_PARTAGER' | translate }}</span>
          <strong>{{ calcul.montantAPartager | number:'1.2-2' }} DT</strong>
        </div>
      </div>

      <!-- Détails par marin -->
      <div class="marins-salaires">
        <h3>{{ 'SALAIRES.DETAILS_PAR_MARIN' | translate }}</h3>
        <div class="table-container">
          <table class="data-table">
            <thead>
              <tr>
                <th>{{ 'SAILORS.TITLE' | translate }}</th>
                <th>{{ 'SALAIRES.COEFFICIENT' | translate }}</th>
                <th>{{ 'SALAIRES.SALAIRE_BASE' | translate }}</th>
                <th>{{ 'SALAIRES.PRIME_NUITS' | translate }}</th>
                <th>{{ 'AVANCES.TITLE' | translate }}</th>
                <th class="salaire-net">{{ 'SALAIRES.SALAIRE_NET' | translate }}</th>
              </tr>
            </thead>
            <tbody>
              <tr *ngFor="let detail of calcul.detailsMarins">
                <td class="font-bold">{{ detail.marinNom }}</td>
                <td>{{ detail.coefficient }}%</td>
                <td>{{ detail.salaireBase | number:'1.2-2' }} DT</td>
                <td>{{ detail.primenuits | number:'1.2-2' }} DT</td>
                <td class="text-danger">-{{ detail.avances | number:'1.2-2' }} DT</td>
                <td class="salaire-net"><strong>{{ detail.salaireNet | number:'1.2-2' }} DT</strong></td>
              </tr>
            </tbody>
          </table>
        </div>
      </div>
    </div>
  </div>
</div>

====================================
FICHIER: ./src/app/sorties/sortie-details.component.html
Lignes:      137
====================================

<div class="details-container">
  <div class="header">
    <button class="btn-back" (click)="goBack()">
      <svg fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18"/>
      </svg>
      {{ 'SAILORS.BACK' | translate }}
    </button>
    <h1 class="title">{{ 'SORTIES.DETAILSTITLE' | translate }}</h1>
  </div>

  <!-- Informations Générales -->
  <div class="info-card" *ngIf="sortie | async as sortie">
    <div class="section-header">
      <h2>{{ 'SORTIES.GENERALINFO' | translate }}</h2>
      <button 
        class="btn btn-primary"
        [routerLink]="['/dashboard/sorties/details', sortieId, 'pointage']">
        <svg class="icon" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-6 9l2 2 4-4"/>
        </svg>
        {{ 'POINTAGE.CREW' | translate }}
      </button>
    </div>

    <div class="info-grid">
      <div class="info-item">
        <span class="label">{{ 'SORTIES.DATEDEPART' | translate }}</span>
        <span class="value">{{ formatDate(sortie.dateDepart) }}</span>
      </div>
      <div class="info-item">
        <span class="label">{{ 'SORTIES.DATERETOUR' | translate }}</span>
        <span class="value">{{ formatDate(sortie.dateRetour) }}</span>
      </div>
      <div class="info-item">
        <span class="label">{{ 'SORTIES.DESTINATION' | translate }}</span>
        <span class="value">{{ sortie.destination }}</span>
      </div>
      <div class="info-item">
        <span class="label">{{ 'SORTIES.STATUT' | translate }}</span>
        <span class="value">{{ sortie.statut }}</span>
      </div>
    </div>
  </div>

  <!-- Section Dépenses -->
  <div class="section-card">
    <div class="section-header">
      <h2>{{ 'EXPENSES.TITLE' | translate }}</h2>
      <button class="btn btn-primary" (click)="addDepense()">
        <svg class="icon" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"/>
        </svg>
        {{ 'EXPENSES.ADD' | translate }}
      </button>
    </div>

    <div *ngIf="depenses | async as depensesList" class="list-items">
      <div *ngIf="depensesList.length === 0" class="no-data">
        {{ 'EXPENSES.NOEXPENSE' | translate }}
      </div>
      
      <div *ngFor="let depense of depensesList" class="list-item">
        <div class="item-info">
          <div class="item-type">{{ getExpenseTypeName(depense.type) }}</div>
          <div class="item-details">
            <span class="item-date">{{ depense.date | date:'dd/MM/yyyy' }}</span>
            <span class="item-description" *ngIf="depense.description">{{ depense.description }}</span>
          </div>
        </div>
        <div class="item-actions">
          <span class="item-amount">{{ depense.montant }} DT</span>
          <button class="btn-icon btn-warning" (click)="editDepense(depense.id!)">
            <svg fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"/>
            </svg>
          </button>
          <button class="btn-icon btn-danger" (click)="deleteDepense(depense)">
            <svg fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"/>
            </svg>
          </button>
        </div>
      </div>
    </div>
  </div>

  <!-- Section Factures -->
  <div class="section-card">
    <div class="section-header">
      <h2>{{ 'FACTURES.TITLE' | translate }}</h2>
    </div>
    <div *ngIf="factures | async as facturesList; else noFactures" class="list-items">
      <div *ngIf="facturesList.length === 0" class="no-data">
        {{ 'FACTURES.NOFACTURE' | translate }}
      </div>
      <div *ngFor="let facture of facturesList" class="list-item">
        <span class="item-type">{{ facture.numeroFacture }} - {{ facture.client }}</span>
        <span class="item-amount">{{ facture.montantTotal | number:'1.2-2' }} TND</span>
      </div>
    </div>
    <ng-template #noFactures>
      <div class="no-data">{{ 'FACTURES.NOFACTURE' | translate }}</div>
    </ng-template>
  </div>
</div>

<!-- Bouton Salaires -->
<div class="section-card" style="margin-top: 1.5rem;">
  <div class="section-header">
    <h2>Gestion des salaires</h2>
    <a [routerLink]="['/dashboard/sorties/salaires', sortieId]" class="btn btn-primary">
      <svg class="icon" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 7h6m0 10v-3m-3 3h.01M9 17h.01M9 14h.01M12 14h.01M15 11h.01M12 11h.01M9 11h.01M7 21h10a2 2 0 002-2V5a2 2 0 00-2-2H7a2 2 0 00-2 2v14a2 2 0 002 2z"/>
      </svg>
      {{ 'SALAIRES.CALCULER' | translate }}
    </a>
  </div>
</div>

  <!-- Section Calcul des Salaires -->
  <div class="section-card">
    <div class="section-header">
      <h2>{{ 'SALAIRES.TITLE' | translate }}</h2>
      <a [routerLink]="['/dashboard/sorties/salaires', sortieId]" class="btn btn-success">
        <svg class="icon" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 7h6m0 10v-3m-3 3h.01M9 17h.01M9 14h.01M12 14h.01M15 11h.01M12 11h.01M9 11h.01M7 21h10a2 2 0 002-2V5a2 2 0 00-2-2H7a2 2 0 00-2 2v14a2 2 0 002 2z"/>
        </svg>
        {{ 'SALAIRES.CALCULER' | translate }}
      </a>
    </div>
    <div class="section-content">
      <p style="color: #6b7280; margin: 0;">
        {{ 'SALAIRES.DESCRIPTION' | translate }}
      </p>
    </div>
  </div>

====================================
FICHIER: ./src/app/sorties/sortie-form.component.html
Lignes:       75
====================================

<div class="form-container">
  <div class="form-header">
    <h1 class="form-title">{{ (isEditMode ? 'SORTIES.EDIT' : 'SORTIES.ADD') | translate }}</h1>
  </div>

  <!-- Affichage du bateau sélectionné -->
  <div class="selected-boat-info" *ngIf="selectedBoat">
    <div class="boat-badge">
      <svg fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"/>
      </svg>
      <span>{{ 'BOATS.BOAT' | translate }}: <strong>{{ selectedBoat.nom }}</strong> ({{ selectedBoat.immatriculation }})</span>
    </div>
  </div>

  <form [formGroup]="form" (ngSubmit)="onSubmit()" class="form">
    <div class="form-grid">
      
      <div class="form-group">
        <label class="form-label">{{ 'SORTIES.DESTINATION' | translate }} *</label>
        <input 
          type="text" 
          formControlName="destination" 
          class="form-input"
          [class.error]="form.get('destination')?.invalid && form.get('destination')?.touched">
        <span class="error-message" *ngIf="form.get('destination')?.hasError('required') && form.get('destination')?.touched">
          {{ 'FORM.REQUIRED' | translate }}
        </span>
      </div>

      <div class="form-group">
        <label class="form-label">{{ 'SORTIES.DATEDEPART' | translate }} *</label>
        <input 
          type="date" 
          formControlName="dateDepart" 
          class="form-input"
          [class.error]="form.get('dateDepart')?.invalid && form.get('dateDepart')?.touched">
      </div>

      <div class="form-group">
        <label class="form-label">{{ 'SORTIES.DATERETOUR' | translate }} *</label>
        <input 
          type="date" 
          formControlName="dateRetour" 
          class="form-input"
          [class.error]="form.get('dateRetour')?.invalid && form.get('dateRetour')?.touched">
      </div>

      <div class="form-group">
        <label class="form-label">{{ 'SORTIES.STATUT' | translate }} *</label>
        <select formControlName="statut" class="form-input">
          <option value="en-cours">{{ 'SORTIES.STATUS.ONGOING' | translate }}</option>
          <option value="terminee">{{ 'SORTIES.STATUS.COMPLETED' | translate }}</option>
          <option value="annulee">{{ 'SORTIES.STATUS.CANCELLED' | translate }}</option>
        </select>
      </div>

      <div class="form-group full-width">
        <label class="form-label">{{ 'SORTIES.OBSERVATIONS' | translate }}</label>
        <textarea formControlName="observations" class="form-input" rows="3"></textarea>
      </div>

    </div>

    <div class="form-actions">
      <button type="button" (click)="cancel()" class="btn btn-secondary" [disabled]="loading">
        {{ 'FORM.CANCEL' | translate }}
      </button>
      <button type="submit" class="btn btn-primary" [disabled]="loading">
        <span *ngIf="loading">{{ 'MESSAGES.SAVING' | translate }}...</span>
        <span *ngIf="!loading">{{ (isEditMode ? 'FORM.EDIT' : 'FORM.ADD') | translate }}</span>
      </button>
    </div>
  </form>
</div>

====================================
FICHIER: ./src/app/sorties/sorties-list.component.html
Lignes:       49
====================================

<div class="bateaux-container">
  <div class="header">
    <h1 class="title">{{ 'SORTIES.TITLE' | translate }}</h1>
    <button class="btn btn-primary" (click)="addSortie()">
      <svg class="icon" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
      </svg>
      {{ 'SORTIES.ADD' | translate }}
    </button>
  </div>

  <div class="table-container">
    <table class="data-table">
      <thead>
        <tr>
          <th>{{ 'SORTIES.DESTINATION' | translate }}</th>
          <th>{{ 'SORTIES.DATEDEPART' | translate }}</th>
          <th>{{ 'SORTIES.DATERETOUR' | translate }}</th>
          <th>{{ 'SORTIES.STATUT' | translate }}</th>
          <th class="actions-header">{{ 'BOATS.ACTIONS' | translate }}</th>
        </tr>
      </thead>
      <tbody>
        <!-- Correction ici: utilisation de sorties$ au lieu de sorties -->
        <tr *ngFor="let sortie of sorties$ | async">
          <td class="font-bold">{{ sortie.destination }}</td>
          <td>{{ formatDate(sortie.dateDepart) }}</td>
          <td>{{ formatDate(sortie.dateRetour) }}</td>
          <td>
            <span class="status-badge" [ngClass]="getStatutClass(sortie.statut)">
              {{ sortie.statut }}
            </span>
          </td>
          <td class="actions">
            <button (click)="viewDetails(sortie.id!)" class="btn-icon btn-info" title="{{ 'Gérer la sortie' | translate }}">
              <svg fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z"></path><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path></svg>
            </button>
            <button (click)="editSortie(sortie.id!)" class="btn-icon btn-warning" title="{{ 'BOATS.EDIT' | translate }}">
              <svg fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path></svg>
            </button>
            <button (click)="deleteSortie(sortie)" class="btn-icon btn-danger" title="{{ 'BOATS.DELETE' | translate }}">
              <svg fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path></svg>
            </button>
          </td>
        </tr>
      </tbody>
    </table>
  </div>
</div>

====================================
FICHIER: ./src/app/ventes/ventes-list.component.html
Lignes:      104
====================================

<div class="ventes-container">
  <div class="header">
    <h1 class="title">{{ 'MENU.VENTES' | translate }}</h1>
    <!-- ✅ BOUTON GLOBAL -->
    <button class="btn btn-primary" (click)="ajouterFactureGlobale()" *ngIf="!loading && sortiesWithFactures.length > 0">
      <svg fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"/>
      </svg>
      Nouvelle facture
    </button>
  </div>

  <div *ngIf="loading" class="loading">
    <div class="spinner"></div>
    <p>{{ 'MESSAGES.LOADING' | translate }}</p>
  </div>

  <div *ngIf="!loading && !selectedBoat" class="no-data">
    <svg class="no-data-icon" fill="none" viewBox="0 0 24 24" stroke="currentColor">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"/>
    </svg>
    <p>{{ 'BOATS.NO_BOAT_SELECTED' | translate }}</p>
  </div>

  <div *ngIf="!loading && selectedBoat" class="content">
    <!-- Total général -->
    <div class="total-general-card">
      <div class="total-icon">
        <svg fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1M21 12a9 9 0 11-18 0 9 9 0 0118 0z"/>
        </svg>
      </div>
      <div class="total-content">
        <h3>Total général des ventes</h3>
        <p class="total-amount">{{ getTotalGeneral() | number:'1.2-2' }} DT</p>
      </div>
    </div>

    <!-- Aucune sortie -->
    <div *ngIf="sortiesWithFactures.length === 0" class="no-data">
      <svg class="no-data-icon" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"/>
      </svg>
      <p>Aucune sortie en mer disponible</p>
    </div>

    <!-- Liste des sorties avec factures -->
    <div class="sorties-list" *ngIf="sortiesWithFactures.length > 0">
      <div *ngFor="let item of sortiesWithFactures" class="sortie-section">
        <div class="sortie-header">
          <div class="sortie-info">
            <h2>{{ item.sortie.destination }}</h2>
            <p class="sortie-dates">
              {{ formatDisplayDate(item.sortie.dateDepart) }} - {{ formatDisplayDate(item.sortie.dateRetour) }}
            </p>
          </div>
          <div class="sortie-total">
            <span class="total-label">Total ventes</span>
            <span class="total-value">{{ item.totalVentes | number:'1.2-2' }} DT</span>
          </div>
          <button class="btn btn-secondary" (click)="ajouterFacture(item.sortie)">
            <svg fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"/>
            </svg>
            Ajouter
          </button>
        </div>

        <!-- Factures de cette sortie -->
        <div *ngIf="item.factures.length === 0" class="no-factures">
          <p>Aucune facture enregistrée pour cette sortie</p>
        </div>

        <div *ngIf="item.factures.length > 0" class="factures-grid">
          <div *ngFor="let facture of item.factures" class="facture-card">
            <div class="facture-header-card">
              <span class="facture-numero">{{ facture.numeroFacture }}</span>
              <span class="facture-montant">{{ facture.montantTotal | number:'1.2-2' }} DT</span>
            </div>
            <div class="facture-body">
              <p><strong>Client:</strong> {{ facture.client }}</p>
              <p><strong>Date:</strong> {{ formatDisplayDate(facture.dateVente) }}</p>
              <p *ngIf="facture.details" class="facture-details"><strong>Détails:</strong> {{ facture.details }}</p>
            </div>
            <div class="facture-actions">
              <button class="btn btn-sm btn-warning" (click)="modifierFacture(facture)">
                <svg fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"/>
                </svg>
                Modifier
              </button>
              <button class="btn btn-sm btn-danger" (click)="supprimerFacture(facture)">
                <svg fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"/>
                </svg>
                Supprimer
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

====================================
FICHIER: ./src/index.html
Lignes:       13
====================================

<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <title>LAMBARA</title>
  <base href="/">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="icon" type="image/x-icon" href="favicon.ico">
</head>
<body>
  <app-root></app-root>
</body>
</html>

====================================
FICHIER: ./src/app/app.component.scss
Lignes:        0
====================================


====================================
FICHIER: ./src/app/auth/auth.component.scss
Lignes:      314
====================================

.auth-container {
  min-height: 100vh;
  display: flex;
  align-items: center;
  justify-content: center;
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  padding: 2rem;
  position: relative;
}

/* ===================================
   SÉLECTEUR DE LANGUE EN HAUT
   =================================== */

.language-selector-top {
  position: absolute;
  top: 1.5rem;
  right: 1.5rem;
  z-index: 1000;
}

.language-dropdown {
  position: relative;
}

.language-button {
  display: flex;
  align-items: center;
  gap: 0.5rem;
  padding: 0.625rem 1rem;
  background: rgba(255, 255, 255, 0.95);
  border: 1px solid rgba(255, 255, 255, 0.3);
  border-radius: 0.5rem;
  cursor: pointer;
  transition: all 0.3s ease;
  font-weight: 500;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);

  &:hover {
    background: white;
    transform: translateY(-2px);
    box-shadow: 0 6px 12px rgba(0, 0, 0, 0.15);
  }

  .flag {
    font-size: 1.25rem;
  }

  .lang-name {
    color: #374151;
    font-size: 0.875rem;
  }

  .chevron {
    width: 16px;
    height: 16px;
    color: #6b7280;
    transition: transform 0.2s;
  }
}

.language-dropdown.open .chevron {
  transform: rotate(180deg);
}

.dropdown-menu {
  position: absolute;
  top: calc(100% + 0.5rem);
  right: 0;
  background: white;
  border-radius: 0.5rem;
  box-shadow: 0 10px 25px rgba(0, 0, 0, 0.2);
  min-width: 150px;
  overflow: hidden;
  animation: slideDown 0.2s ease;
}

@keyframes slideDown {
  from {
    opacity: 0;
    transform: translateY(-10px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

.language-option {
  display: flex;
  align-items: center;
  gap: 0.5rem;
  width: 100%;
  padding: 0.75rem 1rem;
  border: none;
  background: none;
  cursor: pointer;
  text-align: left;
  transition: background-color 0.2s;

  &:hover {
    background: #f9fafb;
  }

  &.active {
    background: #eff6ff;

    .lang-name {
      color: #2563eb;
      font-weight: 600;
    }
  }

  .flag {
    font-size: 1.125rem;
  }

  .lang-name {
    color: #374151;
    font-size: 0.875rem;
  }

  .check-icon {
    width: 16px;
    height: 16px;
    color: #2563eb;
    margin-left: auto;
  }
}

/* ===================================
   BOÎTE AUTH
   =================================== */

.auth-box {
  background: white;
  border-radius: 1rem;
  box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3);
  padding: 3rem;
  width: 100%;
  max-width: 450px;
}

.auth-header {
  text-align: center;
  margin-bottom: 2rem;
}

.auth-title {
  font-size: 2rem;
  font-weight: 700;
  color: #1f2937;
  margin: 0 0 0.5rem 0;
}

.auth-subtitle {
  color: #6b7280;
  font-size: 1rem;
  margin: 0;
}

.auth-form {
  display: flex;
  flex-direction: column;
  gap: 1.5rem;
}

.form-group {
  display: flex;
  flex-direction: column;
}

.form-label {
  font-weight: 600;
  color: #374151;
  margin-bottom: 0.5rem;
  font-size: 0.875rem;
}

.form-input {
  padding: 0.875rem 1rem;
  border: 2px solid #e5e7eb;
  border-radius: 0.5rem;
  font-size: 1rem;
  transition: all 0.3s ease;

  &:focus {
    outline: none;
    border-color: #667eea;
    box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
  }

  &::placeholder {
    color: #9ca3af;
  }
}

.error-message {
  color: #ef4444;
  font-size: 0.75rem;
  margin-top: 0.25rem;
}

.auth-button {
  padding: 1rem;
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  color: white;
  border: none;
  border-radius: 0.5rem;
  font-weight: 600;
  font-size: 1rem;
  cursor: pointer;
  transition: all 0.3s ease;

  &:hover:not(:disabled) {
    transform: translateY(-2px);
    box-shadow: 0 10px 20px rgba(102, 126, 234, 0.3);
  }

  &:disabled {
    opacity: 0.6;
    cursor: not-allowed;
  }
}

.auth-error {
  padding: 1rem;
  background-color: #fee2e2;
  color: #991b1b;
  border-radius: 0.5rem;
  font-size: 0.875rem;
  text-align: center;
}

.auth-footer {
  margin-top: 1.5rem;
  text-align: center;
}

.toggle-button {
  background: none;
  border: none;
  color: #667eea;
  font-weight: 600;
  cursor: pointer;
  padding: 0.5rem 1rem;
  border-radius: 0.375rem;
  transition: all 0.2s;

  &:hover {
    background-color: #f3f4f6;
  }
}

/* ===================================
   RESPONSIVE
   =================================== */

@media (max-width: 768px) {
  .auth-container {
    padding: 1rem;
  }

  .language-selector-top {
    top: 1rem;
    right: 1rem;
  }

  .language-button .lang-name {
    display: none;
  }

  .language-button {
    padding: 0.5rem;
  }

  .auth-box {
    padding: 2rem;
  }

  .auth-title {
    font-size: 1.75rem;
  }
}

@media (max-width: 480px) {
  .auth-box {
    padding: 1.5rem;
  }

  .auth-title {
    font-size: 1.5rem;
  }

  .auth-subtitle {
    font-size: 0.875rem;
  }
}

/* ===================================
   SUPPORT RTL
   =================================== */

:host-context(.rtl) {
  .language-selector-top {
    right: auto;
    left: 1.5rem;
  }

  .dropdown-menu {
    right: auto;
    left: 0;
  }
}

====================================
FICHIER: ./src/app/avances/avances.component.scss
Lignes:      359
====================================

.avances-container {
  max-width: 1200px;
  margin: 0 auto;
  padding: 2rem;
}

.header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 2rem;
  gap: 1rem;
  flex-wrap: wrap;
}

.title {
  font-size: 2rem;
  font-weight: 700;
  color: #1f2937;
  margin: 0;
}

.btn {
  display: inline-flex;
  align-items: center;
  gap: 0.5rem;
  padding: 0.75rem 1.5rem;
  border: none;
  border-radius: 0.5rem;
  font-weight: 600;
  cursor: pointer;
  transition: all 0.3s;

  .icon {
    width: 20px;
    height: 20px;
  }
}

.btn-primary {
  background-color: #3b82f6;
  color: white;

  &:hover {
    background-color: #2563eb;
    transform: translateY(-2px);
    box-shadow: 0 4px 6px rgba(59, 130, 246, 0.3);
  }
}

.loading-spinner {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  padding: 3rem;

  .spinner {
    width: 40px;
    height: 40px;
    margin-bottom: 1rem;
    border: 4px solid #f3f4f6;
    border-top-color: #3b82f6;
    border-radius: 50%;
    animation: spin 1s linear infinite;
  }
}

@keyframes spin {
  to { transform: rotate(360deg); }
}

.no-data {
  text-align: center;
  padding: 3rem;
  color: #9ca3af;

  .no-data-icon {
    width: 64px;
    height: 64px;
    margin: 0 auto 1rem;
    opacity: 0.5;
  }

  p {
    font-size: 1.1rem;
  }
}

.marins-list {
  display: grid;
  gap: 1.5rem;
}

.marin-card {
  background: white;
  border-radius: 0.75rem;
  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
  overflow: hidden;
}

.marin-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 1.5rem;
  background: linear-gradient(135deg, #f9fafb 0%, #f3f4f6 100%);
  border-bottom: 2px solid #e5e7eb;
}

.marin-info {
  display: flex;
  align-items: center;
  gap: 1rem;
}

.marin-name {
  font-size: 1.25rem;
  font-weight: 700;
  color: #1f2937;
  margin: 0;
}

.fonction-badge {
  display: inline-block;
  padding: 0.25rem 0.75rem;
  border-radius: 0.375rem;
  font-size: 0.875rem;
  font-weight: 600;
  text-transform: capitalize;
}

.fonction-capitaine {
  background-color: #fef3c7;
  color: #92400e;
}

.fonction-second {
  background-color: #e0e7ff;
  color: #3730a3;
}

.fonction-mecanicien {
  background-color: #ccfbf1;
  color: #115e59;
}

.fonction-matelot {
  background-color: #f3e8ff;
  color: #6b21a8;
}

.marin-total {
  display: flex;
  flex-direction: column;
  align-items: flex-end;

  .total-label {
    font-size: 0.875rem;
    color: #6b7280;
    font-weight: 500;
  }

  .total-amount {
    font-size: 1.5rem;
    font-weight: 700;
    color: #059669;
  }
}

.avances-list {
  padding: 1rem;
}

.avance-item {
  padding: 1rem;
  border-bottom: 1px solid #f3f4f6;
  transition: background-color 0.2s;

  &:hover {
    background-color: #f9fafb;
  }

  &:last-child {
    border-bottom: none;
  }
}

.avance-main {
  display: flex;
  justify-content: space-between;
  align-items: flex-start;
  gap: 1rem;
}

.avance-details {
  flex: 1;
  display: flex;
  flex-direction: column;
  gap: 0.5rem;

  /* ✅ STYLE POUR LA DATE */
  .avance-date-row {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    font-weight: 600;
    color: #1f2937;
    font-size: 0.95rem;

    .date-icon {
      width: 18px;
      height: 18px;
      color: #3b82f6;
      flex-shrink: 0;
    }
  }

  /* ✅ STYLE POUR LA DESCRIPTION */
  .avance-description {
    display: flex;
    align-items: flex-start;
    gap: 0.5rem;
    font-size: 0.875rem;
    color: #6b7280;
    line-height: 1.5;
    padding-left: 1.625rem;

    .desc-icon {
      width: 16px;
      height: 16px;
      color: #9ca3af;
      flex-shrink: 0;
      margin-top: 0.125rem;
    }

    span {
      flex: 1;
    }
  }
}

.avance-actions {
  display: flex;
  align-items: center;
  gap: 0.5rem;
  flex-shrink: 0;

  .avance-amount {
    font-size: 1.125rem;
    font-weight: 700;
    color: #059669;
    margin-right: 0.5rem;
    white-space: nowrap;
  }
}

.btn-icon {
  padding: 0.5rem;
  border: none;
  border-radius: 0.375rem;
  cursor: pointer;
  transition: all 0.2s;

  svg {
    width: 18px;
    height: 18px;
  }
}

.btn-warning {
  background-color: #fef3c7;
  color: #92400e;

  &:hover {
    background-color: #fde68a;
  }
}

.btn-danger {
  background-color: #fee2e2;
  color: #991b1b;

  &:hover {
    background-color: #fecaca;
  }
}

.no-avances {
  padding: 2rem;
  text-align: center;
  color: #9ca3af;

  .no-avances-icon {
    width: 48px;
    height: 48px;
    margin: 0 auto 0.5rem;
    opacity: 0.5;
  }

  p {
    margin: 0;
  }
}

.total-card {
  background: linear-gradient(135deg, #10b981 0%, #059669 100%);
  color: white;
  padding: 1.5rem 2rem;
  border-radius: 0.75rem;
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-top: 2rem;
  box-shadow: 0 4px 6px rgba(16, 185, 129, 0.3);

  .total-label-main {
    font-size: 1.25rem;
    font-weight: 600;
  }

  .total-amount-main {
    font-size: 2rem;
    font-weight: 700;
  }
}

/* Responsive */
@media (max-width: 768px) {
  .avances-container {
    padding: 1rem;
  }

  .title {
    font-size: 1.5rem;
  }

  .marin-header {
    flex-direction: column;
    align-items: flex-start;
    gap: 1rem;
  }

  .avance-main {
    flex-direction: column;
    align-items: flex-start;
  }

  .avance-actions {
    width: 100%;
    justify-content: space-between;
  }

  .total-card {
    flex-direction: column;
    gap: 0.5rem;
    text-align: center;
  }
}

====================================
FICHIER: ./src/app/bateaux/bateau-form.component.scss
Lignes:      217
====================================

.form-container {
  max-width: 900px;
  width: 100%;
  background: white;
  border-radius: 0.75rem;
  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
  padding: 2rem;
  margin: 0 auto;
}

.form-header {
  margin-bottom: 2rem;
  border-bottom: 2px solid #e5e7eb;
  padding-bottom: 1rem;
}

.form-title {
  font-size: 1.75rem;
  font-weight: 700;
  color: #1f2937;
  margin: 0;
}

.form-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
  gap: 1.5rem;
  margin-bottom: 2rem;
}

.form-group {
  display: flex;
  flex-direction: column;
}

.form-label {
  font-weight: 600;
  color: #374151;
  margin-bottom: 0.5rem;
  font-size: 0.875rem;
}

.form-input {
  padding: 0.75rem;
  border: 1px solid #d1d5db;
  border-radius: 0.5rem;
  font-size: 1rem;
  transition: all 0.2s;
  width: 100%;

  &:focus {
    outline: none;
    border-color: #3b82f6;
    box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
  }

  &.error {
    border-color: #ef4444;
  }
}

.error-message {
  color: #ef4444;
  font-size: 0.75rem;
  margin-top: 0.25rem;
}

.form-actions {
  display: flex;
  justify-content: flex-end;
  gap: 1rem;
  padding-top: 1.5rem;
  border-top: 1px solid #e5e7eb;
  flex-wrap: wrap;
}

.btn {
  padding: 0.75rem 2rem;
  border: none;
  border-radius: 0.5rem;
  font-weight: 600;
  cursor: pointer;
  transition: all 0.3s;
  white-space: nowrap;

  &:disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }
}

.btn-primary {
  background-color: #3b82f6;
  color: white;

  &:hover:not(:disabled) {
    background-color: #2563eb;
    transform: translateY(-2px);
    box-shadow: 0 4px 6px rgba(59, 130, 246, 0.3);
  }
}

.btn-secondary {
  background-color: #6b7280;
  color: white;

  &:hover:not(:disabled) {
    background-color: #4b5563;
  }
}

/* ===================================
   RESPONSIVE
   =================================== */

@media (max-width: 768px) {
  .form-container {
    padding: 1.5rem;
    border-radius: 0.5rem;
  }

  .form-title {
    font-size: 1.5rem;
  }

  .form-grid {
    grid-template-columns: 1fr;
    gap: 1rem;
  }

  .form-actions {
    flex-direction: column-reverse;
    gap: 0.75rem;
  }

  .btn {
    width: 100%;
    justify-content: center;
  }
}

@media (max-width: 480px) {
  .form-container {
    padding: 1rem;
  }

  .form-title {
    font-size: 1.25rem;
  }

  .form-input {
    padding: 0.625rem;
    font-size: 0.9375rem;
  }

  .btn {
    padding: 0.625rem 1.5rem;
  }
}

/* AMÉLIORATION RESPONSIVE */
@media (max-width: 1024px) {
  .form-grid {
    grid-template-columns: repeat(2, 1fr);
  }
}

@media (max-width: 768px) {
  .form-container {
    padding: 1.5rem 1rem;
    border-radius: 0.5rem;
  }

  .form-title {
    font-size: 1.5rem;
  }

  .form-grid {
    grid-template-columns: 1fr;
    gap: 1rem;
  }

  .form-actions {
    flex-direction: column-reverse;
    gap: 0.75rem;
  }

  .btn {
    width: 100%;
    justify-content: center;
    padding: 0.875rem 1.5rem;
  }
}

@media (max-width: 480px) {
  .form-container {
    padding: 1rem 0.75rem;
  }

  .form-title {
    font-size: 1.25rem;
  }

  .form-label {
    font-size: 0.8125rem;
  }

  .form-input {
    padding: 0.625rem 0.75rem;
    font-size: 0.9375rem;
  }

  .btn {
    padding: 0.75rem 1.25rem;
    font-size: 0.9375rem;
  }
}

====================================
FICHIER: ./src/app/bateaux/bateaux-list.component.scss
Lignes:      476
====================================

.bateaux-container {
  max-width: 100%;
  width: 100%;
}

.header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 2rem;
  gap: 1rem;
  flex-wrap: wrap;
}

.title {
  font-size: 2rem;
  font-weight: 700;
  color: #1f2937;
  margin: 0;
}

.search-box {
  margin-bottom: 1.5rem;
}

.search-input {
  width: 100%;
  max-width: 400px;
  padding: 0.75rem 1rem;
  border: 1px solid #d1d5db;
  border-radius: 0.5rem;
  font-size: 1rem;
  
  &:focus {
    outline: none;
    border-color: #3b82f6;
    box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
  }
}

.table-container {
  background: white;
  border-radius: 0.75rem;
  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
  overflow-x: auto;
  width: 100%;
}

.data-table {
  width: 100%;
  border-collapse: collapse;
  min-width: 800px;

  thead {
    background-color: #f9fafb;
    
    th {
      padding: 1rem;
      text-align: left;
      font-weight: 600;
      color: #374151;
      border-bottom: 2px solid #e5e7eb;
      white-space: nowrap;
    }
  }

  tbody {
    tr {
      border-bottom: 1px solid #e5e7eb;
      transition: background-color 0.2s;

      &:hover {
        background-color: #f9fafb;
      }
    }

    td {
      padding: 1rem;
      color: #6b7280;
    }
  }
}

.font-bold {
  font-weight: 600;
  color: #1f2937;
}

.status-badge {
  display: inline-block;
  padding: 0.25rem 0.75rem;
  border-radius: 9999px;
  font-size: 0.875rem;
  font-weight: 600;
  text-transform: capitalize;
  white-space: nowrap;
}

.status-active {
  background-color: #d1fae5;
  color: #065f46;
}

.status-maintenance {
  background-color: #fef3c7;
  color: #92400e;
}

.status-inactive {
  background-color: #fee2e2;
  color: #991b1b;
}

.actions {
  display: flex;
  gap: 0.5rem;
  flex-wrap: wrap;
}

.btn {
  display: inline-flex;
  align-items: center;
  gap: 0.5rem;
  padding: 0.625rem 1.25rem;
  border: none;
  border-radius: 0.5rem;
  font-weight: 600;
  cursor: pointer;
  transition: all 0.3s;
  white-space: nowrap;

  .icon {
    width: 20px;
    height: 20px;
  }
}

.btn-primary {
  background-color: #3b82f6;
  color: white;

  &:hover {
    background-color: #2563eb;
    transform: translateY(-2px);
    box-shadow: 0 4px 6px rgba(59, 130, 246, 0.3);
  }
}

.btn-icon {
  padding: 0.5rem;
  border: none;
  border-radius: 0.375rem;
  cursor: pointer;
  transition: all 0.2s;

  svg {
    width: 18px;
    height: 18px;
  }
}

.btn-info {
  background-color: #dbeafe;
  color: #1e40af;

  &:hover {
    background-color: #bfdbfe;
  }
}

.btn-warning {
  background-color: #fef3c7;
  color: #92400e;

  &:hover {
    background-color: #fde68a;
  }
}

.btn-danger {
  background-color: #fee2e2;
  color: #991b1b;

  &:hover {
    background-color: #fecaca;
  }
}

/* ===================================
   RESPONSIVE
   =================================== */

@media (max-width: 768px) {
  .title {
    font-size: 1.5rem;
  }

  .header {
    flex-direction: column;
    align-items: stretch;
  }

  .btn {
    width: 100%;
    justify-content: center;
  }

  .search-input {
    max-width: 100%;
  }

  .table-container {
    border-radius: 0.5rem;
  }

  .data-table {
    font-size: 0.875rem;
    min-width: 600px;

    thead th {
      padding: 0.75rem 0.5rem;
    }

    tbody td {
      padding: 0.75rem 0.5rem;
    }
  }
}

@media (max-width: 480px) {
  .title {
    font-size: 1.25rem;
  }

  .data-table {
    font-size: 0.8125rem;
    min-width: 500px;

    thead th {
      padding: 0.5rem 0.25rem;
      font-size: 0.75rem;
    }

    tbody td {
      padding: 0.5rem 0.25rem;
    }
  }

  .btn-icon {
    padding: 0.375rem;

    svg {
      width: 16px;
      height: 16px;
    }
  }

  .status-badge {
    font-size: 0.75rem;
    padding: 0.125rem 0.5rem;
  }
}

/* AMÉLIORATION RESPONSIVE */
@media (max-width: 1024px) {
  .title {
    font-size: 1.75rem;
  }

  .data-table {
    min-width: 900px;
  }
}

@media (max-width: 768px) {
  .title {
    font-size: 1.5rem;
  }

  .header {
    flex-direction: column;
    align-items: stretch;
    gap: 0.75rem;
  }

  .btn {
    width: 100%;
    justify-content: center;
  }

  .search-input {
    max-width: 100%;
  }

  .table-container {
    border-radius: 0.5rem;
    overflow-x: scroll;
    -webkit-overflow-scrolling: touch;
  }

  .data-table {
    font-size: 0.875rem;
    min-width: 700px;

    thead th {
      padding: 0.75rem 0.5rem;
      font-size: 0.8125rem;
    }

    tbody td {
      padding: 0.75rem 0.5rem;
    }
  }

  .actions {
    flex-wrap: nowrap;
  }
}

@media (max-width: 480px) {
  .title {
    font-size: 1.25rem;
  }

  .data-table {
    font-size: 0.8125rem;
    min-width: 600px;

    thead th {
      padding: 0.5rem 0.375rem;
      font-size: 0.75rem;
    }

    tbody td {
      padding: 0.5rem 0.375rem;
    }
  }

  .btn-icon {
    padding: 0.375rem;

    svg {
      width: 16px;
      height: 16px;
    }
  }

  .status-badge {
    font-size: 0.75rem;
    padding: 0.125rem 0.5rem;
  }
}

/* Message d'information */
.selection-info {
  background: #eff6ff;
  border: 2px solid #3b82f6;
  border-radius: 0.75rem;
  padding: 1.5rem;
  display: flex;
  align-items: center;
  gap: 1rem;
  margin-bottom: 1.5rem;

  .info-icon {
    width: 32px;
    height: 32px;
    color: #3b82f6;
    flex-shrink: 0;
  }

  p {
    margin: 0;
    color: #1e40af;
    font-weight: 600;
    font-size: 1rem;
  }
}

/* Carte du bateau sélectionné */
.selected-boat-card {
  background: linear-gradient(135deg, #10b981 0%, #059669 100%);
  color: white;
  border-radius: 0.75rem;
  padding: 1.5rem;
  margin-bottom: 1.5rem;
  box-shadow: 0 4px 6px rgba(16, 185, 129, 0.3);

  .selected-header {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    margin-bottom: 1rem;

    .check-icon {
      width: 28px;
      height: 28px;
    }

    h3 {
      margin: 0;
      font-size: 1.25rem;
      font-weight: 700;
    }
  }

  .boat-info {
    margin-bottom: 1rem;

    .boat-name {
      font-size: 1.5rem;
      font-weight: 700;
      margin-bottom: 0.5rem;
    }

    .boat-details {
      display: flex;
      gap: 0.75rem;
      align-items: center;
      font-size: 0.9rem;
      opacity: 0.9;

      .separator {
        font-weight: bold;
      }
    }
  }

  .btn-change {
    background: rgba(255, 255, 255, 0.2);
    color: white;
    border: 2px solid white;
    padding: 0.625rem 1.25rem;
    border-radius: 0.5rem;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.2s;

    &:hover {
      background: white;
      color: #10b981;
    }
  }
}

/* Ligne sélectionnée dans le tableau */
.selected-row {
  background-color: #d1fae5 !important;
  cursor: pointer;

  &:hover {
    background-color: #a7f3d0 !important;
  }
}

.data-table tbody tr {
  cursor: pointer;
  transition: background-color 0.2s;

  &:hover {
    background-color: #f9fafb;
  }
}

.boat-name-cell {
  display: flex;
  align-items: center;
  gap: 0.5rem;

  .selected-icon {
    width: 18px;
    height: 18px;
    color: #10b981;
    flex-shrink: 0;
  }
}

====================================
FICHIER: ./src/app/components/language-selector/language-selector.component.scss
Lignes:      123
====================================

.language-selector {
  position: relative;
  display: inline-block;
}

.selector-button {
  display: flex;
  align-items: center;
  gap: 0.5rem;
  padding: 0.5rem 1rem;
  background: white;
  border: 1px solid #e5e7eb;
  border-radius: 0.5rem;
  cursor: pointer;
  transition: all 0.2s ease;
  font-size: 0.875rem;
  white-space: nowrap;

  &:hover {
    background: #f9fafb;
    border-color: #d1d5db;
  }
}

.flag {
  font-size: 1.25rem;
}

.language-name {
  font-weight: 500;
  color: #374151;
}

.chevron {
  width: 16px;
  height: 16px;
  color: #6b7280;
  transition: transform 0.2s;
}

.dropdown-menu {
  position: absolute;
  top: calc(100% + 0.5rem);
  right: 0;
  background: white;
  border: 1px solid #e5e7eb;
  border-radius: 0.5rem;
  box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1);
  display: none;
  z-index: 1000;
  min-width: 150px;

  &.show {
    display: block;
  }
}

.language-option {
  display: flex;
  align-items: center;
  gap: 0.5rem;
  width: 100%;
  padding: 0.75rem 1rem;
  border: none;
  background: none;
  cursor: pointer;
  text-align: left;
  transition: background-color 0.2s;

  &:hover {
    background: #f9fafb;
  }

  &.active {
    background: #eff6ff;
    
    .language-name {
      color: #2563eb;
      font-weight: 600;
    }
  }

  &:first-child {
    border-radius: 0.5rem 0.5rem 0 0;
  }

  &:last-child {
    border-radius: 0 0 0.5rem 0.5rem;
  }
}

.check-icon {
  width: 16px;
  height: 16px;
  color: #2563eb;
  margin-left: auto;
}

/* ===================================
   RESPONSIVE
   =================================== */

@media (max-width: 768px) {
  .language-name {
    display: none;
  }

  .selector-button {
    padding: 0.5rem;
  }

  .chevron {
    display: none;
  }
}

/* RTL Support */
:host-context(.rtl) {
  .dropdown-menu {
    right: auto;
    left: 0;
  }
}

====================================
FICHIER: ./src/app/dashboard/dashboard-home/dashboard-home.component.scss
Lignes:      304
====================================

.dashboard-home {
  max-width: 1400px;
  width: 100%;
}

.welcome-title {
  font-size: 2rem;
  font-weight: 700;
  color: #1f2937;
  margin-bottom: 2rem;
}

/* ===================================
   CARTES DE STATISTIQUES
   =================================== */

.stats-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
  gap: 1.5rem;
  margin-bottom: 3rem;
}

.stat-card {
  background: white;
  padding: 1.5rem;
  border-radius: 0.75rem;
  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
  display: flex;
  align-items: center;
  gap: 1rem;
  transition: all 0.3s ease;
  border-left: 4px solid;

  &:hover {
    box-shadow: 0 10px 25px rgba(0, 0, 0, 0.15);
    transform: translateY(-4px);
  }

  &.blue {
    border-color: #3b82f6;
    .stat-icon {
      background-color: #dbeafe;
      color: #3b82f6;
    }
  }

  &.green {
    border-color: #059669;
    .stat-icon {
      background-color: #d1fae5;
      color: #059669;
    }
  }

  &.yellow {
    border-color: #f59e0b;
    .stat-icon {
      background-color: #fef3c7;
      color: #f59e0b;
    }
  }

  &.purple {
    border-color: #9333ea;
    .stat-icon {
      background-color: #e9d5ff;
      color: #9333ea;
    }
  }
}

.stat-icon {
  width: 48px;
  height: 48px;
  border-radius: 0.5rem;
  display: flex;
  align-items: center;
  justify-content: center;
  flex-shrink: 0;

  svg {
    width: 24px;
    height: 24px;
  }
}

.stat-content {
  flex: 1;
}

.stat-value {
  font-size: 2rem;
  font-weight: 700;
  color: #1f2937;
  line-height: 1;
  margin-bottom: 0.25rem;
}

.stat-label {
  font-size: 0.875rem;
  color: #6b7280;
  font-weight: 500;
}

/* ===================================
   SECTION ACTIVITÉS
   =================================== */

.activities-section {
  background: white;
  border-radius: 0.75rem;
  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
  overflow: hidden;
}

.section-header {
  padding: 1.5rem;
  border-bottom: 1px solid #e5e7eb;
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.section-title {
  font-size: 1.25rem;
  font-weight: 700;
  color: #1f2937;
  margin: 0;
}

.activity-count {
  font-size: 0.875rem;
  color: #6b7280;
  background-color: #f3f4f6;
  padding: 0.25rem 0.75rem;
  border-radius: 9999px;
  font-weight: 500;
}

.activities-container {
  max-height: 500px;
  overflow-y: auto;
}

.activity-item {
  padding: 1rem 1.5rem;
  border-bottom: 1px solid #f3f4f6;
  display: flex;
  align-items: center;
  gap: 1rem;
  transition: background-color 0.2s;

  &:hover {
    background-color: #f9fafb;
  }

  &:last-child {
    border-bottom: none;
  }
}

.activity-icon {
  width: 40px;
  height: 40px;
  border-radius: 0.5rem;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 1.25rem;
  flex-shrink: 0;
}

.activity-content {
  flex: 1;
  min-width: 0;
}

.activity-title {
  display: flex;
  align-items: center;
  gap: 0.5rem;
  margin-bottom: 0.25rem;
}

.activity-name {
  font-weight: 600;
  color: #1f2937;
  font-size: 0.9375rem;
}

.activity-description {
  font-size: 0.875rem;
  color: #6b7280;
}

.activity-time {
  font-size: 0.75rem;
  color: #9ca3af;
  white-space: nowrap;
  flex-shrink: 0;
}

.no-activities {
  padding: 3rem;
  text-align: center;
  color: #9ca3af;
}

.no-data-icon {
  width: 64px;
  height: 64px;
  margin: 0 auto 1rem;
  opacity: 0.5;
}

.loading-spinner {
  padding: 3rem;
  text-align: center;
}

.spinner {
  width: 40px;
  height: 40px;
  margin: 0 auto 1rem;
  border: 4px solid #f3f4f6;
  border-top-color: #3b82f6;
  border-radius: 50%;
  animation: spin 1s linear infinite;
}

@keyframes spin {
  to { transform: rotate(360deg); }
}

/* ===================================
   RESPONSIVE
   =================================== */

@media (max-width: 768px) {
  .welcome-title {
    font-size: 1.5rem;
  }

  .stats-grid {
    grid-template-columns: 1fr;
    gap: 1rem;
  }

  .stat-card {
    padding: 1.25rem;
  }

  .stat-value {
    font-size: 1.75rem;
  }

  .section-header {
    flex-direction: column;
    align-items: flex-start;
    gap: 0.5rem;
  }

  .activity-item {
    padding: 1rem;
  }

  .activity-time {
    font-size: 0.6875rem;
  }
}

@media (max-width: 480px) {
  .welcome-title {
    font-size: 1.25rem;
    margin-bottom: 1.5rem;
  }

  .stats-grid {
    margin-bottom: 2rem;
  }

  .stat-card {
    padding: 1rem;
  }

  .stat-icon {
    width: 40px;
    height: 40px;

    svg {
      width: 20px;
      height: 20px;
    }
  }

  .stat-value {
    font-size: 1.5rem;
  }

  .stat-label {
    font-size: 0.8125rem;
  }
}

====================================
FICHIER: ./src/app/dashboard/dashboard.component.scss
Lignes:      482
====================================

.dashboard-layout {
  display: flex;
  min-height: 100vh;
  background-color: #f5f7fa;
}

.sidebar {
  width: 260px;
  background: linear-gradient(180deg, #1e3a8a 0%, #1e40af 100%);
  color: white;
  position: fixed;
  height: 100vh;
  left: 0;
  top: 0;
  box-shadow: 2px 0 8px rgba(0, 0, 0, 0.1);
  z-index: 1000;
  transition: all 0.3s ease;
  overflow-y: auto;
}

.logo {
  padding: 1.5rem;
  border-bottom: 1px solid rgba(255, 255, 255, 0.1);

  h2 {
    margin: 0;
    font-size: 1.5rem;
    font-weight: 700;
  }
}

.sidebar-nav {
  padding: 1rem 0;

  ul {
    list-style: none;
    padding: 0;
    margin: 0;
  }

  li {
    margin: 0.25rem 0;
  }

  .nav-item {
    display: flex;
    align-items: center;
    padding: 0.875rem 1.5rem;
    color: rgba(255, 255, 255, 0.8);
    text-decoration: none;
    transition: all 0.3s ease;
    border-left: 3px solid transparent;

    &:hover {
      background-color: rgba(255, 255, 255, 0.1);
      color: white;
    }

    &.active {
      background-color: rgba(255, 255, 255, 0.15);
      border-left-color: #60a5fa;
      color: white;
      font-weight: 600;
    }

    span {
      margin-left: 0.75rem;
      font-weight: 500;
    }
  }

  .nav-icon {
    width: 20px;
    height: 20px;
    flex-shrink: 0;
  }
}

.main-content {
  margin-left: 260px;
  flex: 1;
  display: flex;
  flex-direction: column;
  width: calc(100% - 260px);
  min-width: 0;
  transition: margin 0.3s ease;
}

.header {
  background: white;
  padding: 1rem 2rem;
  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
  display: flex;
  justify-content: space-between;
  align-items: center;
  gap: 1.5rem;
  position: sticky;
  top: 0;
  z-index: 900;
}

.boat-selector {
  flex: 1;
}

/* Badge du bateau sélectionné */
.selected-boat-badge {
  display: inline-flex;
  align-items: center;
  gap: 0.75rem;
  background: linear-gradient(135deg, #10b981 0%, #059669 100%);
  color: white;
  padding: 0.75rem 1.25rem;
  border-radius: 0.75rem;
  cursor: pointer;
  transition: all 0.3s ease;
  box-shadow: 0 2px 4px rgba(16, 185, 129, 0.2);

  &:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 8px rgba(16, 185, 129, 0.3);
  }

  .boat-icon {
    width: 24px;
    height: 24px;
    flex-shrink: 0;
  }

  .boat-info {
    display: flex;
    flex-direction: column;
    gap: 0.125rem;

    .boat-label {
      font-size: 0.75rem;
      opacity: 0.9;
      font-weight: 500;
    }

    .boat-name {
      font-size: 1rem;
      font-weight: 700;
    }

    .boat-registration {
      font-size: 0.875rem;
      opacity: 0.9;
    }
  }

  .change-icon {
    width: 20px;
    height: 20px;
    flex-shrink: 0;
    margin-left: auto;
    opacity: 0.8;
  }
}

/* Badge aucun bateau sélectionné */
.no-boat-badge {
  display: inline-flex;
  align-items: center;
  gap: 0.75rem;
  background: #fee2e2;
  color: #991b1b;
  padding: 0.75rem 1.25rem;
  border-radius: 0.75rem;
  border: 2px solid #ef4444;
  cursor: pointer;
  transition: all 0.3s ease;
  animation: pulse 2s ease-in-out infinite;

  &:hover {
    background: #fecaca;
    transform: scale(1.02);
  }

  .warning-icon {
    width: 24px;
    height: 24px;
    flex-shrink: 0;
    animation: shake 1s ease-in-out infinite;
  }

  .no-boat-info {
    display: flex;
    flex-direction: column;
    gap: 0.125rem;

    .no-boat-label {
      font-size: 0.875rem;
      font-weight: 700;
    }

    .no-boat-action {
      font-size: 0.75rem;
      opacity: 0.8;
    }
  }
}

@keyframes pulse {
  0%, 100% {
    opacity: 1;
  }
  50% {
    opacity: 0.85;
  }
}

@keyframes shake {
  0%, 100% {
    transform: rotate(0deg);
  }
  25% {
    transform: rotate(-5deg);
  }
  75% {
    transform: rotate(5deg);
  }
}

.content {
  padding: 2rem;
  flex: 1;
  width: 100%;
  overflow-x: hidden;
}

/* RESPONSIVE */
@media (max-width: 1024px) {
  .sidebar {
    width: 220px;
  }

  .main-content {
    margin-left: 220px;
    width: calc(100% - 220px);
  }

  .content {
    padding: 1.5rem;
  }

  .boat-info .boat-name {
    font-size: 0.9rem;
  }

  .boat-info .boat-registration {
    font-size: 0.8rem;
  }
}

@media (max-width: 768px) {
  .sidebar {
    transform: translateX(-100%);
    width: 260px;
  }

  .main-content {
    margin-left: 0;
    width: 100%;
  }

  .header {
    padding: 0.75rem 1rem;
    flex-wrap: wrap;
  }

  .boat-selector {
    width: 100%;
    order: 1;
    margin-top: 0.75rem;
  }

  .selected-boat-badge,
  .no-boat-badge {
    width: 100%;
    justify-content: flex-start;
  }

  .content {
    padding: 1rem;
  }
}

@media (max-width: 480px) {
  .content {
    padding: 0.75rem;
  }

  .selected-boat-badge,
  .no-boat-badge {
    padding: 0.625rem 1rem;
  }

  .boat-info .boat-name {
    font-size: 0.875rem;
  }

  .boat-info .boat-registration {
    font-size: 0.75rem;
  }

  .no-boat-info .no-boat-label {
    font-size: 0.8125rem;
  }

  .no-boat-info .no-boat-action {
    font-size: 0.6875rem;
  }
}

/* RTL SUPPORT */
body.rtl,
:host-context(.rtl) {
  .sidebar {
    left: auto;
    right: 0;
    box-shadow: -2px 0 8px rgba(0, 0, 0, 0.1);
  }

  .nav-item {
    border-left: none;
    border-right: 3px solid transparent;

    &.active {
      border-right-color: #60a5fa;
    }

    span {
      margin-left: 0;
      margin-right: 0.75rem;
    }
  }

  .main-content {
    margin-left: 0;
    margin-right: 260px;
  }

  @media (max-width: 1024px) {
    .main-content {
      margin-right: 220px;
    }
  }

  @media (max-width: 768px) {
    .sidebar {
      transform: translateX(100%);
    }

    .main-content {
      margin-right: 0;
    }
  }
}

/* Menu item désactivé */
.menu-disabled {
  position: relative;

  .nav-item-disabled {
    display: flex;
    align-items: center;
    padding: 0.875rem 1.5rem;
    color: rgba(255, 255, 255, 0.4);
    cursor: not-allowed;
    position: relative;

    span {
      margin-left: 0.75rem;
      font-weight: 500;
    }

    .lock-icon {
      width: 16px;
      height: 16px;
      margin-left: auto;
    }
  }

  .tooltip-disabled {
    position: absolute;
    left: 100%;
    top: 50%;
    transform: translateY(-50%);
    background: #1f2937;
    color: white;
    padding: 0.5rem 0.75rem;
    border-radius: 0.375rem;
    font-size: 0.875rem;
    white-space: nowrap;
    margin-left: 0.5rem;
    opacity: 0;
    visibility: hidden;
    transition: all 0.3s ease;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.3);
    z-index: 1001;
    pointer-events: none;

    &::before {
      content: '';
      position: absolute;
      right: 100%;
      top: 50%;
      transform: translateY(-50%);
      border: 6px solid transparent;
      border-right-color: #1f2937;
    }
  }

  &:hover .tooltip-disabled {
    opacity: 1;
    visibility: visible;
  }
}

/* RTL Support pour le tooltip */
body.rtl,
:host-context(.rtl) {
  .menu-disabled {
    .nav-item-disabled {
      span {
        margin-left: 0;
        margin-right: 0.75rem;
      }

      .lock-icon {
        margin-left: 0;
        margin-right: auto;
      }
    }

    .tooltip-disabled {
      left: auto;
      right: 100%;
      margin-left: 0;
      margin-right: 0.5rem;

      &::before {
        right: auto;
        left: 100%;
        border-right-color: transparent;
        border-left-color: #1f2937;
      }
    }
  }
}

/* Responsive */
@media (max-width: 768px) {
  .menu-disabled {
    .tooltip-disabled {
      position: fixed;
      left: 50%;
      right: auto;
      top: auto;
      bottom: 20px;
      transform: translateX(-50%);
      margin-left: 0;

      &::before {
        display: none;
      }
    }
  }
}

// Bouton Mock Data
.mock-data-btn {
  &:hover {
    transform: translateY(-2px);
    box-shadow: 0 6px 20px rgba(102, 126, 234, 0.6) !important;
  }
  
  &:active {
    transform: translateY(0);
  }
}

====================================
FICHIER: ./src/app/marins/marin-form.component.scss
Lignes:      159
====================================

.form-container {
  max-width: 900px;
  width: 100%;
  background: white;
  border-radius: 0.75rem;
  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
  padding: 2rem;
  margin: 0 auto;
}

.form-header {
  margin-bottom: 2rem;
  border-bottom: 2px solid #e5e7eb;
  padding-bottom: 1rem;
}

.form-title {
  font-size: 1.75rem;
  font-weight: 700;
  color: #1f2937;
  margin: 0;
}

.form-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
  gap: 1.5rem;
  margin-bottom: 2rem;
}

.form-group {
  display: flex;
  flex-direction: column;
}

.form-label {
  font-weight: 600;
  color: #374151;
  margin-bottom: 0.5rem;
  font-size: 0.875rem;
}

.form-input {
  padding: 0.75rem;
  border: 1px solid #d1d5db;
  border-radius: 0.5rem;
  font-size: 1rem;
  transition: all 0.2s;
  width: 100%;

  &:focus {
    outline: none;
    border-color: #3b82f6;
    box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
  }

  &.error {
    border-color: #ef4444;
  }
}

.error-message {
  color: #ef4444;
  font-size: 0.75rem;
  margin-top: 0.25rem;
}

.form-actions {
  display: flex;
  justify-content: flex-end;
  gap: 1rem;
  padding-top: 1.5rem;
  border-top: 1px solid #e5e7eb;
  flex-wrap: wrap;
}

.btn {
  padding: 0.75rem 2rem;
  border: none;
  border-radius: 0.5rem;
  font-weight: 600;
  cursor: pointer;
  transition: all 0.3s;
  white-space: nowrap;

  &:disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }
}

.btn-primary {
  background-color: #3b82f6;
  color: white;

  &:hover:not(:disabled) {
    background-color: #2563eb;
    transform: translateY(-2px);
    box-shadow: 0 4px 6px rgba(59, 130, 246, 0.3);
  }
}

.btn-secondary {
  background-color: #6b7280;
  color: white;

  &:hover:not(:disabled) {
    background-color: #4b5563;
  }
}

/* ===================================
   RESPONSIVE
   =================================== */

@media (max-width: 768px) {
  .form-container {
    padding: 1.5rem;
    border-radius: 0.5rem;
  }

  .form-title {
    font-size: 1.5rem;
  }

  .form-grid {
    grid-template-columns: 1fr;
    gap: 1rem;
  }

  .form-actions {
    flex-direction: column-reverse;
    gap: 0.75rem;
  }

  .btn {
    width: 100%;
    justify-content: center;
  }
}

@media (max-width: 480px) {
  .form-container {
    padding: 1rem;
  }

  .form-title {
    font-size: 1.25rem;
  }

  .form-input {
    padding: 0.625rem;
    font-size: 0.9375rem;
  }

  .btn {
    padding: 0.625rem 1.5rem;
  }
}

====================================
FICHIER: ./src/app/marins/marins-list.component.scss
Lignes:      259
====================================

.bateaux-container {
  max-width: 100%;
  width: 100%;
}

.header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 2rem;
  gap: 1rem;
  flex-wrap: wrap;
}

.title {
  font-size: 2rem;
  font-weight: 700;
  color: #1f2937;
  margin: 0;
}

/* ✅ Le style du bouton est maintenant dans _btn-back.scss */

.table-container {
  background: white;
  border-radius: 0.75rem;
  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
  overflow-x: auto;
  width: 100%;
}

.data-table {
  width: 100%;
  border-collapse: collapse;
  min-width: 800px;

  thead {
    background-color: #f9fafb;

    th {
      padding: 1rem;
      text-align: left;
      font-weight: 600;
      color: #374151;
      border-bottom: 2px solid #e5e7eb;
      white-space: nowrap;
    }
  }

  tbody {
    tr {
      border-bottom: 1px solid #e5e7eb;
      transition: background-color 0.2s;

      &:hover {
        background-color: #f9fafb;
      }

      td {
        padding: 1rem;
        color: #6b7280;

        &.font-bold {
          font-weight: 600;
          color: #1f2937;
        }
      }
    }
  }
}

.status-badge {
  display: inline-block;
  padding: 0.25rem 0.75rem;
  border-radius: 9999px;
  font-size: 0.875rem;
  font-weight: 600;
  text-transform: capitalize;
  white-space: nowrap;
}

.status-active {
  background-color: #d1fae5;
  color: #065f46;
}

.status-leave {
  background-color: #fef3c7;
  color: #92400e;
}

.status-inactive {
  background-color: #fee2e2;
  color: #991b1b;
}

.fonction-badge {
  display: inline-block;
  padding: 0.25rem 0.75rem;
  border-radius: 0.375rem;
  font-size: 0.875rem;
  font-weight: 600;
  text-transform: capitalize;
  white-space: nowrap;
}

.fonction-capitaine {
  background-color: #fef3c7;
  color: #92400e;
}

.fonction-second {
  background-color: #e0e7ff;
  color: #3730a3;
}

.fonction-mecanicien {
  background-color: #ccfbf1;
  color: #115e59;
}

.fonction-matelot {
  background-color: #f3e8ff;
  color: #6b21a8;
}

.actions {
  display: flex;
  gap: 0.5rem;
  flex-wrap: wrap;
}

.btn {
  display: inline-flex;
  align-items: center;
  gap: 0.5rem;
  padding: 0.625rem 1.25rem;
  border: none;
  border-radius: 0.5rem;
  font-weight: 600;
  cursor: pointer;
  transition: all 0.3s;
  white-space: nowrap;

  .icon {
    width: 20px;
    height: 20px;
  }
}

.btn-primary {
  background-color: #3b82f6;
  color: white;

  &:hover {
    background-color: #2563eb;
    transform: translateY(-2px);
    box-shadow: 0 4px 6px rgba(59, 130, 246, 0.3);
  }
}

.btn-icon {
  padding: 0.5rem;
  border: none;
  border-radius: 0.375rem;
  cursor: pointer;
  transition: all 0.2s;

  svg {
    width: 18px;
    height: 18px;
  }
}

.btn-warning {
  background-color: #fef3c7;
  color: #92400e;

  &:hover {
    background-color: #fde68a;
  }
}

.btn-danger {
  background-color: #fee2e2;
  color: #991b1b;

  &:hover {
    background-color: #fecaca;
  }
}

/* Responsive */
@media (max-width: 768px) {
  .title {
    font-size: 1.5rem;
  }

  .header {
    flex-direction: column;
    align-items: stretch;
  }

  .btn {
    width: 100%;
    justify-content: center;
  }

  .table-container {
    border-radius: 0.5rem;
  }

  .data-table {
    font-size: 0.875rem;
    min-width: 600px;

    thead th {
      padding: 0.75rem 0.5rem;
    }

    tbody td {
      padding: 0.75rem 0.5rem;
    }
  }
}

@media (max-width: 480px) {
  .title {
    font-size: 1.25rem;
  }

  .data-table {
    font-size: 0.8125rem;
    min-width: 500px;

    thead th {
      padding: 0.5rem 0.25rem;
      font-size: 0.75rem;
    }

    tbody td {
      padding: 0.5rem 0.25rem;
    }
  }

  .btn-icon {
    padding: 0.375rem;

    svg {
      width: 16px;
      height: 16px;
    }
  }

  .status-badge, .fonction-badge {
    font-size: 0.75rem;
    padding: 0.125rem 0.5rem;
  }
}

====================================
FICHIER: ./src/app/salaires/salaires-list.component.scss
Lignes:      359
====================================

.salaires-container {
  max-width: 1600px;
  margin: 0 auto;
  padding: 2rem;
}

.header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 2rem;
  flex-wrap: wrap;
  gap: 1rem;
}

.title {
  font-size: 2rem;
  font-weight: 700;
  color: #1f2937;
  margin: 0;
}

.btn {
  display: inline-flex;
  align-items: center;
  gap: 0.5rem;
  padding: 0.75rem 1.5rem;
  border: none;
  border-radius: 0.5rem;
  font-weight: 600;
  cursor: pointer;
  transition: all 0.3s;

  svg {
    width: 20px;
    height: 20px;
  }

  &:disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }
}

.btn-primary {
  background-color: #3b82f6;
  color: white;

  &:hover:not(:disabled) {
    background-color: #2563eb;
    transform: translateY(-2px);
  }
}

.btn-success {
  background-color: #10b981;
  color: white;

  &:hover:not(:disabled) {
    background-color: #059669;
    transform: translateY(-2px);
  }
}

.btn-lg {
  padding: 1rem 2rem;
  font-size: 1.125rem;
  margin-top: 1.5rem;
}

.btn-sm {
  padding: 0.5rem 1rem;
  font-size: 0.875rem;
}

.btn-pay {
  background-color: #10b981;
  color: white;

  &:hover:not(:disabled) {
    background-color: #059669;
  }

  &:disabled {
    background-color: #9ca3af;
  }
}

.loading {
  text-align: center;
  padding: 3rem;

  .spinner {
    width: 40px;
    height: 40px;
    margin: 0 auto 1rem;
    border: 4px solid #f3f4f6;
    border-top-color: #3b82f6;
    border-radius: 50%;
    animation: spin 1s linear infinite;
  }
}

@keyframes spin {
  to { transform: rotate(360deg); }
}

.no-data {
  text-align: center;
  padding: 3rem;
  color: #9ca3af;

  .no-data-icon {
    width: 64px;
    height: 64px;
    margin: 0 auto 1rem;
    opacity: 0.5;
  }
}

.section-card {
  background: white;
  border-radius: 0.75rem;
  padding: 2rem;
  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
  margin-bottom: 2rem;

  h2 {
    font-size: 1.5rem;
    font-weight: 700;
    color: #1f2937;
    margin: 0 0 1.5rem 0;
  }
}

.sorties-list {
  display: grid;
  gap: 1rem;
  margin-bottom: 1.5rem;
}

.sortie-item {
  display: flex;
  align-items: center;
  gap: 1rem;
  padding: 1rem;
  border: 2px solid #e5e7eb;
  border-radius: 0.5rem;
  cursor: pointer;
  transition: all 0.3s;

  &:hover {
    border-color: #3b82f6;
    background-color: #f9fafb;
  }

  &.selected {
    border-color: #10b981;
    background-color: #d1fae5;
  }

  input[type="checkbox"] {
    width: 20px;
    height: 20px;
  }

  .sortie-info {
    flex: 1;
    display: flex;
    flex-direction: column;
    gap: 0.25rem;

    strong {
      color: #1f2937;
    }

    span {
      font-size: 0.875rem;
      color: #6b7280;
    }
  }

  .status-badge {
    padding: 0.25rem 0.75rem;
    border-radius: 0.375rem;
    font-size: 0.875rem;
    font-weight: 600;
  }

  .status-en-cours {
    background-color: #dbeafe;
    color: #1e40af;
  }

  .status-terminee {
    background-color: #d1fae5;
    color: #065f46;
  }
}

.summary-cards {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
  gap: 1.5rem;
  margin-bottom: 2rem;
}

.summary-card {
  background: white;
  border-radius: 0.75rem;
  padding: 1.5rem;
  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);

  h3 {
    font-size: 0.875rem;
    font-weight: 600;
    color: #6b7280;
    margin: 0 0 0.5rem 0;
    text-transform: uppercase;
    letter-spacing: 0.05em;
  }

  .amount {
    font-size: 1.75rem;
    font-weight: 700;
    margin: 0;

    &.big {
      font-size: 2.25rem;
    }
  }

  .detail {
    font-size: 0.875rem;
    color: #6b7280;
    margin: 0.25rem 0 0 0;
  }

  &.revenue .amount {
    color: #10b981;
  }

  &.expenses .amount {
    color: #ef4444;
  }

  &.benefit .amount {
    color: #3b82f6;
  }

  &.owner {
    background: linear-gradient(135deg, #3b82f6 0%, #2563eb 100%);
    color: white;

    h3, .amount {
      color: white;
    }
  }

  &.crew {
    background: linear-gradient(135deg, #10b981 0%, #059669 100%);
    color: white;

    h3, .amount, .detail {
      color: white;
    }
  }
}

.table-container {
  overflow-x: auto;
}

.salaires-table {
  width: 100%;
  border-collapse: collapse;

  thead {
    background-color: #f9fafb;

    th {
      padding: 1rem;
      text-align: left;
      font-weight: 600;
      color: #374151;
      border-bottom: 2px solid #e5e7eb;
      white-space: nowrap;

      &.reste {
        background-color: #d1fae5;
        color: #065f46;
      }
    }
  }

  tbody {
    tr {
      border-bottom: 1px solid #e5e7eb;

      &:hover {
        background-color: #f9fafb;
      }

      td {
        padding: 1rem;
        color: #6b7280;

        &.marin-name {
          font-weight: 600;
          color: #1f2937;
        }

        &.avances {
          color: #ef4444;
        }

        &.paiements {
          color: #3b82f6;
        }

        &.reste {
          background-color: #f0fdf4;
          font-size: 1.125rem;

          strong {
            color: #059669;
          }

          &.paid strong {
            color: #9ca3af;
          }
        }
      }
    }
  }
}

/* Responsive */
@media (max-width: 768px) {
  .salaires-container {
    padding: 1rem;
  }

  .title {
    font-size: 1.5rem;
  }

  .summary-cards {
    grid-template-columns: 1fr;
  }

  .table-container {
    overflow-x: scroll;
  }

  .salaires-table {
    font-size: 0.875rem;
  }
}

====================================
FICHIER: ./src/app/sorties/depense-form/depense-form.component.scss
Lignes:       88
====================================

// Styles copiés depuis marin-form.component.scss pour la cohérence
.form-container {
  max-width: 900px;
  width: 100%;
  background: white;
  border-radius: 0.75rem;
  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
  padding: 2rem;
  margin: 0 auto;
}
.form-header {
  margin-bottom: 2rem;
  border-bottom: 2px solid #e5e7eb;
  padding-bottom: 1rem;
}
.form-title {
  font-size: 1.75rem;
  font-weight: 700;
  color: #1f2937;
  margin: 0;
}
.form-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
  gap: 1.5rem;
  margin-bottom: 2rem;
}
.form-group {
  display: flex;
  flex-direction: column;
}
.full-width {
  grid-column: 1 / -1;
}
.form-label {
  font-weight: 600;
  color: #374151;
  margin-bottom: 0.5rem;
  font-size: 0.875rem;
}
.form-input {
  padding: 0.75rem;
  border: 1px solid #d1d5db;
  border-radius: 0.5rem;
  font-size: 1rem;
  transition: all 0.2s;
  width: 100%;
}
.form-input:focus {
  outline: none;
  border-color: #3b82f6;
  box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
}
.form-actions {
  display: flex;
  justify-content: flex-end;
  gap: 1rem;
  padding-top: 1.5rem;
  border-top: 1px solid #e5e7eb;
  flex-wrap: wrap;
}
.btn {
  padding: 0.75rem 2rem;
  border: none;
  border-radius: 0.5rem;
  font-weight: 600;
  cursor: pointer;
  transition: all 0.3s;
  white-space: nowrap;
}
.btn:disabled {
  opacity: 0.5;
  cursor: not-allowed;
}
.btn-primary {
  background-color: #3b82f6;
  color: white;
}
.btn-primary:hover:not(:disabled) {
  background-color: #2563eb;
}
.btn-secondary {
  background-color: #6b7280;
  color: white;
}
.btn-secondary:hover:not(:disabled) {
  background-color: #4b5563;
}

====================================
FICHIER: ./src/app/sorties/details/sorties-details.component.scss
Lignes:        0
====================================


====================================
FICHIER: ./src/app/sorties/factures/factures.component.scss
Lignes:      215
====================================

.factures-container {
  max-width: 1400px;
  margin: 0 auto;
  padding: 2rem;
}

.header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 2rem;
  flex-wrap: wrap;
  gap: 1rem;
}

.title {
  font-size: 2rem;
  font-weight: 700;
  color: #1f2937;
  margin: 0;
}

.btn, .btn-back {
  display: inline-flex;
  align-items: center;
  gap: 0.5rem;
  padding: 0.75rem 1.5rem;
  border: none;
  border-radius: 0.5rem;
  font-weight: 600;
  cursor: pointer;
  transition: all 0.3s;
  text-decoration: none;

  svg {
    width: 20px;
    height: 20px;
  }
}

.btn-back {
  background-color: #6b7280;
  color: white;

  &:hover {
    background-color: #4b5563;
  }
}

.btn-primary {
  background-color: #10b981;
  color: white;

  &:hover {
    background-color: #059669;
    transform: translateY(-2px);
  }
}

.btn-sm {
  padding: 0.5rem 1rem;
  font-size: 0.875rem;

  svg {
    width: 16px;
    height: 16px;
  }
}

.btn-warning {
  background-color: #fef3c7;
  color: #92400e;

  &:hover {
    background-color: #fde68a;
  }
}

.btn-danger {
  background-color: #fee2e2;
  color: #991b1b;

  &:hover {
    background-color: #fecaca;
  }
}

.loading {
  text-align: center;
  padding: 3rem;

  .spinner {
    width: 40px;
    height: 40px;
    margin: 0 auto 1rem;
    border: 4px solid #f3f4f6;
    border-top-color: #3b82f6;
    border-radius: 50%;
    animation: spin 1s linear infinite;
  }
}

@keyframes spin {
  to { transform: rotate(360deg); }
}

.total-card {
  background: linear-gradient(135deg, #10b981 0%, #059669 100%);
  color: white;
  padding: 2rem;
  border-radius: 0.75rem;
  box-shadow: 0 4px 6px rgba(16, 185, 129, 0.3);
  margin-bottom: 2rem;
  text-align: center;

  h3 {
    margin: 0 0 0.5rem 0;
    font-size: 1.125rem;
    font-weight: 600;
    opacity: 0.9;
  }

  .total-amount {
    margin: 0;
    font-size: 2.5rem;
    font-weight: 700;
  }
}

.no-data {
  text-align: center;
  padding: 3rem;
  color: #9ca3af;

  .no-data-icon {
    width: 64px;
    height: 64px;
    margin: 0 auto 1rem;
    opacity: 0.5;
  }
}

.factures-grid {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
  gap: 1.5rem;
}

.facture-card {
  background: white;
  border-radius: 0.75rem;
  padding: 1.5rem;
  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
  transition: all 0.3s;

  &:hover {
    transform: translateY(-4px);
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
  }
}

.facture-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 1rem;
  padding-bottom: 1rem;
  border-bottom: 2px solid #e5e7eb;

  h3 {
    margin: 0;
    font-size: 1.25rem;
    font-weight: 700;
    color: #1f2937;
  }

  .facture-amount {
    font-size: 1.5rem;
    font-weight: 700;
    color: #10b981;
  }
}

.facture-body {
  margin-bottom: 1rem;

  p {
    margin: 0.5rem 0;
    color: #6b7280;
    font-size: 0.875rem;

    strong {
      color: #1f2937;
    }
  }
}

.facture-actions {
  display: flex;
  gap: 0.5rem;
}

@media (max-width: 768px) {
  .factures-container {
    padding: 1rem;
  }

  .title {
    font-size: 1.5rem;
  }

  .factures-grid {
    grid-template-columns: 1fr;
  }
}

====================================
FICHIER: ./src/app/sorties/form/sorties-form.component.scss
Lignes:        0
====================================


====================================
FICHIER: ./src/app/sorties/list/sorties-list.component.scss
Lignes:        0
====================================


====================================
FICHIER: ./src/app/sorties/pointage/pointage.component.scss
Lignes:      519
====================================

.pointage-container {
  max-width: 1200px;
  margin: 0 auto;
  padding: 2rem;
}

.header {
  display: flex;
  flex-direction: column;
  gap: 1rem;
  margin-bottom: 2rem;
}

/* ✅ BOUTON RETOUR PLUS VISIBLE */
.btn-back {
  display: inline-flex;
  align-items: center;
  gap: 0.5rem;
  padding: 0.75rem 1.5rem;
  background: linear-gradient(135deg, #3b82f6 0%, #2563eb 100%);
  color: white;
  border: none;
  border-radius: 0.75rem;
  font-weight: 600;
  font-size: 1rem;
  cursor: pointer;
  transition: all 0.3s ease;
  text-decoration: none;
  width: fit-content;
  align-self: flex-start;
  box-shadow: 0 4px 6px rgba(59, 130, 246, 0.3);

  svg {
    width: 20px;
    height: 20px;
  }

  &:hover {
    background: linear-gradient(135deg, #2563eb 0%, #1d4ed8 100%);
    transform: translateX(-4px) translateY(-2px);
    box-shadow: 0 6px 12px rgba(59, 130, 246, 0.4);
  }

  &:active {
    transform: translateX(-2px) translateY(0);
    box-shadow: 0 2px 4px rgba(59, 130, 246, 0.3);
  }
}

.header-info {
  display: flex;
  flex-direction: column;
  gap: 0.5rem;
}

.title-row {
  display: flex;
  justify-content: space-between;
  align-items: center;
  gap: 1rem;
  flex-wrap: wrap;
}

.title {
  font-size: 2rem;
  font-weight: 700;
  color: #1f2937;
  margin: 0;
}

.sortie-info {
  display: flex;
  gap: 1rem;
  font-size: 0.9rem;
  color: #6b7280;

  .sortie-destination {
    font-weight: 600;
    color: #3b82f6;
  }
}

.loading-spinner {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  padding: 3rem;

  .spinner {
    width: 40px;
    height: 40px;
    margin-bottom: 1rem;
    border: 4px solid #f3f4f6;
    border-top-color: #3b82f6;
    border-radius: 50%;
    animation: spin 1s linear infinite;
  }
}

@keyframes spin {
  to {
    transform: rotate(360deg);
  }
}

.no-data {
  text-align: center;
  padding: 3rem;
  color: #9ca3af;

  .no-data-icon {
    width: 64px;
    height: 64px;
    margin: 0 auto 1rem;
    opacity: 0.5;
  }

  p {
    font-size: 1.1rem;
  }
}

.error-box {
  background-color: #fee2e2;
  border: 2px solid #ef4444;
  border-radius: 0.75rem;
  padding: 2rem;
  text-align: center;
  color: #991b1b;

  .error-icon {
    width: 64px;
    height: 64px;
    margin: 0 auto 1rem;
    color: #dc2626;
  }

  p {
    font-size: 1.1rem;
    font-weight: 600;
    margin-bottom: 1rem;
  }

  .error-details {
    background-color: #ffffff;
    border-radius: 0.5rem;
    padding: 1rem;
    margin-top: 1rem;
    text-align: left;
    font-size: 0.875rem;

    p {
      margin: 0.5rem 0;
      font-weight: normal;
    }

    strong {
      color: #1f2937;
      font-weight: 600;
    }
  }
}

.table-container {
  background: white;
  border-radius: 0.75rem;
  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
  overflow-x: auto;
  margin-bottom: 1.5rem;
}

.data-table {
  width: 100%;
  border-collapse: collapse;

  thead {
    background-color: #f9fafb;

    th {
      padding: 1rem;
      text-align: left;
      font-weight: 600;
      color: #374151;
      border-bottom: 2px solid #e5e7eb;
      white-space: nowrap;

      &.text-center {
        text-align: center;
      }
    }
  }

  tbody {
    tr {
      border-bottom: 1px solid #e5e7eb;
      transition: background-color 0.2s;

      &:hover {
        background-color: #f9fafb;
      }

      td {
        padding: 1rem;
        color: #6b7280;

        &.font-bold {
          font-weight: 600;
          color: #1f2937;
        }

        &.text-center {
          text-align: center;
        }
      }
    }
  }
}

.fonction-badge {
  display: inline-block;
  padding: 0.25rem 0.75rem;
  border-radius: 0.375rem;
  font-size: 0.875rem;
  font-weight: 600;
  text-transform: capitalize;
  white-space: nowrap;
}

.fonction-capitaine {
  background-color: #fef3c7;
  color: #92400e;
}

.fonction-second {
  background-color: #e0e7ff;
  color: #3730a3;
}

.fonction-mecanicien {
  background-color: #ccfbf1;
  color: #115e59;
}

.fonction-matelot {
  background-color: #f3e8ff;
  color: #6b21a8;
}

// Toggle switch styles
.switch {
  position: relative;
  display: inline-block;
  width: 60px;
  height: 34px;

  input {
    opacity: 0;
    width: 0;
    height: 0;

    &:checked + .slider {
      background-color: #10b981;
    }

    &:checked + .slider:before {
      transform: translateX(26px);
    }

    &:focus + .slider {
      box-shadow: 0 0 1px #10b981;
    }
  }

  .slider {
    position: absolute;
    cursor: pointer;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: #ccc;
    transition: .4s;

    &.round {
      border-radius: 34px;
    }

    &:before {
      position: absolute;
      content: "";
      height: 26px;
      width: 26px;
      left: 4px;
      bottom: 4px;
      background-color: white;
      transition: .4s;
      border-radius: 50%;
    }
  }
}

.obs-input {
  width: 100%;
  padding: 0.5rem;
  border: 1px solid #d1d5db;
  border-radius: 0.375rem;
  font-size: 0.875rem;
  transition: all 0.2s;

  &:focus {
    outline: none;
    border-color: #3b82f6;
    box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
  }
}

.summary {
  background: white;
  border-radius: 0.75rem;
  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
  padding: 1.5rem;
}

.summary-card {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
  gap: 1.5rem;
}

.summary-item {
  display: flex;
  flex-direction: column;
  align-items: center;
  padding: 1rem;
  border-radius: 0.5rem;
  background-color: #f9fafb;

  &.present {
    background-color: #d1fae5;
    
    .summary-value {
      color: #065f46;
    }
  }

  &.absent {
    background-color: #fee2e2;
    
    .summary-value {
      color: #991b1b;
    }
  }

  .summary-label {
    font-size: 0.875rem;
    color: #6b7280;
    font-weight: 500;
    margin-bottom: 0.5rem;
  }

  .summary-value {
    font-size: 2rem;
    font-weight: 700;
    color: #1f2937;
  }
}

/* Bouton ajouter marin */
.btn-add-crew {
  display: inline-flex;
  align-items: center;
  gap: 0.5rem;
  padding: 0.75rem 1.5rem;
  background-color: #10b981;
  color: white;
  border: none;
  border-radius: 0.5rem;
  font-weight: 600;
  font-size: 0.9rem;
  cursor: pointer;
  transition: all 0.2s;
  white-space: nowrap;

  svg {
    width: 20px;
    height: 20px;
  }

  &:hover {
    background-color: #059669;
    transform: translateY(-2px);
    box-shadow: 0 4px 6px rgba(16, 185, 129, 0.3);
  }

  &:active {
    transform: translateY(0);
  }
}

.btn-add-empty {
  display: inline-flex;
  align-items: center;
  gap: 0.5rem;
  padding: 0.75rem 1.5rem;
  background-color: #3b82f6;
  color: white;
  border: none;
  border-radius: 0.5rem;
  font-weight: 600;
  cursor: pointer;
  transition: all 0.2s;
  margin-top: 1rem;

  svg {
    width: 20px;
    height: 20px;
  }

  &:hover {
    background-color: #2563eb;
    transform: translateY(-2px);
    box-shadow: 0 4px 6px rgba(59, 130, 246, 0.3);
  }
}

// Responsive
@media (max-width: 768px) {
  .pointage-container {
    padding: 1rem;
  }

  .title {
    font-size: 1.5rem;
  }

  .btn-back {
    padding: 0.625rem 1.25rem;
    font-size: 0.9rem;

    svg {
      width: 18px;
      height: 18px;
    }
  }

  .sortie-info {
    flex-direction: column;
    gap: 0.25rem;
  }

  .data-table {
    font-size: 0.875rem;

    thead th {
      padding: 0.75rem 0.5rem;
    }

    tbody td {
      padding: 0.75rem 0.5rem;
    }
  }

  .switch {
    width: 50px;
    height: 28px;

    input:checked + .slider:before {
      transform: translateX(22px);
    }

    .slider:before {
      height: 20px;
      width: 20px;
    }
  }

  .summary-card {
    grid-template-columns: 1fr;
  }

  .title-row {
    flex-direction: column;
    align-items: flex-start;
  }

  .btn-add-crew {
    width: 100%;
    justify-content: center;
  }
}

/* Support RTL pour l'arabe */
body.rtl,
:host-context(.rtl) {
  .data-table {
    thead th {
      text-align: right;
    }

    tbody td {
      text-align: right;

      &.text-center {
        text-align: center;
      }
    }
  }

  .btn-back {
    &:hover {
      transform: translateX(4px) translateY(-2px);
    }

    &:active {
      transform: translateX(2px) translateY(0);
    }
  }
}

====================================
FICHIER: ./src/app/sorties/salaires/salaires.component.scss
Lignes:      289
====================================

.salaires-container {
  max-width: 1400px;
  margin: 0 auto;
  padding: 2rem;
}

.header {
  display: flex;
  flex-direction: column;
  gap: 1rem;
  margin-bottom: 2rem;
}

.title {
  font-size: 2rem;
  font-weight: 700;
  color: #1f2937;
  margin: 0;
}

.loading {
  text-align: center;
  padding: 3rem;

  .spinner {
    width: 40px;
    height: 40px;
    margin: 0 auto 1rem;
    border: 4px solid #f3f4f6;
    border-top-color: #3b82f6;
    border-radius: 50%;
    animation: spin 1s linear infinite;
  }
}

@keyframes spin {
  to { transform: rotate(360deg); }
}

.config-section {
  display: flex;
  gap: 1rem;
  margin-bottom: 2rem;
  flex-wrap: wrap;
}

.btn {
  display: inline-flex;
  align-items: center;
  gap: 0.5rem;
  padding: 0.75rem 1.5rem;
  border: none;
  border-radius: 0.5rem;
  font-weight: 600;
  cursor: pointer;
  transition: all 0.3s;

  svg {
    width: 20px;
    height: 20px;
  }

  &:disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }
}

.btn-primary {
  background-color: #3b82f6;
  color: white;

  &:hover:not(:disabled) {
    background-color: #2563eb;
    transform: translateY(-2px);
    box-shadow: 0 4px 6px rgba(59, 130, 246, 0.3);
  }
}

.btn-success {
  background-color: #10b981;
  color: white;

  &:hover:not(:disabled) {
    background-color: #059669;
    transform: translateY(-2px);
    box-shadow: 0 4px 6px rgba(16, 185, 129, 0.3);
  }
}

.summary-cards {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
  gap: 1.5rem;
  margin-bottom: 2rem;
}

.summary-card {
  background: white;
  border-radius: 0.75rem;
  padding: 1.5rem;
  display: flex;
  gap: 1rem;
  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);

  .card-icon {
    width: 60px;
    height: 60px;
    border-radius: 0.75rem;
    display: flex;
    align-items: center;
    justify-content: center;

    svg {
      width: 32px;
      height: 32px;
    }
  }

  &.revenue .card-icon {
    background: #d1fae5;
    color: #059669;
  }

  &.expenses .card-icon {
    background: #fee2e2;
    color: #dc2626;
  }

  &.owner .card-icon {
    background: #dbeafe;
    color: #2563eb;
  }

  &.crew .card-icon {
    background: #fef3c7;
    color: #f59e0b;
  }

  .card-content {
    flex: 1;

    .card-label {
      font-size: 0.875rem;
      color: #6b7280;
      margin: 0 0 0.5rem;
    }

    .card-value {
      font-size: 1.5rem;
      font-weight: 700;
      color: #1f2937;
      margin: 0;
    }
  }
}

.deductions-card {
  background: white;
  border-radius: 0.75rem;
  padding: 1.5rem;
  margin-bottom: 2rem;
  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);

  h3 {
    font-size: 1.25rem;
    font-weight: 700;
    color: #1f2937;
    margin: 0 0 1rem;
  }

  .deduction-item {
    display: flex;
    justify-content: space-between;
    padding: 0.75rem 0;
    border-bottom: 1px solid #e5e7eb;
    color: #6b7280;
  }

  .montant-partager {
    display: flex;
    justify-content: space-between;
    padding: 1rem 0 0;
    font-size: 1.125rem;
    color: #1f2937;

    strong {
      color: #10b981;
      font-size: 1.25rem;
    }
  }
}

.marins-salaires {
  background: white;
  border-radius: 0.75rem;
  padding: 1.5rem;
  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);

  h3 {
    font-size: 1.25rem;
    font-weight: 700;
    color: #1f2937;
    margin: 0 0 1rem;
  }
}

.table-container {
  overflow-x: auto;
}

.data-table {
  width: 100%;
  border-collapse: collapse;

  thead {
    background-color: #f9fafb;

    th {
      padding: 1rem;
      text-align: left;
      font-weight: 600;
      color: #374151;
      border-bottom: 2px solid #e5e7eb;
      white-space: nowrap;

      &.salaire-net {
        background-color: #d1fae5;
        color: #065f46;
      }
    }
  }

  tbody {
    tr {
      border-bottom: 1px solid #e5e7eb;

      &:hover {
        background-color: #f9fafb;
      }

      td {
        padding: 1rem;
        color: #6b7280;

        &.font-bold {
          font-weight: 600;
          color: #1f2937;
        }

        &.text-danger {
          color: #dc2626;
        }

        &.salaire-net {
          background-color: #f0fdf4;

          strong {
            color: #059669;
            font-size: 1.125rem;
          }
        }
      }
    }
  }
}

/* Responsive */
@media (max-width: 768px) {
  .salaires-container {
    padding: 1rem;
  }

  .title {
    font-size: 1.5rem;
  }

  .summary-cards {
    grid-template-columns: 1fr;
  }

  .data-table {
    font-size: 0.875rem;

    thead th, tbody td {
      padding: 0.75rem 0.5rem;
    }
  }
}

====================================
FICHIER: ./src/app/sorties/sortie-details.component.scss
Lignes:      250
====================================

.details-container {
  max-width: 1200px;
  margin: 0 auto;
  padding: 2rem;
}

.header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 2rem;
  gap: 1rem;
  flex-wrap: wrap;
}

/* ✅ Le style du bouton est maintenant dans _btn-back.scss */

.title {
  font-size: 2rem;
  font-weight: 700;
  color: #1f2937;
  margin: 0;
}

.section-card {
  background: white;
  border-radius: 0.75rem;
  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
  overflow: hidden;
  margin-bottom: 1.5rem;
}

.section-header {
  padding: 1.5rem;
  border-bottom: 1px solid #e5e7eb;
  display: flex;
  justify-content: space-between;
  align-items: center;

  h2 {
    font-size: 1.25rem;
    font-weight: 700;
    color: #1f2937;
    margin: 0;
  }
}

.info-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
  gap: 1.5rem;
  padding: 1.5rem;
}

.info-item {
  display: flex;
  flex-direction: column;
  gap: 0.5rem;

  .info-label {
    font-size: 0.875rem;
    color: #6b7280;
    font-weight: 500;
  }

  .info-value {
    font-size: 1rem;
    color: #1f2937;
    font-weight: 600;
  }
}

.status-badge {
  display: inline-block;
  padding: 0.5rem 1rem;
  border-radius: 9999px;
  font-size: 0.875rem;
  font-weight: 600;
  text-transform: capitalize;
}

.status-en-cours {
  background-color: #dbeafe;
  color: #1e40af;
}

.status-terminee {
  background-color: #d1fae5;
  color: #065f46;
}

.status-annulee {
  background-color: #fee2e2;
  color: #991b1b;
}

.list-items {
  padding: 0 1.5rem 1.5rem;
}

.list-item {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 1rem;
  border-bottom: 1px solid #f3f4f6;

  &:last-child {
    border-bottom: none;
  }
}

.item-details {
  display: flex;
  flex-direction: column;
  gap: 0.25rem;
  flex: 1;

  .item-type {
    font-weight: 600;
    color: #1f2937;
  }

  .item-description {
    font-size: 0.875rem;
    color: #6b7280;
  }

  .item-date {
    font-size: 0.75rem;
    color: #9ca3af;
  }
}

.item-actions {
  display: flex;
  align-items: center;
  gap: 0.5rem;
}

.item-amount {
  font-size: 1.125rem;
  font-weight: 700;
  color: #1f2937;
  margin-right: 1rem;
}

.btn {
  display: inline-flex;
  align-items: center;
  gap: 0.5rem;
  padding: 0.625rem 1.25rem;
  border: none;
  border-radius: 0.5rem;
  font-weight: 600;
  cursor: pointer;
  transition: all 0.3s;

  .icon {
    width: 20px;
    height: 20px;
  }
}

.btn-primary {
  background-color: #3b82f6;
  color: white;

  &:hover {
    background-color: #2563eb;
  }
}

.btn-icon {
  padding: 0.5rem;
  border: none;
  border-radius: 0.375rem;
  cursor: pointer;
  transition: all 0.2s;
  background-color: transparent;

  svg {
    width: 18px;
    height: 18px;
  }
}

.btn-warning {
  color: #92400e;

  &:hover {
    background-color: #fef3c7;
  }
}

.btn-danger {
  color: #991b1b;

  &:hover {
    background-color: #fee2e2;
  }
}

.no-data {
  padding: 3rem;
  text-align: center;
  color: #9ca3af;

  p {
    margin-top: 1rem;
    font-size: 1.1rem;
  }
}

/* Responsive */
@media (max-width: 768px) {
  .details-container {
    padding: 1rem;
  }

  .title {
    font-size: 1.5rem;
  }

  .info-grid {
    grid-template-columns: 1fr;
  }

  .list-item {
    flex-direction: column;
    align-items: flex-start;
    gap: 1rem;
  }

  .item-actions {
    width: 100%;
    justify-content: space-between;
  }
}

.btn-success {
  background: linear-gradient(135deg, #10b981 0%, #059669 100%);
  color: white;

  &:hover {
    background: linear-gradient(135deg, #059669 0%, #047857 100%);
    transform: translateY(-2px);
    box-shadow: 0 4px 6px rgba(16, 185, 129, 0.3);
  }
}

====================================
FICHIER: ./src/app/sorties/sortie-form.component.scss
Lignes:      161
====================================

.form-container {
  max-width: 900px;
  width: 100%;
  background: white;
  border-radius: 0.75rem;
  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
  padding: 2rem;
  margin: 0 auto;
}

.form-header {
  margin-bottom: 2rem;
  border-bottom: 2px solid #e5e7eb;
  padding-bottom: 1rem;
}

.form-title {
  font-size: 1.75rem;
  font-weight: 700;
  color: #1f2937;
  margin: 0;
}

.form-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
  gap: 1.5rem;
  margin-bottom: 2rem;
}

.form-group {
  display: flex;
  flex-direction: column;

  &.full-width {
    grid-column: 1 / -1;
  }
}

.form-label {
  font-weight: 600;
  color: #374151;
  margin-bottom: 0.5rem;
  font-size: 0.875rem;
}

.form-input {
  padding: 0.75rem;
  border: 1px solid #d1d5db;
  border-radius: 0.5rem;
  font-size: 1rem;
  transition: all 0.2s;
  width: 100%;

  &:focus {
    outline: none;
    border-color: #3b82f6;
    box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
  }

  &.error {
    border-color: #ef4444;
  }
}

textarea.form-input {
  resize: vertical;
  min-height: 80px;
}

.error-message {
  color: #ef4444;
  font-size: 0.75rem;
  margin-top: 0.25rem;
}

.form-actions {
  display: flex;
  justify-content: flex-end;
  gap: 1rem;
  padding-top: 1.5rem;
  border-top: 1px solid #e5e7eb;
  flex-wrap: wrap;
}

.btn {
  padding: 0.75rem 2rem;
  border: none;
  border-radius: 0.5rem;
  font-weight: 600;
  cursor: pointer;
  transition: all 0.3s;
  white-space: nowrap;

  &:disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }
}

.btn-primary {
  background-color: #3b82f6;
  color: white;

  &:hover:not(:disabled) {
    background-color: #2563eb;
    transform: translateY(-2px);
    box-shadow: 0 4px 6px rgba(59, 130, 246, 0.3);
  }
}

.btn-secondary {
  background-color: #6b7280;
  color: white;

  &:hover:not(:disabled) {
    background-color: #4b5563;
  }
}

@media (max-width: 768px) {
  .form-container { padding: 1.5rem; border-radius: 0.5rem; }
  .form-title { font-size: 1.5rem; }
  .form-grid { grid-template-columns: 1fr; gap: 1rem; }
  .form-actions { flex-direction: column-reverse; gap: 0.75rem; }
  .btn { width: 100%; justify-content: center; }
}

@media (max-width: 480px) {
  .form-container { padding: 1rem; }
  .form-title { font-size: 1.25rem; }
  .form-input { padding: 0.625rem; font-size: 0.9375rem; }
  .btn { padding: 0.625rem 1.5rem; }
}

.selected-boat-info {
  margin-bottom: 2rem;
  
  .boat-badge {
    display: inline-flex;
    align-items: center;
    gap: 0.75rem;
    background: #d1fae5;
    color: #065f46;
    padding: 1rem 1.5rem;
    border-radius: 0.75rem;
    border: 2px solid #10b981;
    font-size: 1rem;

    svg {
      width: 24px;
      height: 24px;
      flex-shrink: 0;
    }

    strong {
      font-weight: 700;
      color: #047857;
    }
  }
}

====================================
FICHIER: ./src/app/sorties/sorties-list.component.scss
Lignes:      187
====================================

.bateaux-container {
  max-width: 100%;
  width: 100%;
}

.header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 2rem;
  gap: 1rem;
  flex-wrap: wrap;
}

.title {
  font-size: 2rem;
  font-weight: 700;
  color: #1f2937;
  margin: 0;
}

.table-container {
  background: white;
  border-radius: 0.75rem;
  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
  overflow-x: auto;
  width: 100%;
  -webkit-overflow-scrolling: touch;
}

.data-table {
  width: 100%;
  border-collapse: collapse;
  min-width: 800px;

  thead {
    background-color: #f9fafb;
    
    th {
      padding: 1rem;
      text-align: left;
      font-weight: 600;
      color: #374151;
      border-bottom: 2px solid #e5e7eb;
      white-space: nowrap;
    }
  }

  tbody {
    tr {
      border-bottom: 1px solid #e5e7eb;
      transition: background-color 0.2s;

      &:hover {
        background-color: #f9fafb;
      }
    }

    td {
      padding: 1rem;
      color: #6b7280;
    }
  }
}

.font-bold {
  font-weight: 600;
  color: #1f2937;
}

.status-badge {
  display: inline-block;
  padding: 0.25rem 0.75rem;
  border-radius: 9999px;
  font-size: 0.875rem;
  font-weight: 600;
  text-transform: capitalize;
  white-space: nowrap;
}

.status-en-cours {
  background-color: #dbeafe;
  color: #1e40af;
}

.status-terminee {
  background-color: #d1fae5;
  color: #065f46;
}

.status-annulee {
  background-color: #fee2e2;
  color: #991b1b;
}

.actions {
  display: flex;
  gap: 0.5rem;
  flex-wrap: wrap;
}

.btn {
  display: inline-flex;
  align-items: center;
  gap: 0.5rem;
  padding: 0.625rem 1.25rem;
  border: none;
  border-radius: 0.5rem;
  font-weight: 600;
  cursor: pointer;
  transition: all 0.3s;
  white-space: nowrap;

  .icon {
    width: 20px;
    height: 20px;
  }
}

.btn-primary {
  background-color: #3b82f6;
  color: white;

  &:hover {
    background-color: #2563eb;
    transform: translateY(-2px);
    box-shadow: 0 4px 6px rgba(59, 130, 246, 0.3);
  }
}

.btn-icon {
  padding: 0.5rem;
  border: none;
  border-radius: 0.375rem;
  cursor: pointer;
  transition: all 0.2s;

  svg {
    width: 18px;
    height: 18px;
  }
}

.btn-warning {
  background-color: #fef3c7;
  color: #92400e;

  &:hover {
    background-color: #fde68a;
  }
}

.btn-danger {
  background-color: #fee2e2;
  color: #991b1b;

  &:hover {
    background-color: #fecaca;
  }
}

/* RESPONSIVE */
@media (max-width: 1024px) {
  .title { font-size: 1.75rem; }
  .data-table { min-width: 900px; }
}

@media (max-width: 768px) {
  .title { font-size: 1.5rem; }
  .header { flex-direction: column; align-items: stretch; gap: 0.75rem; }
  .btn { width: 100%; justify-content: center; }
  .table-container { border-radius: 0.5rem; overflow-x: scroll; }
  .data-table { font-size: 0.875rem; min-width: 700px; }
  .data-table thead th { padding: 0.75rem 0.5rem; font-size: 0.8125rem; }
  .data-table tbody td { padding: 0.75rem 0.5rem; }
  .actions { flex-wrap: nowrap; }
}

@media (max-width: 480px) {
  .title { font-size: 1.25rem; }
  .data-table { font-size: 0.8125rem; min-width: 600px; }
  .data-table thead th { padding: 0.5rem 0.375rem; font-size: 0.75rem; }
  .data-table tbody td { padding: 0.5rem 0.375rem; }
  .btn-icon { padding: 0.375rem; }
  .btn-icon svg { width: 16px; height: 16px; }
  .status-badge { font-size: 0.75rem; padding: 0.125rem 0.5rem; }
}

====================================
FICHIER: ./src/app/ventes/ventes-list.component.scss
Lignes:      313
====================================

.ventes-container {
  max-width: 1600px;
  margin: 0 auto;
  padding: 2rem;
}

.header {
  margin-bottom: 2rem;
}

.title {
  font-size: 2rem;
  font-weight: 700;
  color: #1f2937;
  margin: 0;
}

.loading {
  text-align: center;
  padding: 3rem;

  .spinner {
    width: 40px;
    height: 40px;
    margin: 0 auto 1rem;
    border: 4px solid #f3f4f6;
    border-top-color: #10b981;
    border-radius: 50%;
    animation: spin 1s linear infinite;
  }
}

@keyframes spin {
  to { transform: rotate(360deg); }
}

.no-data {
  text-align: center;
  padding: 3rem;
  color: #9ca3af;

  .no-data-icon {
    width: 64px;
    height: 64px;
    margin: 0 auto 1rem;
    opacity: 0.5;
  }
}

.total-general-card {
  background: linear-gradient(135deg, #10b981 0%, #059669 100%);
  color: white;
  padding: 2rem;
  border-radius: 0.75rem;
  box-shadow: 0 4px 6px rgba(16, 185, 129, 0.3);
  margin-bottom: 2rem;
  display: flex;
  align-items: center;
  gap: 1.5rem;

  .total-icon {
    width: 80px;
    height: 80px;
    background: rgba(255, 255, 255, 0.2);
    border-radius: 0.75rem;
    display: flex;
    align-items: center;
    justify-content: center;

    svg {
      width: 48px;
      height: 48px;
    }
  }

  .total-content {
    flex: 1;

    h3 {
      margin: 0 0 0.5rem 0;
      font-size: 1.125rem;
      font-weight: 600;
      opacity: 0.95;
    }

    .total-amount {
      margin: 0;
      font-size: 2.5rem;
      font-weight: 700;
    }
  }
}

.sorties-list {
  display: flex;
  flex-direction: column;
  gap: 2rem;
}

.sortie-section {
  background: white;
  border-radius: 0.75rem;
  padding: 1.5rem;
  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
}

.sortie-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  gap: 1rem;
  margin-bottom: 1.5rem;
  padding-bottom: 1.5rem;
  border-bottom: 2px solid #e5e7eb;
  flex-wrap: wrap;

  .sortie-info {
    flex: 1;

    h2 {
      margin: 0 0 0.5rem 0;
      font-size: 1.5rem;
      font-weight: 700;
      color: #1f2937;
    }

    .sortie-dates {
      margin: 0;
      color: #6b7280;
      font-size: 0.875rem;
    }
  }

  .sortie-total {
    display: flex;
    flex-direction: column;
    align-items: flex-end;

    .total-label {
      font-size: 0.875rem;
      color: #6b7280;
      font-weight: 500;
    }

    .total-value {
      font-size: 1.75rem;
      font-weight: 700;
      color: #10b981;
    }
  }
}

.btn {
  display: inline-flex;
  align-items: center;
  gap: 0.5rem;
  padding: 0.75rem 1.5rem;
  border: none;
  border-radius: 0.5rem;
  font-weight: 600;
  cursor: pointer;
  transition: all 0.3s;

  svg {
    width: 20px;
    height: 20px;
  }
}

.btn-primary {
  background-color: #10b981;
  color: white;

  &:hover {
    background-color: #059669;
    transform: translateY(-2px);
    box-shadow: 0 4px 6px rgba(16, 185, 129, 0.3);
  }
}

.btn-sm {
  padding: 0.5rem 1rem;
  font-size: 0.875rem;

  svg {
    width: 16px;
    height: 16px;
  }
}

.btn-warning {
  background-color: #fef3c7;
  color: #92400e;

  &:hover {
    background-color: #fde68a;
  }
}

.btn-danger {
  background-color: #fee2e2;
  color: #991b1b;

  &:hover {
    background-color: #fecaca;
  }
}

.no-factures {
  text-align: center;
  padding: 2rem;
  color: #9ca3af;
  font-style: italic;
}

.factures-grid {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));
  gap: 1.5rem;
}

.facture-card {
  background: #f9fafb;
  border-radius: 0.5rem;
  padding: 1.25rem;
  border: 1px solid #e5e7eb;
  transition: all 0.3s;

  &:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
  }
}

.facture-header-card {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 1rem;
  padding-bottom: 1rem;
  border-bottom: 2px solid #e5e7eb;

  .facture-numero {
    font-weight: 700;
    color: #1f2937;
    font-size: 1.125rem;
  }

  .facture-montant {
    font-size: 1.5rem;
    font-weight: 700;
    color: #10b981;
  }
}

.facture-body {
  margin-bottom: 1rem;

  p {
    margin: 0.5rem 0;
    color: #6b7280;
    font-size: 0.875rem;

    strong {
      color: #1f2937;
    }
  }

  .facture-details {
    font-style: italic;
  }
}

.facture-actions {
  display: flex;
  gap: 0.5rem;
}

/* Responsive */
@media (max-width: 768px) {
  .ventes-container {
    padding: 1rem;
  }

  .title {
    font-size: 1.5rem;
  }

  .total-general-card {
    flex-direction: column;
    text-align: center;
  }

  .sortie-header {
    flex-direction: column;
    align-items: flex-start;
  }

  .factures-grid {
    grid-template-columns: 1fr;
  }
}

.btn-secondary {
  background-color: #3b82f6;
  color: white;

  &:hover {
    background-color: #2563eb;
    transform: translateY(-2px);
    box-shadow: 0 4px 6px rgba(59, 130, 246, 0.3);
  }
}

====================================
FICHIER: ./src/marins/marins-list.component.scss
Lignes:        0
====================================


====================================
FICHIER: ./src/styles.scss
Lignes:      105
====================================

@use "tailwindcss";
@use './styles/btn-back';
/* You can add global styles to this file, and also import other style files */


/* ============================================
   SUPPORT RTL (RIGHT-TO-LEFT) POUR L'ARABE
   ============================================ */

body.rtl {
  direction: rtl;
  text-align: right;
}

body.ltr {
  direction: ltr;
  text-align: left;
}

/* Ajustements pour les marges et padding en RTL */
.rtl {
  .sidebar {
    right: 0;
    left: auto;
  }

  .main-content {
    margin-right: 260px;
    margin-left: 0;
  }

  .topbar-right {
    flex-direction: row-reverse;
  }
}

/* RESPONSIVE UTILITIES */
* {
  box-sizing: border-box;
}

html, body {
  margin: 0;
  padding: 0;
  width: 100%;
  overflow-x: hidden;
}

/* Container responsive */
.container {
  width: 100%;
  max-width: 1400px;
  margin: 0 auto;
  padding: 0 1rem;
}

@media (max-width: 768px) {
  .container {
    padding: 0 0.75rem;
  }
}

@media (max-width: 480px) {
  .container {
    padding: 0 0.5rem;
  }
}

/* ===================================
   RTL GLOBAL FIXES
   =================================== */

body.rtl {
  direction: rtl !important;
  text-align: right !important;
}

body.ltr {
  direction: ltr !important;
  text-align: left !important;
}

/* Fix overflow horizontal pour RTL */
body.rtl * {
  box-sizing: border-box;
}

/* Fix tables en RTL */
body.rtl table {
  text-align: right;
}

body.rtl table th,
body.rtl table td {
  text-align: right;
}

/* Fix formulaires RTL */
body.rtl input,
body.rtl textarea,
body.rtl select {
  text-align: right;
}

/* Import des styles pour boutons Retour */

====================================
FICHIER: ./src/styles/_btn-back.scss
Lignes:       63
====================================

/* Style global pour tous les boutons "Retour" */
.btn-back {
  display: inline-flex;
  align-items: center;
  gap: 0.5rem;
  padding: 0.75rem 1.5rem;
  background: linear-gradient(135deg, #3b82f6 0%, #2563eb 100%);
  color: white;
  border: none;
  border-radius: 0.75rem;
  font-weight: 600;
  font-size: 1rem;
  cursor: pointer;
  transition: all 0.3s ease;
  text-decoration: none;
  width: fit-content;
  align-self: flex-start;
  box-shadow: 0 4px 6px rgba(59, 130, 246, 0.3);

  svg {
    width: 20px;
    height: 20px;
    flex-shrink: 0;
  }

  &:hover {
    background: linear-gradient(135deg, #2563eb 0%, #1d4ed8 100%);
    transform: translateX(-4px) translateY(-2px);
    box-shadow: 0 6px 12px rgba(59, 130, 246, 0.4);
  }

  &:active {
    transform: translateX(-2px) translateY(0);
    box-shadow: 0 2px 4px rgba(59, 130, 246, 0.3);
  }
}

/* Responsive */
@media (max-width: 768px) {
  .btn-back {
    padding: 0.625rem 1.25rem;
    font-size: 0.9rem;

    svg {
      width: 18px;
      height: 18px;
    }
  }
}

/* Support RTL pour l'arabe */
body.rtl,
:host-context(.rtl) {
  .btn-back {
    &:hover {
      transform: translateX(4px) translateY(-2px);
    }

    &:active {
      transform: translateX(2px) translateY(0);
    }
  }
}

====================================
FICHIER: ./src/assets/i18n/ar.json
Lignes:      358
====================================

{
  "AUTH": {
    "WELCOME": "مرحبا بك",
    "SIGN_IN": "تسجيل الدخول",
    "SIGNIN": "تسجيل الدخول",
    "SIGNUP": "إنشاء حساب",
    "CREATE_ACCOUNT": "إنشاء حساب جديد",
    "CREATEACCOUNT": "إنشاء حساب جديد",
    "EMAIL": "البريد الإلكتروني",
    "PASSWORD": "كلمة المرور",
    "LOGIN": "دخول",
    "NO_ACCOUNT": "ليس لديك حساب؟ سجل الآن",
    "NOACCOUNT": "ليس لديك حساب؟ سجل الآن",
    "HAVE_ACCOUNT": "لديك حساب؟ سجل الدخول",
    "HAVEACCOUNT": "لديك حساب؟ سجل الدخول"
  },
  "DASHBOARD": {
    "TITLE": "لوحة التحكم",
    "WELCOME": "مرحبا بك",
    "ACTIVITIES": "الأنشطة",
    "RECENT_ACTIVITIES": "النشاط الأخير",
    "RECENTACTIVITY": "النشاط الأخير",
    "NO_ACTIVITIES": "لا يوجد نشاط",
    "NOACTIVITIES": "لا يوجد نشاط",
    "TOTAL_BOATS": "إجمالي المراكب",
    "TOTALBOATS": "إجمالي المراكب",
    "TOTAL_SAILORS": "إجمالي البحارة",
    "TOTALSAILORS": "إجمالي البحارة",
    "ACTIVE_BOATS": "المراكب النشطة",
    "ACTIVEBOATS": "المراكب النشطة",
    "MAINTENANCE": "صيانة",
    "STATISTICS": "الإحصائيات",
    "SELECTBOAT": "اختر مركب",
    "NOBOATSELECTED": "لم يتم اختيار مركب"
  },
  "MENU": {
    "HOME": "الرئيسية",
    "BOATS": "المراكب",
    "SORTIES": "الرحلات",
    "AVANCES": "السلف",
    "SALAIRES": "الرواتب",
    "VENTES": "المبيعات",
    "MOCK_DATA": "بيانات تجريبية",
    "MOCKDATA": "بيانات تجريبية",
    "SELECT_BOAT_FIRST": "اختر مركب أولا",
    "SELECTBOATFIRST": "اختر مركب أولا"
  },
  "BOATS": {
    "TITLE": "المراكب",
    "BOAT": "مركب",
    "ADD": "إضافة مركب",
    "ADDBOAT": "إضافة مركب",
    "ADD_BOAT": "إضافة مركب",
    "EDIT": "تعديل",
    "EDIT_BOAT": "تعديل مركب",
    "DELETE": "حذف",
    "NAME": "الاسم",
    "REGISTRATION": "رقم التسجيل",
    "ENGINE_TYPE": "نوع المحرك",
    "ENGINETYPE": "نوع المحرك",
    "POWER": "القدرة",
    "PUISSANCE": "القدرة",
    "ENGINEPOWER": "قوة المحرك",
    "LENGTH": "الطول",
    "LONGUEUR": "الطول",
    "CAPACITY": "السعة",
    "CAPACITE": "السعة",
    "CONSTRUCTION_DATE": "تاريخ البناء",
    "CONSTRUCTIONDATE": "تاريخ البناء",
    "PORT": "ميناء الربط",
    "PORTATTACHE": "ميناء الربط",
    "STATUS": "الحالة",
    "STATUT": "الحالة",
    "ACTIVE": "نشط",
    "MAINTENANCE": "صيانة",
    "INACTIVE": "غير نشط",
    "NO_BOAT_SELECTED": "لم يتم اختيار مركب",
    "NOBOATSELECTED": "لم يتم اختيار مركب",
    "NOBOATS": "لا يوجد مراكب",
    "SELECTED_BOAT": "المركب المختار",
    "SELECTEDBOAT": "المركب المختار",
    "SELECTED": "محدد",
    "CLICK_TO_SELECT": "انقر للاختيار",
    "CLICKTOSELECT": "انقر للاختيار",
    "SEARCH": "ابحث عن مركب...",
    "ACTIONS": "الإجراءات",
    "VIEWCREW": "عرض الطاقم",
    "VIEW_CREW": "عرض الطاقم",
    "SELECT_INFO": "اختر مركب للبدء",
    "SELECTINFO": "اختر مركب للبدء",
    "CHANGE_SELECTION": "تغيير المركب",
    "CHANGESELECTION": "تغيير المركب"
  },
  "SAILORS": {
    "TITLE": "البحارة",
    "MARIN": "بحار",
    "ADD": "إضافة بحار",
    "ADD_SAILOR": "إضافة بحار",
    "ADDSAILOR": "إضافة بحار",
    "ADDNEWSAILOR": "إضافة بحار جديد",
    "EDIT": "تعديل",
    "EDITSAILOR": "تعديل بحار",
    "DELETE": "حذف",
    "FIRST_NAME": "الاسم",
    "FIRSTNAME": "الاسم",
    "PRENOM": "الاسم",
    "LAST_NAME": "اللقب",
    "LASTNAME": "اللقب",
    "NOM": "اللقب",
    "FUNCTION": "الوظيفة",
    "FONCTION": "الوظيفة",
    "SELECT_FUNCTION": "اختر وظيفة",
    "SELECTFUNCTION": "اختر وظيفة",
    "PHONE": "الهاتف",
    "TELEPHONE": "الهاتف",
    "EMAIL": "البريد الإلكتروني",
    "ADDRESS": "العنوان",
    "ADRESSE": "العنوان",
    "BIRTH_DATE": "تاريخ الميلاد",
    "BIRTHDATE": "تاريخ الميلاد",
    "HIRE_DATE": "تاريخ التوظيف",
    "HIREDATE": "تاريخ التوظيف",
    "LICENSE_NUMBER": "رقم الرخصة",
    "LICENSENUMBER": "رقم الرخصة",
    "CREW_OF": "طاقم",
    "CREWOF": "طاقم",
    "NOSAILORS": "لا يوجد بحارة",
    "CAPTAIN": "قبطان",
    "CAPITAINE": "قبطان",
    "SECOND": "ملاح ثاني",
    "MECHANIC": "ميكانيكي",
    "MECANICIEN": "ميكانيكي",
    "SAILOR": "بحار",
    "MATELOT": "بحار",
    "BACK": "رجوع",
    "RETOUR": "رجوع",
    "ON_LEAVE": "في إجازة",
    "ONLEAVE": "في إجازة",
    "CREW": "الطاقم",
    "PLACEHOLDER": {
      "LASTNAME": "أدخل اللقب",
      "FIRSTNAME": "أدخل الاسم",
      "PHONE": "رقم الهاتف"
    }
  },
  "SORTIES": {
    "TITLE": "رحلات الصيد",
    "ADD": "إضافة رحلة",
    "AJOUTER": "إضافة رحلة",
    "EDIT": "تعديل",
    "MODIFIER": "تعديل",
    "DELETE": "حذف",
    "SUPPRIMER": "حذف",
    "DETAILS": "تفاصيل الرحلة",
    "DETAILSTITLE": "تفاصيل الرحلة",
    "DESTINATION": "الوجهة",
    "DEPARTUREDATE": "تاريخ المغادرة",
    "DATEDEPART": "تاريخ المغادرة",
    "RETURNDATE": "تاريخ العودة",
    "DATERETOUR": "تاريخ العودة",
    "STATUT": "الحالة",
    "STATUS": {
      "ONGOING": "جارية",
      "ENCOURS": "جارية",
      "EN-COURS": "جارية",
      "COMPLETED": "منتهية",
      "TERMINEE": "منتهية",
      "CANCELLED": "ملغاة",
      "ANNULEE": "ملغاة"
    },
    "GENERALINFO": "معلومات عامة",
    "OBSERVATIONS": "ملاحظات",
    "MANAGE": "إدارة الرحلة",
    "GERER": "إدارة الرحلة",
    "NOSORTIES": "لا يوجد رحلات",
    "SELECTSORTIES": "اختر رحلات الصيد",
    "SELECTIONNEZSORTIES": "اختر رحلات الصيد",
    "FROM": "من",
    "TO": "إلى",
    "DU": "من",
    "AU": "إلى"
  },
  "EXPENSES": {
    "TITLE": "المصاريف",
    "DEPENSES": "المصاريف",
    "ADD": "إضافة مصروف",
    "AJOUTER": "إضافة مصروف",
    "EDIT": "تعديل مصروف",
    "MODIFIER": "تعديل مصروف",
    "TYPE": "نوع المصروف",
    "AMOUNT": "المبلغ",
    "MONTANT": "المبلغ",
    "DATE": "التاريخ",
    "DESCRIPTION": "الوصف",
    "NOEXPENSE": "لا يوجد مصاريف",
    "TYPES": {
      "FUEL": "وقود",
      "CARBURANT": "وقود",
      "FOOD": "طعام",
      "NOURRITURE": "طعام",
      "MAINTENANCE": "صيانة",
      "ICE": "ثلج",
      "GLACE": "ثلج",
      "OILCHANGE": "تغيير زيت",
      "VIDANGE": "تغيير زيت",
      "CREWCNSS": "ضمان اجتماعي",
      "CREWBONUS": "مكافأة الطاقم",
      "VMS": "نظام VMS",
      "MISC": "متنوع",
      "DIVERS": "متنوع",
      "OTHER": "أخرى",
      "AUTRE": "أخرى"
    },
    "SUCCESSADD": "تمت إضافة المصروف بنجاح",
    "SUCCESSUPDATE": "تم تحديث المصروف بنجاح"
  },
  "POINTAGE": {
    "TITLE": "الحضور",
    "DATE": "التاريخ",
    "CREW": "الطاقم",
    "PRESENT": "حاضر",
    "ABSENT": "غائب",
    "NOCREW": "لا يوجد طاقم",
    "OBSERVATIONS": "ملاحظات",
    "ADDOBS": "إضافة ملاحظة",
    "TOTAL": "المجموع"
  },
  "AVANCES": {
    "TITLE": "السلف",
    "ADD": "إضافة سلفة",
    "AJOUTER": "إضافة سلفة",
    "EDIT": "تعديل",
    "MODIFIER": "تعديل",
    "DELETE": "حذف",
    "SUPPRIMER": "حذف",
    "AMOUNT": "المبلغ",
    "MONTANT": "المبلغ",
    "DATE": "التاريخ",
    "DESCRIPTION": "الوصف",
    "NO_AVANCES": "لا يوجد سلف",
    "NOAVANCES": "لا يوجد سلف",
    "TOTAL": "المجموع",
    "TOTAL_GENERAL": "المجموع الكلي",
    "TOTALGENERAL": "المجموع الكلي",
    "SUCCESSADD": "تمت إضافة السلفة بنجاح",
    "SUCCESS_ADD": "تمت إضافة السلفة بنجاح",
    "SUCCESSUPDATE": "تم تحديث السلفة بنجاح",
    "SUCCESS_UPDATE": "تم تحديث السلفة بنجاح",
    "SUCCESSDELETE": "تم حذف السلفة بنجاح",
    "SUCCESS_DELETE": "تم حذف السلفة بنجاح",
    "AMOUNTPOSITIVE": "يجب أن يكون المبلغ أكبر من الصفر",
    "AMOUNT_POSITIVE": "يجب أن يكون المبلغ أكبر من الصفر"
  },
  "SALAIRES": {
    "TITLE": "حساب الرواتب",
    "CONFIG_COEFF": "تكوين المعاملات",
    "CONFIGCOEFF": "تكوين المعاملات",
    "CONFIGURERCOEFFICIENTS": "تكوين المعاملات",
    "CALCULER": "حساب",
    "DESCRIPTION": "الوصف",
    "REVENU_TOTAL": "الإيرادات الكلية",
    "REVENUTOTAL": "الإيرادات الكلية",
    "TOTAL_DEPENSES": "مجموع المصاريف",
    "TOTALDEPENSES": "مجموع المصاريف",
    "PART_PROPRIETAIRE": "حصة المالك (50%)",
    "PARTPROPRIETAIRE": "حصة المالك (50%)",
    "PART_EQUIPAGE": "حصة الطاقم (50%)",
    "PARTEQUIPAGE": "حصة الطاقم (50%)",
    "DEDUCTIONS": "الخصومات",
    "NUITS": "الليالي",
    "MARINS": "البحارة",
    "MONTANT_A_PARTAGER": "المبلغ للتقسيم",
    "MONTANTAPARTAGER": "المبلغ للتقسيم",
    "DETAILS_PAR_MARIN": "التفاصيل حسب البحار",
    "DETAILSPARMARIN": "التفاصيل حسب البحار",
    "COEFFICIENT": "المعامل",
    "SALAIRE_BASE": "الراتب الأساسي",
    "SALAIREBASE": "الراتب الأساسي",
    "PRIME_NUITS": "علاوة الليالي",
    "PRIMENUITS": "علاوة الليالي",
    "SALAIRE_NET": "الراتب الصافي",
    "SALAIRENET": "الراتب الصافي"
  },
  "VENTES": {
    "TITLE": "المبيعات",
    "ADDFACTURE": "إضافة فاتورة",
    "NEWFACTURE": "فاتورة جديدة",
    "NOUVELLEFACTURE": "فاتورة جديدة",
    "EDITFACTURE": "تعديل فاتورة",
    "MODIFIERFACTURE": "تعديل فاتورة",
    "NUMERO": "الرقم",
    "NUMEROFACTURE": "رقم الفاتورة",
    "CLIENT": "الزبون",
    "DATEVENTE": "تاريخ البيع",
    "MONTANT": "المبلغ",
    "MONTANTTOTAL": "المبلغ الإجمالي",
    "DETAILS": "التفاصيل",
    "TOTAL": "المجموع",
    "TOTALVENTES": "مجموع المبيعات",
    "TOTALGENERAL": "المجموع الكلي",
    "TOTALGENERALVENTES": "المجموع الكلي للمبيعات",
    "MANAGEFACTURES": "إدارة الفواتير",
    "GERERFACTURES": "إدارة الفواتير",
    "NOFACTURESFORSORTIE": "لا توجد فواتير لهذه الرحلة",
    "AUCUNEFACTURE": "لا توجد فواتير",
    "NOFACTURE": "لا توجد فواتير"
  },
  "FACTURES": {
    "TITLE": "الفواتير",
    "NOFACTURE": "لا توجد فواتير"
  },
  "FORM": {
    "ADD": "إضافة",
    "AJOUTER": "إضافة",
    "EDIT": "تعديل",
    "MODIFIER": "تعديل",
    "DELETE": "حذف",
    "SUPPRIMER": "حذف",
    "CANCEL": "إلغاء",
    "ANNULER": "إلغاء",
    "SAVE": "حفظ",
    "ENREGISTRER": "حفظ",
    "REQUIRED": "هذا الحقل مطلوب",
    "REQUIRED_FIELDS": "يرجى ملء جميع الحقول المطلوبة",
    "REQUIREDFIELDS": "يرجى ملء جميع الحقول المطلوبة",
    "CONFIRMDELETE": "هل أنت متأكد من الحذف؟",
    "CONFIRM_DELETE": "هل أنت متأكد من الحذف؟",
    "INVALID_PHONE": "رقم هاتف غير صالح",
    "INVALIDPHONE": "رقم هاتف غير صالح",
    "INVALID_EMAIL": "بريد إلكتروني غير صالح",
    "INVALIDEMAIL": "بريد إلكتروني غير صالح"
  },
  "MESSAGES": {
    "LOADING": "جاري التحميل...",
    "CHARGEMENT": "جاري التحميل...",
    "SAVING": "جاري الحفظ...",
    "ENREGISTREMENT": "جاري الحفظ...",
    "ADDINGSAILOR": "جاري إضافة البحار...",
    "SUCCESS": "تمت العملية بنجاح",
    "ERROR": "حدث خطأ",
    "ERREUR": "حدث خطأ",
    "CONFIRM": "تأكيد",
    "CONFIRMER": "تأكيد",
    "NODATA": "لا توجد بيانات",
    "AUCUNEDONNEE": "لا توجد بيانات",
    "AREYOUSURE": "هل أنت متأكد؟",
    "CONFIRMDELETEMESSAGE": "سيتم حذف",
    "IRREVERSIBLE": "هذا الإجراء لا يمكن التراجع عنه"
  },
  "LANGUAGE": {
    "AR": "العربية",
    "FR": "الفرنسية",
    "EN": "الإنجليزية",
    "ARABE": "العربية",
    "FRANCAIS": "الفرنسية",
    "ANGLAIS": "الإنجليزية"
  }
}

====================================
FICHIER: ./src/assets/i18n/en.json
Lignes:      358
====================================

{
  "AUTH": {
    "WELCOME": "Welcome",
    "SIGN_IN": "Sign In",
    "SIGNIN": "Sign In",
    "SIGNUP": "Sign Up",
    "CREATE_ACCOUNT": "Create Account",
    "CREATEACCOUNT": "Create Account",
    "EMAIL": "Email",
    "PASSWORD": "Password",
    "LOGIN": "Login",
    "NO_ACCOUNT": "No account? Sign up",
    "NOACCOUNT": "No account? Sign up",
    "HAVE_ACCOUNT": "Already have an account? Sign in",
    "HAVEACCOUNT": "Already have an account? Sign in"
  },
  "DASHBOARD": {
    "TITLE": "Dashboard",
    "WELCOME": "Welcome",
    "ACTIVITIES": "Activities",
    "RECENT_ACTIVITIES": "Recent Activity",
    "RECENTACTIVITY": "Recent Activity",
    "NO_ACTIVITIES": "No activities",
    "NOACTIVITIES": "No activities",
    "TOTAL_BOATS": "Total Boats",
    "TOTALBOATS": "Total Boats",
    "TOTAL_SAILORS": "Total Sailors",
    "TOTALSAILORS": "Total Sailors",
    "ACTIVE_BOATS": "Active Boats",
    "ACTIVEBOATS": "Active Boats",
    "MAINTENANCE": "Maintenance",
    "STATISTICS": "Statistics",
    "SELECTBOAT": "Select a boat",
    "NOBOATSELECTED": "No boat selected"
  },
  "MENU": {
    "HOME": "Home",
    "BOATS": "Boats",
    "SORTIES": "Sea Trips",
    "AVANCES": "Advances",
    "SALAIRES": "Salaries",
    "VENTES": "Sales",
    "MOCK_DATA": "Mock Data",
    "MOCKDATA": "Mock Data",
    "SELECT_BOAT_FIRST": "Select a boat first",
    "SELECTBOATFIRST": "Select a boat first"
  },
  "BOATS": {
    "TITLE": "Boats",
    "BOAT": "Boat",
    "ADD": "Add boat",
    "ADDBOAT": "Add boat",
    "ADD_BOAT": "Add boat",
    "EDIT": "Edit",
    "EDIT_BOAT": "Edit boat",
    "DELETE": "Delete",
    "NAME": "Name",
    "REGISTRATION": "Registration",
    "ENGINE_TYPE": "Engine type",
    "ENGINETYPE": "Engine type",
    "POWER": "Power",
    "PUISSANCE": "Power",
    "ENGINEPOWER": "Engine power",
    "LENGTH": "Length",
    "LONGUEUR": "Length",
    "CAPACITY": "Capacity",
    "CAPACITE": "Capacity",
    "CONSTRUCTION_DATE": "Construction date",
    "CONSTRUCTIONDATE": "Construction date",
    "PORT": "Home port",
    "PORTATTACHE": "Home port",
    "STATUS": "Status",
    "STATUT": "Status",
    "ACTIVE": "Active",
    "MAINTENANCE": "Maintenance",
    "INACTIVE": "Inactive",
    "NO_BOAT_SELECTED": "No boat selected",
    "NOBOATSELECTED": "No boat selected",
    "NOBOATS": "No boats",
    "SELECTED_BOAT": "Selected boat",
    "SELECTEDBOAT": "Selected boat",
    "SELECTED": "Selected",
    "CLICK_TO_SELECT": "Click to select",
    "CLICKTOSELECT": "Click to select",
    "SEARCH": "Search for a boat...",
    "ACTIONS": "Actions",
    "VIEWCREW": "View crew",
    "VIEW_CREW": "View crew",
    "SELECT_INFO": "Select a boat to start",
    "SELECTINFO": "Select a boat to start",
    "CHANGE_SELECTION": "Change boat",
    "CHANGESELECTION": "Change boat"
  },
  "SAILORS": {
    "TITLE": "Sailors",
    "MARIN": "Sailor",
    "ADD": "Add sailor",
    "ADD_SAILOR": "Add sailor",
    "ADDSAILOR": "Add sailor",
    "ADDNEWSAILOR": "Add new sailor",
    "EDIT": "Edit",
    "EDITSAILOR": "Edit sailor",
    "DELETE": "Delete",
    "FIRST_NAME": "First name",
    "FIRSTNAME": "First name",
    "PRENOM": "First name",
    "LAST_NAME": "Last name",
    "LASTNAME": "Last name",
    "NOM": "Last name",
    "FUNCTION": "Function",
    "FONCTION": "Function",
    "SELECT_FUNCTION": "Select a function",
    "SELECTFUNCTION": "Select a function",
    "PHONE": "Phone",
    "TELEPHONE": "Phone",
    "EMAIL": "Email",
    "ADDRESS": "Address",
    "ADRESSE": "Address",
    "BIRTH_DATE": "Birth date",
    "BIRTHDATE": "Birth date",
    "HIRE_DATE": "Hire date",
    "HIREDATE": "Hire date",
    "LICENSE_NUMBER": "License number",
    "LICENSENUMBER": "License number",
    "CREW_OF": "Crew of",
    "CREWOF": "Crew of",
    "NOSAILORS": "No sailors",
    "CAPTAIN": "Captain",
    "CAPITAINE": "Captain",
    "SECOND": "Second",
    "MECHANIC": "Mechanic",
    "MECANICIEN": "Mechanic",
    "SAILOR": "Sailor",
    "MATELOT": "Sailor",
    "BACK": "Back",
    "RETOUR": "Back",
    "ON_LEAVE": "On leave",
    "ONLEAVE": "On leave",
    "CREW": "Crew",
    "PLACEHOLDER": {
      "LASTNAME": "Enter last name",
      "FIRSTNAME": "Enter first name",
      "PHONE": "Phone number"
    }
  },
  "SORTIES": {
    "TITLE": "Sea Trips",
    "ADD": "Add trip",
    "AJOUTER": "Add trip",
    "EDIT": "Edit",
    "MODIFIER": "Edit",
    "DELETE": "Delete",
    "SUPPRIMER": "Delete",
    "DETAILS": "Trip details",
    "DETAILSTITLE": "Trip details",
    "DESTINATION": "Destination",
    "DEPARTUREDATE": "Departure date",
    "DATEDEPART": "Departure date",
    "RETURNDATE": "Return date",
    "DATERETOUR": "Return date",
    "STATUT": "Status",
    "STATUS": {
      "ONGOING": "Ongoing",
      "ENCOURS": "Ongoing",
      "EN-COURS": "Ongoing",
      "COMPLETED": "Completed",
      "TERMINEE": "Completed",
      "CANCELLED": "Cancelled",
      "ANNULEE": "Cancelled"
    },
    "GENERALINFO": "General information",
    "OBSERVATIONS": "Observations",
    "MANAGE": "Manage trip",
    "GERER": "Manage trip",
    "NOSORTIES": "No trips",
    "SELECTSORTIES": "Select sea trips",
    "SELECTIONNEZSORTIES": "Select sea trips",
    "FROM": "From",
    "TO": "To",
    "DU": "From",
    "AU": "To"
  },
  "EXPENSES": {
    "TITLE": "Expenses",
    "DEPENSES": "Expenses",
    "ADD": "Add expense",
    "AJOUTER": "Add expense",
    "EDIT": "Edit expense",
    "MODIFIER": "Edit expense",
    "TYPE": "Expense type",
    "AMOUNT": "Amount",
    "MONTANT": "Amount",
    "DATE": "Date",
    "DESCRIPTION": "Description",
    "NOEXPENSE": "No expenses",
    "TYPES": {
      "FUEL": "Fuel",
      "CARBURANT": "Fuel",
      "FOOD": "Food",
      "NOURRITURE": "Food",
      "MAINTENANCE": "Maintenance",
      "ICE": "Ice",
      "GLACE": "Ice",
      "OILCHANGE": "Oil change",
      "VIDANGE": "Oil change",
      "CREWCNSS": "Crew CNSS",
      "CREWBONUS": "Crew bonus",
      "VMS": "VMS",
      "MISC": "Miscellaneous",
      "DIVERS": "Miscellaneous",
      "OTHER": "Other",
      "AUTRE": "Other"
    },
    "SUCCESSADD": "Expense added successfully",
    "SUCCESSUPDATE": "Expense updated successfully"
  },
  "POINTAGE": {
    "TITLE": "Attendance",
    "DATE": "Date",
    "CREW": "Crew",
    "PRESENT": "Present",
    "ABSENT": "Absent",
    "NOCREW": "No crew",
    "OBSERVATIONS": "Observations",
    "ADDOBS": "Add observation",
    "TOTAL": "Total"
  },
  "AVANCES": {
    "TITLE": "Advances",
    "ADD": "Add advance",
    "AJOUTER": "Add advance",
    "EDIT": "Edit",
    "MODIFIER": "Edit",
    "DELETE": "Delete",
    "SUPPRIMER": "Delete",
    "AMOUNT": "Amount",
    "MONTANT": "Amount",
    "DATE": "Date",
    "DESCRIPTION": "Description",
    "NO_AVANCES": "No advances",
    "NOAVANCES": "No advances",
    "TOTAL": "Total",
    "TOTAL_GENERAL": "Grand total",
    "TOTALGENERAL": "Grand total",
    "SUCCESSADD": "Advance added successfully",
    "SUCCESS_ADD": "Advance added successfully",
    "SUCCESSUPDATE": "Advance updated successfully",
    "SUCCESS_UPDATE": "Advance updated successfully",
    "SUCCESSDELETE": "Advance deleted successfully",
    "SUCCESS_DELETE": "Advance deleted successfully",
    "AMOUNTPOSITIVE": "Amount must be greater than zero",
    "AMOUNT_POSITIVE": "Amount must be greater than zero"
  },
  "SALAIRES": {
    "TITLE": "Salary Calculation",
    "CONFIG_COEFF": "Configure coefficients",
    "CONFIGCOEFF": "Configure coefficients",
    "CONFIGURERCOEFFICIENTS": "Configure coefficients",
    "CALCULER": "Calculate",
    "DESCRIPTION": "Description",
    "REVENU_TOTAL": "Total revenue",
    "REVENUTOTAL": "Total revenue",
    "TOTAL_DEPENSES": "Total expenses",
    "TOTALDEPENSES": "Total expenses",
    "PART_PROPRIETAIRE": "Owner's share (50%)",
    "PARTPROPRIETAIRE": "Owner's share (50%)",
    "PART_EQUIPAGE": "Crew's share (50%)",
    "PARTEQUIPAGE": "Crew's share (50%)",
    "DEDUCTIONS": "Deductions",
    "NUITS": "Nights",
    "MARINS": "Sailors",
    "MONTANT_A_PARTAGER": "Amount to share",
    "MONTANTAPARTAGER": "Amount to share",
    "DETAILS_PAR_MARIN": "Details per sailor",
    "DETAILSPARMARIN": "Details per sailor",
    "COEFFICIENT": "Coefficient",
    "SALAIRE_BASE": "Base salary",
    "SALAIREBASE": "Base salary",
    "PRIME_NUITS": "Night bonus",
    "PRIMENUITS": "Night bonus",
    "SALAIRE_NET": "Net salary",
    "SALAIRENET": "Net salary"
  },
  "VENTES": {
    "TITLE": "Sales",
    "ADDFACTURE": "Add invoice",
    "NEWFACTURE": "New invoice",
    "NOUVELLEFACTURE": "New invoice",
    "EDITFACTURE": "Edit invoice",
    "MODIFIERFACTURE": "Edit invoice",
    "NUMERO": "Number",
    "NUMEROFACTURE": "Invoice number",
    "CLIENT": "Client",
    "DATEVENTE": "Sale date",
    "MONTANT": "Amount",
    "MONTANTTOTAL": "Total amount",
    "DETAILS": "Details",
    "TOTAL": "Total",
    "TOTALVENTES": "Total sales",
    "TOTALGENERAL": "Grand total",
    "TOTALGENERALVENTES": "Grand total of sales",
    "MANAGEFACTURES": "Manage invoices",
    "GERERFACTURES": "Manage invoices",
    "NOFACTURESFORSORTIE": "No invoices for this trip",
    "AUCUNEFACTURE": "No invoices",
    "NOFACTURE": "No invoices"
  },
  "FACTURES": {
    "TITLE": "Invoices",
    "NOFACTURE": "No invoices"
  },
  "FORM": {
    "ADD": "Add",
    "AJOUTER": "Add",
    "EDIT": "Edit",
    "MODIFIER": "Edit",
    "DELETE": "Delete",
    "SUPPRIMER": "Delete",
    "CANCEL": "Cancel",
    "ANNULER": "Cancel",
    "SAVE": "Save",
    "ENREGISTRER": "Save",
    "REQUIRED": "This field is required",
    "REQUIRED_FIELDS": "Please fill in all required fields",
    "REQUIREDFIELDS": "Please fill in all required fields",
    "CONFIRMDELETE": "Are you sure you want to delete?",
    "CONFIRM_DELETE": "Are you sure you want to delete?",
    "INVALID_PHONE": "Invalid phone number",
    "INVALIDPHONE": "Invalid phone number",
    "INVALID_EMAIL": "Invalid email",
    "INVALIDEMAIL": "Invalid email"
  },
  "MESSAGES": {
    "LOADING": "Loading...",
    "CHARGEMENT": "Loading...",
    "SAVING": "Saving...",
    "ENREGISTREMENT": "Saving...",
    "ADDINGSAILOR": "Adding sailor...",
    "SUCCESS": "Operation successful",
    "ERROR": "An error occurred",
    "ERREUR": "An error occurred",
    "CONFIRM": "Confirm",
    "CONFIRMER": "Confirm",
    "NODATA": "No data",
    "AUCUNEDONNEE": "No data",
    "AREYOUSURE": "Are you sure?",
    "CONFIRMDELETEMESSAGE": "You are about to delete",
    "IRREVERSIBLE": "This action cannot be undone"
  },
  "LANGUAGE": {
    "AR": "Arabic",
    "FR": "French",
    "EN": "English",
    "ARABE": "Arabic",
    "FRANCAIS": "French",
    "ANGLAIS": "English"
  }
}

====================================
FICHIER: ./src/assets/i18n/fr.json
Lignes:      358
====================================

{
  "AUTH": {
    "WELCOME": "Bienvenue",
    "SIGN_IN": "Connexion",
    "SIGNIN": "Connexion",
    "SIGNUP": "Inscription",
    "CREATE_ACCOUNT": "Créer un compte",
    "CREATEACCOUNT": "Créer un compte",
    "EMAIL": "Email",
    "PASSWORD": "Mot de passe",
    "LOGIN": "Se connecter",
    "NO_ACCOUNT": "Pas de compte ? Inscrivez-vous",
    "NOACCOUNT": "Pas de compte ? Inscrivez-vous",
    "HAVE_ACCOUNT": "Déjà un compte ? Connectez-vous",
    "HAVEACCOUNT": "Déjà un compte ? Connectez-vous"
  },
  "DASHBOARD": {
    "TITLE": "Tableau de bord",
    "WELCOME": "Bienvenue",
    "ACTIVITIES": "Activités",
    "RECENT_ACTIVITIES": "Activité récente",
    "RECENTACTIVITY": "Activité récente",
    "NO_ACTIVITIES": "Aucune activité",
    "NOACTIVITIES": "Aucune activité",
    "TOTAL_BOATS": "Total bateaux",
    "TOTALBOATS": "Total bateaux",
    "TOTAL_SAILORS": "Total marins",
    "TOTALSAILORS": "Total marins",
    "ACTIVE_BOATS": "Bateaux actifs",
    "ACTIVEBOATS": "Bateaux actifs",
    "MAINTENANCE": "Maintenance",
    "STATISTICS": "Statistiques",
    "SELECTBOAT": "Sélectionner un bateau",
    "NOBOATSELECTED": "Aucun bateau sélectionné"
  },
  "MENU": {
    "HOME": "Accueil",
    "BOATS": "Bateaux",
    "SORTIES": "Sorties",
    "AVANCES": "Avances",
    "SALAIRES": "Salaires",
    "VENTES": "Ventes",
    "MOCK_DATA": "Données test",
    "MOCKDATA": "Données test",
    "SELECT_BOAT_FIRST": "Sélectionnez d'abord un bateau",
    "SELECTBOATFIRST": "Sélectionnez d'abord un bateau"
  },
  "BOATS": {
    "TITLE": "Bateaux",
    "BOAT": "Bateau",
    "ADD": "Ajouter un bateau",
    "ADDBOAT": "Ajouter un bateau",
    "ADD_BOAT": "Ajouter un bateau",
    "EDIT": "Modifier",
    "EDIT_BOAT": "Modifier le bateau",
    "DELETE": "Supprimer",
    "NAME": "Nom",
    "REGISTRATION": "Immatriculation",
    "ENGINE_TYPE": "Type de moteur",
    "ENGINETYPE": "Type de moteur",
    "POWER": "Puissance",
    "PUISSANCE": "Puissance",
    "ENGINEPOWER": "Puissance du moteur",
    "LENGTH": "Longueur",
    "LONGUEUR": "Longueur",
    "CAPACITY": "Capacité",
    "CAPACITE": "Capacité",
    "CONSTRUCTION_DATE": "Date de construction",
    "CONSTRUCTIONDATE": "Date de construction",
    "PORT": "Port d'attache",
    "PORTATTACHE": "Port d'attache",
    "STATUS": "Statut",
    "STATUT": "Statut",
    "ACTIVE": "Actif",
    "MAINTENANCE": "Maintenance",
    "INACTIVE": "Inactif",
    "NO_BOAT_SELECTED": "Aucun bateau sélectionné",
    "NOBOATSELECTED": "Aucun bateau sélectionné",
    "NOBOATS": "Aucun bateau",
    "SELECTED_BOAT": "Bateau sélectionné",
    "SELECTEDBOAT": "Bateau sélectionné",
    "SELECTED": "Sélectionné",
    "CLICK_TO_SELECT": "Cliquer pour sélectionner",
    "CLICKTOSELECT": "Cliquer pour sélectionner",
    "SEARCH": "Rechercher un bateau...",
    "ACTIONS": "Actions",
    "VIEWCREW": "Voir l'équipage",
    "VIEW_CREW": "Voir l'équipage",
    "SELECT_INFO": "Sélectionnez un bateau pour commencer",
    "SELECTINFO": "Sélectionnez un bateau pour commencer",
    "CHANGE_SELECTION": "Changer de bateau",
    "CHANGESELECTION": "Changer de bateau"
  },
  "SAILORS": {
    "TITLE": "Marins",
    "MARIN": "Marin",
    "ADD": "Ajouter un marin",
    "ADD_SAILOR": "Ajouter un marin",
    "ADDSAILOR": "Ajouter un marin",
    "ADDNEWSAILOR": "Ajouter un nouveau marin",
    "EDIT": "Modifier",
    "EDITSAILOR": "Modifier le marin",
    "DELETE": "Supprimer",
    "FIRST_NAME": "Prénom",
    "FIRSTNAME": "Prénom",
    "PRENOM": "Prénom",
    "LAST_NAME": "Nom",
    "LASTNAME": "Nom",
    "NOM": "Nom",
    "FUNCTION": "Fonction",
    "FONCTION": "Fonction",
    "SELECT_FUNCTION": "Sélectionner une fonction",
    "SELECTFUNCTION": "Sélectionner une fonction",
    "PHONE": "Téléphone",
    "TELEPHONE": "Téléphone",
    "EMAIL": "Email",
    "ADDRESS": "Adresse",
    "ADRESSE": "Adresse",
    "BIRTH_DATE": "Date de naissance",
    "BIRTHDATE": "Date de naissance",
    "HIRE_DATE": "Date d'embauche",
    "HIREDATE": "Date d'embauche",
    "LICENSE_NUMBER": "Numéro de permis",
    "LICENSENUMBER": "Numéro de permis",
    "CREW_OF": "Équipage de",
    "CREWOF": "Équipage de",
    "NOSAILORS": "Aucun marin",
    "CAPTAIN": "Capitaine",
    "CAPITAINE": "Capitaine",
    "SECOND": "Second",
    "MECHANIC": "Mécanicien",
    "MECANICIEN": "Mécanicien",
    "SAILOR": "Matelot",
    "MATELOT": "Matelot",
    "BACK": "Retour",
    "RETOUR": "Retour",
    "ON_LEAVE": "En congé",
    "ONLEAVE": "En congé",
    "CREW": "Équipage",
    "PLACEHOLDER": {
      "LASTNAME": "Entrez le nom",
      "FIRSTNAME": "Entrez le prénom",
      "PHONE": "Numéro de téléphone"
    }
  },
  "SORTIES": {
    "TITLE": "Sorties en mer",
    "ADD": "Ajouter une sortie",
    "AJOUTER": "Ajouter une sortie",
    "EDIT": "Modifier",
    "MODIFIER": "Modifier",
    "DELETE": "Supprimer",
    "SUPPRIMER": "Supprimer",
    "DETAILS": "Détails de la sortie",
    "DETAILSTITLE": "Détails de la sortie",
    "DESTINATION": "Destination",
    "DEPARTUREDATE": "Date de départ",
    "DATEDEPART": "Date de départ",
    "RETURNDATE": "Date de retour",
    "DATERETOUR": "Date de retour",
    "STATUT": "Statut",
    "STATUS": {
      "ONGOING": "En cours",
      "ENCOURS": "En cours",
      "EN-COURS": "En cours",
      "COMPLETED": "Terminée",
      "TERMINEE": "Terminée",
      "CANCELLED": "Annulée",
      "ANNULEE": "Annulée"
    },
    "GENERALINFO": "Informations générales",
    "OBSERVATIONS": "Observations",
    "MANAGE": "Gérer la sortie",
    "GERER": "Gérer la sortie",
    "NOSORTIES": "Aucune sortie",
    "SELECTSORTIES": "Sélectionner les sorties",
    "SELECTIONNEZSORTIES": "Sélectionnez les sorties",
    "FROM": "De",
    "TO": "À",
    "DU": "Du",
    "AU": "Au"
  },
  "EXPENSES": {
    "TITLE": "Dépenses",
    "DEPENSES": "Dépenses",
    "ADD": "Ajouter une dépense",
    "AJOUTER": "Ajouter une dépense",
    "EDIT": "Modifier la dépense",
    "MODIFIER": "Modifier la dépense",
    "TYPE": "Type de dépense",
    "AMOUNT": "Montant",
    "MONTANT": "Montant",
    "DATE": "Date",
    "DESCRIPTION": "Description",
    "NOEXPENSE": "Aucune dépense",
    "TYPES": {
      "FUEL": "Carburant",
      "CARBURANT": "Carburant",
      "FOOD": "Nourriture",
      "NOURRITURE": "Nourriture",
      "MAINTENANCE": "Maintenance",
      "ICE": "Glace",
      "GLACE": "Glace",
      "OILCHANGE": "Vidange",
      "VIDANGE": "Vidange",
      "CREWCNSS": "CNSS équipage",
      "CREWBONUS": "Prime équipage",
      "VMS": "VMS",
      "MISC": "Divers",
      "DIVERS": "Divers",
      "OTHER": "Autre",
      "AUTRE": "Autre"
    },
    "SUCCESSADD": "Dépense ajoutée avec succès",
    "SUCCESSUPDATE": "Dépense mise à jour avec succès"
  },
  "POINTAGE": {
    "TITLE": "Pointage",
    "DATE": "Date",
    "CREW": "Équipage",
    "PRESENT": "Présent",
    "ABSENT": "Absent",
    "NOCREW": "Aucun équipage",
    "OBSERVATIONS": "Observations",
    "ADDOBS": "Ajouter une observation",
    "TOTAL": "Total"
  },
  "AVANCES": {
    "TITLE": "Avances",
    "ADD": "Ajouter une avance",
    "AJOUTER": "Ajouter une avance",
    "EDIT": "Modifier",
    "MODIFIER": "Modifier",
    "DELETE": "Supprimer",
    "SUPPRIMER": "Supprimer",
    "AMOUNT": "Montant",
    "MONTANT": "Montant",
    "DATE": "Date",
    "DESCRIPTION": "Description",
    "NO_AVANCES": "Aucune avance",
    "NOAVANCES": "Aucune avance",
    "TOTAL": "Total",
    "TOTAL_GENERAL": "Total général",
    "TOTALGENERAL": "Total général",
    "SUCCESSADD": "Avance ajoutée avec succès",
    "SUCCESS_ADD": "Avance ajoutée avec succès",
    "SUCCESSUPDATE": "Avance mise à jour avec succès",
    "SUCCESS_UPDATE": "Avance mise à jour avec succès",
    "SUCCESSDELETE": "Avance supprimée avec succès",
    "SUCCESS_DELETE": "Avance supprimée avec succès",
    "AMOUNTPOSITIVE": "Le montant doit être supérieur à zéro",
    "AMOUNT_POSITIVE": "Le montant doit être supérieur à zéro"
  },
  "SALAIRES": {
    "TITLE": "Calcul des salaires",
    "CONFIG_COEFF": "Configurer les coefficients",
    "CONFIGCOEFF": "Configurer les coefficients",
    "CONFIGURERCOEFFICIENTS": "Configurer les coefficients",
    "CALCULER": "Calculer",
    "DESCRIPTION": "Description",
    "REVENU_TOTAL": "Revenu total",
    "REVENUTOTAL": "Revenu total",
    "TOTAL_DEPENSES": "Total dépenses",
    "TOTALDEPENSES": "Total dépenses",
    "PART_PROPRIETAIRE": "Part propriétaire (50%)",
    "PARTPROPRIETAIRE": "Part propriétaire (50%)",
    "PART_EQUIPAGE": "Part équipage (50%)",
    "PARTEQUIPAGE": "Part équipage (50%)",
    "DEDUCTIONS": "Déductions",
    "NUITS": "Nuits",
    "MARINS": "Marins",
    "MONTANT_A_PARTAGER": "Montant à partager",
    "MONTANTAPARTAGER": "Montant à partager",
    "DETAILS_PAR_MARIN": "Détails par marin",
    "DETAILSPARMARIN": "Détails par marin",
    "COEFFICIENT": "Coefficient",
    "SALAIRE_BASE": "Salaire de base",
    "SALAIREBASE": "Salaire de base",
    "PRIME_NUITS": "Prime de nuits",
    "PRIMENUITS": "Prime de nuits",
    "SALAIRE_NET": "Salaire net",
    "SALAIRENET": "Salaire net"
  },
  "VENTES": {
    "TITLE": "Ventes",
    "ADDFACTURE": "Ajouter une facture",
    "NEWFACTURE": "Nouvelle facture",
    "NOUVELLEFACTURE": "Nouvelle facture",
    "EDITFACTURE": "Modifier la facture",
    "MODIFIERFACTURE": "Modifier la facture",
    "NUMERO": "Numéro",
    "NUMEROFACTURE": "Numéro de facture",
    "CLIENT": "Client",
    "DATEVENTE": "Date de vente",
    "MONTANT": "Montant",
    "MONTANTTOTAL": "Montant total",
    "DETAILS": "Détails",
    "TOTAL": "Total",
    "TOTALVENTES": "Total ventes",
    "TOTALGENERAL": "Total général",
    "TOTALGENERALVENTES": "Total général des ventes",
    "MANAGEFACTURES": "Gérer les factures",
    "GERERFACTURES": "Gérer les factures",
    "NOFACTURESFORSORTIE": "Aucune facture pour cette sortie",
    "AUCUNEFACTURE": "Aucune facture",
    "NOFACTURE": "Aucune facture"
  },
  "FACTURES": {
    "TITLE": "Factures",
    "NOFACTURE": "Aucune facture"
  },
  "FORM": {
    "ADD": "Ajouter",
    "AJOUTER": "Ajouter",
    "EDIT": "Modifier",
    "MODIFIER": "Modifier",
    "DELETE": "Supprimer",
    "SUPPRIMER": "Supprimer",
    "CANCEL": "Annuler",
    "ANNULER": "Annuler",
    "SAVE": "Enregistrer",
    "ENREGISTRER": "Enregistrer",
    "REQUIRED": "Ce champ est requis",
    "REQUIRED_FIELDS": "Veuillez remplir tous les champs obligatoires",
    "REQUIREDFIELDS": "Veuillez remplir tous les champs obligatoires",
    "CONFIRMDELETE": "Êtes-vous sûr de vouloir supprimer ?",
    "CONFIRM_DELETE": "Êtes-vous sûr de vouloir supprimer ?",
    "INVALID_PHONE": "Numéro de téléphone invalide",
    "INVALIDPHONE": "Numéro de téléphone invalide",
    "INVALID_EMAIL": "Email invalide",
    "INVALIDEMAIL": "Email invalide"
  },
  "MESSAGES": {
    "LOADING": "Chargement...",
    "CHARGEMENT": "Chargement...",
    "SAVING": "Enregistrement...",
    "ENREGISTREMENT": "Enregistrement...",
    "ADDINGSAILOR": "Ajout du marin...",
    "SUCCESS": "Opération réussie",
    "ERROR": "Une erreur s'est produite",
    "ERREUR": "Une erreur s'est produite",
    "CONFIRM": "Confirmer",
    "CONFIRMER": "Confirmer",
    "NODATA": "Aucune donnée",
    "AUCUNEDONNEE": "Aucune donnée",
    "AREYOUSURE": "Êtes-vous sûr ?",
    "CONFIRMDELETEMESSAGE": "Vous allez supprimer",
    "IRREVERSIBLE": "Cette action est irréversible"
  },
  "LANGUAGE": {
    "AR": "Arabe",
    "FR": "Français",
    "EN": "Anglais",
    "ARABE": "Arabe",
    "FRANCAIS": "Français",
    "ANGLAIS": "Anglais"
  }
}


====================================
  RÉSUMÉ
====================================
Total fichiers: 121
Total lignes: 13434
Date: Sat Oct 18 16:19:10 CET 2025
====================================
